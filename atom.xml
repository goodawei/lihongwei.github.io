<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Henry</title>
  
  <subtitle>面朝大海，春暖花开</subtitle>
  <link href="http://blog.nicexiangcun.com/atom.xml" rel="self"/>
  
  <link href="http://blog.nicexiangcun.com/"/>
  <updated>2020-11-20T13:06:15.520Z</updated>
  <id>http://blog.nicexiangcun.com/</id>
  
  <author>
    <name>李宏伟</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>awk</title>
    <link href="http://blog.nicexiangcun.com/2020/03/11/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    <id>http://blog.nicexiangcun.com/2020/03/11/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</id>
    <published>2020-03-11T13:58:51.000Z</published>
    <updated>2020-11-20T13:06:15.520Z</updated>
    
    <content type="html"><![CDATA[<p>nginx 是七成的是tcp3次握手之后的事情，</p><p>数据包： 握手的包，传输数据的包，p 标示代表客户端给服务器的数据包需要交给应用程序立即处理，立即打断缓冲区的数据立即处理，说白了，要终止当前，打断缓冲，立即执行。buffer 是不断堆积东西，到一定量就要执行。</p><p>四层网络成负责资源开辟。开辟资源后才有socket，才有文件描述符。</p><p>工具 nc（netcat） 可用模拟 服务端 和客户端。</p><p>nc -l 8081 之后等待链接</p><p>nc localhost 8081  创建客服端，连接服务端</p><ol><li>查看nc 服务端的进程ID=2485</li></ol><p>ps -ef | grep nc</p><ol start="2"><li>查看nc 进程的文件描述符</li></ol><p>cd /proc/2485/fd</p><p>可以看到任何程序都会有 0，1，2 ，同时还看到了一个socket ，0 标准输入（读） 1 标准输出（写） 2 报错。</p><p>此时还没有客户端去链接它，但是依然会有socket,只不过此时处于监听状态。现在用一个客户端去链接它，在去看描述符列表，此时就会多出一个4号。</p><p>工具 strace 可以追踪程序与系统内核的调用和信号。</p><p>mkdir -p /home/vagrant/lihongwei/strace_file</p><p>会抓取这个nc进程的所有的系统内核的调用</p><p>strace -ff -o out nc -l 8080</p><p>然后查看日志： tail -f  out.2753</p><p>通过日志记录的系统函数名可以查看帮助 ，系统2类的，读文档</p><p>man 2 socket</p><p>man 2 bind</p><p>程序调用 socket 执行成功会返回一个文件描述符。如上面的 socket 3, 然后就 accept 3 了。</p><p>开启追踪+开启日志监听后 启动一个客户端链接服务端。</p><p>监听到新的描述符4，同时追踪到的对系统调用的 poll(),同时阻塞到了poll。</p><p>用客户端发送字符hello给服务端，在看日志情况。</p><p>通过追踪日志可以开到，系统调用 read 从 描述符4 中读取 hello ，然后通过系统调用write 写入标准输出描述符1。</p><p>用服务端发送字符lihongwei给客户端，在看日志情况。</p><p>通过追踪日志可以开到，系统调用 read 从 标准输入描述符0 中读取 lihongwei ，然后通过系统调用write 写入描述符4（客户端）。</p><p>现在 在梳理 原始版本的 socket 过程。</p><p>先不看 poll() ,理论上只要我们得到了文件描述符，我们就可以去读它。只不过没有内容就会阻塞在那，如果描述符4一直在那阻塞，当有新的客户端完成3次握手创建了新的文件描述符5，那么5会一直在accept(). 这个过程称之为 BIO.</p><p>在后来，服务端通过多线程方式，为每个文件描述符clone 一个线程去读取，使每一个线程阻塞自己的，弊端就是客户端多了，就需要多少个客户端的线程,clone 属于系统调用，浪费资源。</p><p>在后来，非阻塞IO时期的到来（NIO），内核提供accept（），可以设置成为非阻塞了，这样主程序写一个死循环(一个线程)，read() 没有数据继续 accept(),然后创建一个队列，每次循环读取队列里的fd，看看是否是可读可写。弊端：每次都要所有的fd队列调用，如果只用第1000个fd可读可写，前面的都是浪费的，重点是还是不断的调用内核是浪费的。</p><p>man 2 select</p><p>在后来，内核 新增 select系统调用， 可以同时监听多个具柄的状态变化，应用程序调用 select 告诉内核有多少 fd.有内核完成遍历 fd，然后通知应用程序。应用程序是一个 O（1）的selct 调用，但是内核还是一个O（n）的遍历。返回可读可写的fd 给应用程序。弊端：文件描述符是有限制的 select 默认支持 1024个。</p><p>在后来，epool 的系统调用，网卡的高低压电瓶 接收数据，给内存buffer，所有设备都是谁有数据达到，就往数据总线打事件，然后触发cup中断，cpu 处理然后回掉（驱动的事情），</p><p>利用中断产生事件原理，epool_ctl 会将链接的描述符放在内核的一个指定区域A，当有可读可写的时候，内核会通过中断机制，将可读可写的放在另一个区域B，而epool_wait 就是循环读取这个区域。</p><p>看strace 日志，有一个sendfile() 系统调用，可以查看帮助，man 2 sendfile, 实现的是一个0拷贝，是系统内核读出文件描述符，自己发送给客户端文件描述符，否则的话流程是这样的应用程序通过调用系统内核read,内核将文件内容读到内核一个缓冲区，然后应用程序在调用内核 write(), 内核在通过wirte 写给客户端文件描述符。</p><p>直接内存： 内核代码在系统启动的时候，就会被系统保护起来，称之为内核态，内核态为了防止用户态的应用程序黑客的破坏，只提供了一些可供调用的系统调用函数，而数据交互都是通过内核提供的缓冲区交互，不停的拷贝来拷贝去，效率就很低。为了提高效率，就申请了一块用户态和内核态共享的内存空间buffer，不用考呗来拷贝去。典型的一个案例是kafa,他的原理就是：客户端链接kafka 服务端broker，服务端broker，系统内核调用read，读到消息，这歩系统调用少不了，然后下一步需要写入磁盘，这一步不用在系统调用了，直接维护一个1g的共享内存，直接写内存，然后内核落入磁盘。kafaka sendfile() 和 直接内存2项技术 都用到了。</p><p>cd /usr/sbin</p><p>strace -ff -o out ./nginx</p><p>看worker 进程的最终日志：</p><p>以上的一些解决方案，都是在服务端的应用程序在探索方案。</p><p>最终把 nc 换成我们日常其他的应用程序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nginx 是七成的是tcp3次握手之后的事情，&lt;/p&gt;
&lt;p&gt;数据包： 握手的包，传输数据的包，p 标示代表客户端给服务器的数据包需要交给应用程序立即处理，立即打断缓冲区的数据立即处理，说白了，要终止当前，打断缓冲，立即执行。buffer 是不断堆积东西，到一定量就要执行</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://blog.nicexiangcun.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>基于docker搭建kong分布式集群</title>
    <link href="http://blog.nicexiangcun.com/2020/01/07/kong/"/>
    <id>http://blog.nicexiangcun.com/2020/01/07/kong/</id>
    <published>2020-01-07T13:52:10.000Z</published>
    <updated>2020-11-20T13:06:15.513Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建自定义网络"><a class="header-anchor" href="#创建自定义网络">¶</a>创建自定义网络</h4><p><code>docker network create kong-net</code></p><h4 id="安装kong依赖的数据库"><a class="header-anchor" href="#安装kong依赖的数据库">¶</a>安装kong依赖的数据库</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kong-database \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -p <span class="number">5432</span>:<span class="number">5432</span> \</span><br><span class="line">     -e <span class="string">&quot;POSTGRES_USER=kong&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;POSTGRES_DB=kong&quot;</span> \</span><br><span class="line">     postgres:<span class="number">9.6</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> \</span><br><span class="line">     kong:latest kong migrations bootstrap</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="安装2台kong节点"><a class="header-anchor" href="#安装2台kong节点">¶</a>安装2台kong节点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kong-node1 \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl&quot;</span> \</span><br><span class="line">     -p <span class="number">8000</span>:<span class="number">8000</span> \</span><br><span class="line">     -p <span class="number">8443</span>:<span class="number">8443</span> \</span><br><span class="line">     -p <span class="number">8001</span>:<span class="number">8001</span> \</span><br><span class="line">     -p <span class="number">8444</span>:<span class="number">8444</span> \</span><br><span class="line">     kong:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -d --name kong-node2 \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl&quot;</span> \</span><br><span class="line">     -p <span class="number">8446</span>:<span class="number">8000</span> \</span><br><span class="line">     -p <span class="number">8447</span>:<span class="number">8443</span> \</span><br><span class="line">     -p <span class="number">8448</span>:<span class="number">8001</span> \</span><br><span class="line">     -p <span class="number">8449</span>:<span class="number">8444</span> \</span><br><span class="line">     kong:latest</span><br></pre></td></tr></table></figure><h4 id="安装两台nginx代理"><a class="header-anchor" href="#安装两台nginx代理">¶</a>安装两台nginx代理</h4><p>kong 默认的管理端是口8001，对外的端口是8000和8443，这里使用一台nginx代理转发到管理端口,一台转发到对外的访问端口.</p><p><code>docker run --name nginx-node1 -p 8085:80 -d nginx</code></p><p><code>docker run --name nginx-node2 -p 8086:80 -d nginx</code></p><p>修改nginx-node1的location</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header Bitz_Client_IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">    proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    proxy_ignore_client_abort on;</span><br><span class="line">    proxy_pass  http:<span class="comment">//henry;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>henry.conf</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream henry &#123;</span><br><span class="line">    server <span class="number">10.0</span><span class="number">.208</span><span class="number">.62</span>:<span class="number">8001</span>; <span class="comment">//admin port </span></span><br><span class="line">    server <span class="number">10.0</span><span class="number">.208</span><span class="number">.62</span>:<span class="number">8448</span>; <span class="comment">//admin port</span></span><br><span class="line">    <span class="meta">#check interval=3000 rise=2 fall=5 timeout=1000 type=http;</span></span><br><span class="line">    #check_http_send <span class="string">&quot;HEAD /op/status HTTP/1.0\r\n\r\n&quot;</span>;</span><br><span class="line">    #check_http_expect_alive http_2xx http_3xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改nginx-node2的location</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header Bitz_Client_IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">    proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    proxy_ignore_client_abort on;</span><br><span class="line">    proxy_pass  http:<span class="comment">//proxy_for_api;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>proxy_for_api.conf</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream proxy_for_api &#123;</span><br><span class="line">     server <span class="number">10.0</span><span class="number">.208</span><span class="number">.62</span>:<span class="number">8000</span>;</span><br><span class="line">     server <span class="number">10.0</span><span class="number">.208</span><span class="number">.62</span>:<span class="number">8446</span>;</span><br><span class="line">     <span class="meta">#check interval=3000 rise=2 fall=5 timeout=1000 type=http;</span></span><br><span class="line">     #check_http_send <span class="string">&quot;HEAD /op/status HTTP/1.0\r\n\r\n&quot;</span>;</span><br><span class="line">     #check_http_expect_alive http_2xx http_3xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缓存"><a class="header-anchor" href="#缓存">¶</a>缓存</h4><h4 id="扩展-admin-api"><a class="header-anchor" href="#扩展-admin-api">¶</a>扩展 admin api</h4><h4 id="查看容器状态"><a class="header-anchor" href="#查看容器状态">¶</a>查看容器状态</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker container <span class="built_in">list</span> -a</span><br><span class="line"></span><br><span class="line">docker logs d402e041de4f</span><br><span class="line"></span><br><span class="line">docker restart d402e041de4f</span><br><span class="line"></span><br><span class="line">docker cp  ./http_headers.lua d402e041de4f:/usr/local/openresty/lualib/resty/</span><br><span class="line"></span><br><span class="line">docker cp d402e041de4f:/usr/local/share/lua/<span class="number">5.1</span>/kong/constants.lua ./</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;创建自定义网络&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#创建自定义网络&quot;&gt;¶&lt;/a&gt;创建自定义网络&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;docker network create kong-net&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装kong依赖的数据库&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#安装kong依赖的数据库&quot;&gt;¶&lt;/a&gt;安装kong依赖的数据库&lt;/h4&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -d --name kong-database \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     --network=kong-net \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     -p &lt;span class=&quot;number&quot;&gt;5432&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5432&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     -e &lt;span class=&quot;string&quot;&gt;&amp;quot;POSTGRES_USER=kong&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     -e &lt;span class=&quot;string&quot;&gt;&amp;quot;POSTGRES_DB=kong&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     postgres:&lt;span class=&quot;number&quot;&gt;9.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run --rm \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     --network=kong-net \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     -e &lt;span class=&quot;string&quot;&gt;&amp;quot;KONG_DATABASE=postgres&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     -e &lt;span class=&quot;string&quot;&gt;&amp;quot;KONG_PG_HOST=kong-database&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     kong:latest kong migrations bootstrap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="OpenResty" scheme="http://blog.nicexiangcun.com/categories/OpenResty/"/>
    
    
  </entry>
  
  <entry>
    <title>OpenResty的多级缓存库</title>
    <link href="http://blog.nicexiangcun.com/2020/01/07/openresty%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    <id>http://blog.nicexiangcun.com/2020/01/07/openresty%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/</id>
    <published>2020-01-07T13:52:10.000Z</published>
    <updated>2020-11-20T13:06:15.514Z</updated>
    
    <content type="html"><![CDATA[<h4 id="lua-resty-mlcache"><a class="header-anchor" href="#lua-resty-mlcache">¶</a>lua-resty-mlcache</h4><p>这个库可以作为 key/value存储来处理，但是可以缓存Lua类型和表，但是构建在lua_shared_dict，lua-resty-lrucache上 ，这种组合可以实现高性能和灵活的缓存。</p><p>功能：</p><ul><li>使用TTL缓存和负缓存，</li><li>通过lua-resty-lock构建互斥体，以防止在缓存失败时将狗堆影响到数据库/后端，</li><li>内置worker通信，传播缓存失效，并允许worker更新他们的L1 (lua-resty-lrucache )缓存的更改(set()，delete() )，</li><li>可以创建多个独立实例来保存各种类型的数据，同时依赖同一lua_shared_dict L2缓存，</li></ul><p>此库中内置的各种缓存级别的说明：</p><p><img src="http://cdn.nicexiangcun.com/lua-resty-lrucache.jpg" alt="lrucache"></p><p>缓存级别层次结构为：</p><ul><li><p>L1 ：使用Least-Recently-Used land缓存lua-resty-lrucache ，在填充时提供最快的查找，并避免耗尽worker的Lua虚拟机内存，</p></li><li><p>L2 ：所有员工共享的lua_shared_dict内存区域，只有L1未命中时才能访问此级别，并防止工作人员请求L3缓存，</p></li><li><p>L3 ：自定义函数，只由单个worker运行，以避免数据库/后端(通过lua-resty-lock )上的狗堆效应，通过L3获取的值将被设置为L2缓存，供其他员工访问，</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;lua-resty-mlcache&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#lua-resty-mlcache&quot;&gt;¶&lt;/a&gt;lua-resty-mlcache&lt;/h4&gt;
&lt;p&gt;这个库可以作为 key/value存储来处理，但是可以缓存Lu</summary>
      
    
    
    
    <category term="OpenResty" scheme="http://blog.nicexiangcun.com/categories/OpenResty/"/>
    
    
  </entry>
  
  <entry>
    <title>哈希表</title>
    <link href="http://blog.nicexiangcun.com/2020/01/03/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <id>http://blog.nicexiangcun.com/2020/01/03/%E5%93%88%E5%B8%8C%E8%A1%A8/</id>
    <published>2020-01-03T01:34:15.000Z</published>
    <updated>2020-11-20T13:06:15.520Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">hashtable是由数组和列表两种数据结构组合而成的，这里面有两个重要的知识点需要掌握，一个是如何对哈希表进行动态扩容，第二个如何巧妙的设计一个散列性和性能都非常好的散列函数。</blockquote><span id="more"></span><p><img src="http://cdn.nicexiangcun.com/hashtable.png" alt="hashtable"></p><h3 id="数组的动态扩容策略"><a class="header-anchor" href="#数组的动态扩容策略">¶</a>数组的动态扩容策略</h3><p>已java的 <code>hashmap</code>为例，它的初始长度是16，默认阀值为0.75，当存储长度达到了长度的3/4时，就会触发扩容动作，扩容的长度为2的整数次幂，这是因为2的整数次幂的数据减1转为二进制，低位都是1，在与hashcode随机出来的数转为二进制做与运算，其结果范围一定是0-hashcode之间的范围，不会越界。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bucketIndex = indexFor(hash, table.length);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="散列函数"><a class="header-anchor" href="#散列函数">¶</a>散列函数</h3><p>好的散列函数不但要保证计算速度快，还要保证散列性好，避免过多的碰撞，扰动函数的逻辑是将二进制数据右位移16位，正好是32bit的一半，然后自己的高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。</p><p><img src="http://cdn.nicexiangcun.com/hashcode.jpg" alt="hashtable"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
	hashtable是由数组和列表两种数据结构组合而成的，这里面有两个重要的知识点需要掌握，一个是如何对哈希表进行动态扩容，第二个如何巧妙的设计一个散列性和性能都非常好的散列函数。
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://blog.nicexiangcun.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>redis 主从配置</title>
    <link href="http://blog.nicexiangcun.com/2020/01/01/redis-replication/"/>
    <id>http://blog.nicexiangcun.com/2020/01/01/redis-replication/</id>
    <published>2020-01-01T14:12:34.000Z</published>
    <updated>2020-11-20T13:06:15.517Z</updated>
    
    <content type="html"><![CDATA[<ul><li>docker pull  redis</li></ul><p>启动master并打开redis持久化配置</p><ul><li>docker run -p 6379:6379 -v $PWD/redis:/data  -d redis redis-server --appendonly yes</li></ul><p>查看容器信息</p><ul><li>docker inspect d7c20d48d35c | grep IPAddress</li></ul><p>内网IP： 172.17.0.2</p><p>启动slave1</p><ul><li>docker run --name redis-6380 -p 6380:6379 -v $PWD/redis:/data -d redis redis-server</li></ul><p>内网IP： 172.17.0.3</p><p>启动slave2</p><ul><li>docker run --name redis-6381 -p 6381:6379 -v $PWD/redis:/data -d redis redis-server</li></ul><p>内网IP： 172.17.0.4</p><p>进入2个从节点，修改配置。</p><ul><li>docker exec -it c19b7c8c6ed1 /bin/bash</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info replication<span class="comment">#查看角色</span></span><br><span class="line"></span><br><span class="line">SLAVEOF <span class="number">172.17</span>.<span class="number">0.2</span> <span class="number">6379</span><span class="comment">#设置master</span></span><br></pre></td></tr></table></figure><h4 id="配置Sentinel"><a class="header-anchor" href="#配置Sentinel">¶</a>配置Sentinel</h4><p>分别进入3个容器配置 创建 sentinel.conf</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster <span class="number">172.17</span>.<span class="number">0.2</span> <span class="number">6379</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>每个节点启动 <code>redis-sentinel ./sentinel.conf</code></p><p>首先查看哨兵监控情况,然后尝试关闭主容器,再查看剩余2个从机，这里会自动选举产生新的主机，然后，我们再次将刚才停止的主机启动起来，发现启动后其自动成为从机。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;docker pull  redis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;启动master并打开redis持久化配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker run -p 6379:6379 -v $PWD/redis:/data  -d redis redis-ser</summary>
      
    
    
    
    
    <category term="redis" scheme="http://blog.nicexiangcun.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>OpenResty 搭建 Api Gateway</title>
    <link href="http://blog.nicexiangcun.com/2019/12/30/gateway/"/>
    <id>http://blog.nicexiangcun.com/2019/12/30/gateway/</id>
    <published>2019-12-30T13:52:10.000Z</published>
    <updated>2020-11-20T13:06:15.511Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What"><a class="header-anchor" href="#What">¶</a>What</h3><ul><li><p>基于Nginx和lua的高性能Web平台，内部集成了大量精良的lua库，第三方模块以及大多数依赖项，方便搭建处理高并发、扩展性极高的动态web应用、web服务，动态网关。</p></li><li><p>扩展了Nginx的能力，将Nginx有效的变成了一个强大的web应用平台，web开发人员可以使用lua脚本调动nginx支持的各种c以及lua模块。快速构建出足以胜任c10k乃至c100k以上的单机并发连接的功性能web应用系统。</p></li><li><p>充分利用了Nginx的非阻塞的I/O模型，不仅对HTTP请求，甚至对于远程后端诸如<code>Mysql</code>、<code>PostgreSQL</code>,<code>Redis</code>等都进行了一致高性能相应。</p></li></ul><h3 id="使用场景"><a class="header-anchor" href="#使用场景">¶</a>使用场景</h3><ol><li>网关&amp;web防火墙：如数据前置校验，缓存前置，数据过滤，API请求聚合，ABtest,降级，监控等，可以进行 IP/URL/UserAgent/Referer 黑名单，限流等。</li></ol><p>站内应用案例：</p><p><img src="http://cdn.nicexiangcun.com/Canvas%201.png" alt="iterm2"></p><span id="more"></span><p>图中golang注册中心服务负责将后台提交的规则信息以插件化的形式进行打包处理后提交至gateway管理中心，gateway加载插件处理流量。</p><ol start="2"><li>web应用：会进行一些业务逻辑处理，一般流程 mysql/redis/http获取数据返回前端，如京东商品详情页。</li></ol><p>利用<code>OpenResty</code>对于后端的远程存储可以进行高性能相应，可以代替类似于<code>php-fpm</code>对后端远程存储访问瓶颈的限制，转为由<code>OpenResty</code>请求，获取结果后通知给应用后端服务。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:latest</span><br><span class="line">docker run -p <span class="number">6379</span>:<span class="number">6379</span> --name redis -v $PWD/redis.conf:/root/redis/redis.conf -v $PWD/data:/root/redis/data -d redis redis-server</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> location /lua &#123;</span><br><span class="line">        content_by_lua_block &#123;</span><br><span class="line">            <span class="keyword">local</span> redis = <span class="built_in">require</span> <span class="string">&quot;resty.redis&quot;</span></span><br><span class="line">            <span class="keyword">local</span> red = redis:new()</span><br><span class="line">            red:set_timeout(<span class="number">1000</span>) </span><br><span class="line">            <span class="keyword">local</span> ok, err = red:connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">                ngx.say(<span class="string">&quot;failed to connect: &quot;</span>, err)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            ok, err = red:set(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">                ngx.say(<span class="string">&quot;failed to set dog: &quot;</span>, err)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            ngx.say(red:get(<span class="string">&quot;color&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>缓存：可以对相应内容进行缓存，减少后端请求，以及规则下发。</li></ol><p><code>OpenResty</code> 提供了lru和shared纯内存缓存服务。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lua_shared_dict books <span class="number">1</span>m;</span><br><span class="line">location /book &#123;</span><br><span class="line">    content_by_lua_block &#123;</span><br><span class="line">        <span class="keyword">local</span> cache = ngx.shared.books </span><br><span class="line">        <span class="keyword">local</span> <span class="built_in">len</span>, err = cache:lpush(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>) </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span> <span class="keyword">then</span></span><br><span class="line">             ngx.say(<span class="string">&quot;push success&quot;</span>) </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">             ngx.say(<span class="string">&quot;push err: &quot;</span>, err) </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        cache:set(<span class="string">&quot;lua&quot;</span>, <span class="string">&quot;lua&quot;</span>)</span><br><span class="line">        ngx.<span class="built_in">print</span>(cache:get(<span class="string">&quot;lua&quot;</span>))</span><br><span class="line">        cache:set(<span class="string">&quot;kind&quot;</span>, <span class="built_in">require</span>(<span class="string">&quot;cjson&quot;</span>).encode(&#123;php=<span class="number">7</span>&#125;)) </span><br><span class="line">        ngx.<span class="built_in">print</span>(<span class="built_in">require</span>(<span class="string">&quot;cjson&quot;</span>).decode(cache:get(<span class="string">&quot;kind&quot;</span>)).php)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">location /lru &#123;</span><br><span class="line">      content_by_lua_block &#123;</span><br><span class="line">        <span class="keyword">local</span> lrucache = <span class="built_in">require</span> <span class="string">&quot;resty.lrucache&quot;</span></span><br><span class="line">        <span class="keyword">local</span> cache, err = lrucache.new(<span class="number">200</span>)</span><br><span class="line">        cache:set(<span class="string">&quot;dog&quot;</span>, <span class="number">32</span>, <span class="number">0.03</span>)</span><br><span class="line">        ngx.sleep(<span class="number">0.02</span>)</span><br><span class="line">        <span class="keyword">local</span> data, stale_data = cache:get(<span class="string">&quot;dog&quot;</span>)</span><br><span class="line">        ngx.<span class="built_in">print</span>(stale_data)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenResty -s quit -p `pwd`/ -c conf/nginx.conf</span><br><span class="line"></span><br><span class="line">OpenResty -p `pwd`/ -c conf/nginx.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;What&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#What&quot;&gt;¶&lt;/a&gt;What&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基于Nginx和lua的高性能Web平台，内部集成了大量精良的lua库，第三方模块以及大多数依赖项，方便搭建处理高并发、扩展性极高的动态web应用、web服务，动态网关。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩展了Nginx的能力，将Nginx有效的变成了一个强大的web应用平台，web开发人员可以使用lua脚本调动nginx支持的各种c以及lua模块。快速构建出足以胜任c10k乃至c100k以上的单机并发连接的功性能web应用系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;充分利用了Nginx的非阻塞的I/O模型，不仅对HTTP请求，甚至对于远程后端诸如&lt;code&gt;Mysql&lt;/code&gt;、&lt;code&gt;PostgreSQL&lt;/code&gt;,&lt;code&gt;Redis&lt;/code&gt;等都进行了一致高性能相应。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用场景&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#使用场景&quot;&gt;¶&lt;/a&gt;使用场景&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;网关&amp;amp;web防火墙：如数据前置校验，缓存前置，数据过滤，API请求聚合，ABtest,降级，监控等，可以进行 IP/URL/UserAgent/Referer 黑名单，限流等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;站内应用案例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.nicexiangcun.com/Canvas%201.png&quot; alt=&quot;iterm2&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OpenResty" scheme="http://blog.nicexiangcun.com/categories/OpenResty/"/>
    
    
  </entry>
  
  <entry>
    <title>数组和链表</title>
    <link href="http://blog.nicexiangcun.com/2019/12/26/%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8/"/>
    <id>http://blog.nicexiangcun.com/2019/12/26/%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8/</id>
    <published>2019-12-26T01:34:15.000Z</published>
    <updated>2020-11-20T13:06:15.521Z</updated>
    
    <content type="html"><![CDATA[<p>数组的特点是在内存中地址是连续的，所以在随机访问一个数组中的地址的时间复杂度是O(1),寻址公式大概是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">a[i]_address = begin_address + i * data_type_size</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>&#125;,&#123;<span class="number">3</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">address = begin_address + ( i * n + j) * data_type_size</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数组由于对内存的要求比较苛刻，带来的一个问题就是低效的“插入”和“删除”，在做数据的插入和删除的时候要频繁的进行数据的迁移。对于数组的动态扩容策略的实现可以参考redis的字符串底层实现原理或者java中的arrayList&lt;&gt;.</p><span id="more"></span><p>使用场景注意： 操作的数据不宜过大。</p><p>链表的分类：</p><p>单链表：   后继指针指next向下一个节点的heac（节点包含头部，数据data和指针next）<br>双向链表： 后继指针next指向下一个节点的prev (节点包括前驱指针prev,数据data,后继指针next)<br>循环链表： 尾结点指针指向头节点</p><p>链表就是用指针将节点连接起来，它对内存的要求没有数组那么苛刻，所以链表在“插入”和“删除”的动作上的时间复杂度是O(1),但是由于链表内存不是连续的，所以不能随机访问某个元素，在查找的时候时间复杂度是O(n)。</p><p>单链表的使用经典案例如：LRU缓存淘汰策略</p><p>双向链表：java中的<code>LinkedHashMap</code>实现，双向链表比单链表会占用更多的内存，但是在查找元素的速度上会比单链表性能更高，因为双向链表的每个节点上既有前驱指针，又有后继指针，当我们知道具体某一个node的时候那么它的前驱和后继指针我们就知道了，所以它在查找过程中可以判断是忘前走还是往后走，体现了用空间换时间的设计思想。</p><p>链表的另一种使用场景经常会配合散列表使用，配合<code>hashtable</code>使用的目的主要是为了解决链表在查询过程中时间复杂度O(N)的问题。做法是将单链表或者双链表中的节点通过hash函数散列到数组的槽(桶)上，用一个新的指针通过拉链的方式将冲突的节点连接上。这样在查找某一个node的时候，时间复杂度是接近O(1)的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;数组的特点是在内存中地址是连续的，所以在随机访问一个数组中的地址的时间复杂度是O(1),寻址公式大概是：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a[i]_address = begin_address + i * data_type_size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = &amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;address = begin_address + ( i * n + j) * data_type_size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数组由于对内存的要求比较苛刻，带来的一个问题就是低效的“插入”和“删除”，在做数据的插入和删除的时候要频繁的进行数据的迁移。对于数组的动态扩容策略的实现可以参考redis的字符串底层实现原理或者java中的arrayList&amp;lt;&amp;gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://blog.nicexiangcun.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>linux中内存字节对齐</title>
    <link href="http://blog.nicexiangcun.com/2019/12/25/%E5%86%85%E5%AD%98%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/"/>
    <id>http://blog.nicexiangcun.com/2019/12/25/%E5%86%85%E5%AD%98%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/</id>
    <published>2019-12-25T13:34:15.000Z</published>
    <updated>2020-11-20T13:06:15.520Z</updated>
    
    <content type="html"><![CDATA[<p>🍒 linux下默认字节对齐是以int类型变量所占字节数对齐，也就是说会申请被4整除的内存地址写入int类型，所以这就是我们每次看int类型的地址不会看到有奇数的。</p><h4 id="什么叫对齐"><a class="header-anchor" href="#什么叫对齐">¶</a>什么叫对齐</h4><p>计算机中内存空间都是按照byte划分的，从理论上讲似乎对任何类型的变量的访问可以从任何地址开始，但实际情况是在访问特定类型变量的时候经常在特 定的内存地址访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是顺序的一个接一个的排放，这就是对齐。</p><h4 id="为什么要进行对齐"><a class="header-anchor" href="#为什么要进行对齐">¶</a>为什么要进行对齐</h4><p>各个硬件平台对存储空间的处理上有很大的不同。一些平台对某些特定类型的数据只能从某些特定地址开始存取。比如有些架构的CPU在访问一个没有进行对齐的变量的时候会发生错误,那么在这种架构下编程必须保证字节对齐.其他平台可能没有这种情况，但是最常见的是如果不按照适合其平台要求对 数据存放进行对齐，会在存取效率上带来损失。比如有些平台每次读都是从偶地址开始，如果一个int型（假设为32位系统）如果存放在偶地址开始的地方，那么一个读周期就可以读出这32bit，而如果存放在奇地址开始的地方，就需要2个读周期，并对两次读出的结果的高低字节进行拼凑才能得到该32bit数据（linux中：在内存中是低位在先，高位在后）。显然在读取效率上下降很多。</p><p>例1程序分配的内存地址如下图：</p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a = <span class="number">9.99</span>;</span><br><span class="line">    <span class="keyword">char</span>   b = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">int</span>    c =  <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p,sizeof(a):%lu\n&quot;</span>,&amp;a,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p,sizeof(b):%lu\n&quot;</span>,&amp;b,<span class="keyword">sizeof</span>(b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p,sizeof(c):%lu\n&quot;</span>,&amp;c,<span class="keyword">sizeof</span>(c));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://cdn.nicexiangcun.com/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.png" alt="计算机内存字节对齐"></p><p>例2程序分配的内存地址如下图：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">char</span>   a = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">   <span class="keyword">double</span> b = <span class="number">9.99</span>;</span><br><span class="line">   <span class="keyword">char</span>   c = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">   <span class="keyword">int</span>    d =  <span class="number">1</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%p,sizeof(a):%lu\n&quot;</span>,&amp;a,<span class="keyword">sizeof</span>(a));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%p,sizeof(b):%lu\n&quot;</span>,&amp;b,<span class="keyword">sizeof</span>(b));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%p,sizeof(c):%lu\n&quot;</span>,&amp;c,<span class="keyword">sizeof</span>(c));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%p,sizeof(d):%lu\n&quot;</span>,&amp;d,<span class="keyword">sizeof</span>(d));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.nicexiangcun.com/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%902.png" alt="计算机内存字节对齐"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;🍒 linux下默认字节对齐是以int类型变量所占字节数对齐，也就是说会申请被4整除的内存地址写入int类型，所以这就是我们每次看int类型的地址不会看到有奇数的。&lt;/p&gt;
&lt;h4 id=&quot;什么叫对齐&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#什么叫对齐&quot;&gt;¶&lt;/a&gt;什么叫对齐&lt;/h4&gt;
&lt;p&gt;计算机中内存空间都是按照byte划分的，从理论上讲似乎对任何类型的变量的访问可以从任何地址开始，但实际情况是在访问特定类型变量的时候经常在特 定的内存地址访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是顺序的一个接一个的排放，这就是对齐。&lt;/p&gt;
&lt;h4 id=&quot;为什么要进行对齐&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#为什么要进行对齐&quot;&gt;¶&lt;/a&gt;为什么要进行对齐&lt;/h4&gt;
&lt;p&gt;各个硬件平台对存储空间的处理上有很大的不同。一些平台对某些特定类型的数据只能从某些特定地址开始存取。比如有些架构的CPU在访问一个没有进行对齐的变量的时候会发生错误,那么在这种架构下编程必须保证字节对齐.其他平台可能没有这种情况，但是最常见的是如果不按照适合其平台要求对 数据存放进行对齐，会在存取效率上带来损失。比如有些平台每次读都是从偶地址开始，如果一个int型（假设为32位系统）如果存放在偶地址开始的地方，那么一个读周期就可以读出这32bit，而如果存放在奇地址开始的地方，就需要2个读周期，并对两次读出的结果的高低字节进行拼凑才能得到该32bit数据（linux中：在内存中是低位在先，高位在后）。显然在读取效率上下降很多。&lt;/p&gt;
&lt;p&gt;例1程序分配的内存地址如下图：&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://blog.nicexiangcun.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>代码整洁之道之技巧总结</title>
    <link href="http://blog.nicexiangcun.com/2019/11/30/code-summarize/"/>
    <id>http://blog.nicexiangcun.com/2019/11/30/code-summarize/</id>
    <published>2019-11-30T14:48:12.000Z</published>
    <updated>2020-11-20T13:06:15.511Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.nicexiangcun.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%A5%AE%E7%94%A8%E5%9B%BE%E7%89%87" alt="Coding Summarize"></p><h1>优雅的代码应该是什么样的</h1><ul><li>能够满足当前的需求（功能，稳定性，负载能力等）。</li><li>对未来的需求，能够快速的扩展，修改。</li><li>出现问题能够快速的定位问题方便修改问题。</li><li>尽量避免重复，最大程度复用。</li></ul><p>针对这些问题，整理出一些自己对于设计模式的理解，其实设计模式就是别人走过的路，踩过的坑，总结出来的优秀经验。总结的代码整洁之道就是如何复用这些经验。</p><p>下面是代码整洁之道第一篇：技巧总结 🙏</p><span id="more"></span><p>1.命名非常重要，就为了可读性更好。</p><p>2.适当的使用注释，开发新功能，修改别人的bug,关键业务逻辑，要合理的使用注释</p><p>3.变量需要初始化</p><p>4.1==$a 和常量比较常量在前,防御编程，避免误写出$a=1</p><p>5.防御式编程和契约编程</p><p>默认不信任任何外部调用和方法，默认双方遵守契约，任意一方撕毁契约则抛出异常，建议在UI及应用层倾向于防御式编程保证友好及体验，在逻辑层倾向于契约式编程尽早暴露隐患</p><p>6.可控的环境参数 🐛</p><p>代码不受环境的影响，各种魔术常亮，声明字符集，定义包含的绝对路径，错误级别7，自己开发的测试，准生产，生产环境切好等 🕷️</p><p>7.PHP结束标记</p><p>纯php语句不要结束标记</p><!-- more --><p>8.if的使用技巧之“给定初始值”</p><p>9.if的使用技巧之“用&quot;&amp;&amp;&quot; 替换 if”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rand</span>&gt;<span class="number">3</span>)&#123;</span><br><span class="line">     <span class="variable">$long</span>=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$rand</span>&gt;<span class="number">3</span> &amp;&amp; <span class="variable">$long</span>=<span class="number">5</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>10.if的使用技巧之“用三元运算符替换if”</p><p>11.if的使用技巧之“去掉多此一举的if”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>==<span class="variable">$a</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="number">1</span>==<span class="variable">$a</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>12.表驱动法 map</p><p>在php中数组使用的是hashtable，时间复杂度是O(1),运行速度远远高于以上两种，另外书写起来也更简便的多。如果传入的参数是开始未定义的也不会运行查找浪费大量的系统资源。</p><p>13.使用更精悍短小的代码</p><p>函数的最佳最大长度是150行代码，这样的代码比较便于维护，也方便修改，对于某些过于集中的算法函数，可能长度会大于这个长度。不过尽量还是不要超过，短小的才是美好的，短小的便于理解也便于修改，而功能相对单一的代码也就意味着可以复用它的地方会更多，有更好的复用性，另外当程序出问题的时候，测试起来也会相对简单好定位，便于维护修改。</p><p>14.避免使用幻数 ,幻数，简单来说既是我们所说的硬编码.</p><p>15.中间结果赋值给变量</p><p>当一个表达式中嵌套层数过多，逻辑过于复杂的时候，将其拆分成一块块的，将其每一块的结果赋值给中间变量，这样可以降低程序的阅读难度和提高可维护性。</p><p>16.复杂的逻辑表达式做成布尔函数</p><p>当某一个判断比较复杂的时候，可以考虑将其做成一个布尔函数，不要怕这个函数里面的代码少，很多时候这样写可以使你的逻辑更容易维护，另外碰到相同逻辑判定的地点还可以直接复用，不需要一处修改处处修改。</p><p>17.永远不要复制粘贴雷同的代码</p><p>大段相同的代码实现类似的但是略有不同的程序功能的时候，我们很容易就回进行复制完后修改，其实这种做法会有很大的问题.</p><p>18.备份源代码文件</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;http://cdn.nicexiangcun.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%A5%AE%E7%94%A8%E5%9B%BE%E7%89%87&quot; alt=&quot;Coding Summarize&quot;&gt;&lt;/p&gt;
&lt;h1&gt;优雅的代码应该是什么样的&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;能够满足当前的需求（功能，稳定性，负载能力等）。&lt;/li&gt;
&lt;li&gt;对未来的需求，能够快速的扩展，修改。&lt;/li&gt;
&lt;li&gt;出现问题能够快速的定位问题方便修改问题。&lt;/li&gt;
&lt;li&gt;尽量避免重复，最大程度复用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对这些问题，整理出一些自己对于设计模式的理解，其实设计模式就是别人走过的路，踩过的坑，总结出来的优秀经验。总结的代码整洁之道就是如何复用这些经验。&lt;/p&gt;
&lt;p&gt;下面是代码整洁之道第一篇：技巧总结 🙏&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://blog.nicexiangcun.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://blog.nicexiangcun.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>代码整洁之道之对象间的发布订阅</title>
    <link href="http://blog.nicexiangcun.com/2019/11/30/code-summarize-three/"/>
    <id>http://blog.nicexiangcun.com/2019/11/30/code-summarize-three/</id>
    <published>2019-11-30T14:19:37.000Z</published>
    <updated>2020-11-20T13:06:15.510Z</updated>
    
    <content type="html"><![CDATA[<p>实现laravel中 <code>Observer</code>模式三种方式：</p><ul><li>框架本地的Events事件机制</li><li>PHP定义了两个接口：SplObserver和SplSubject</li><li>自定义<code>Observer</code> 和 <code>Subject</code></li></ul><p>不管采用哪种方式其目的是：对象更改其状态时，将通知附加的“观察者”。它用于缩短耦合对象的数量，并使用松耦合。</p><p>举个缓存依赖例子：🐶</p><span id="more"></span><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果数据源发生变化根据cacheType清空不同数据缓存</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheRepository</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$catenation</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$db</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;catenation = <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cacheClear</span>(<span class="params"><span class="variable">$cacheType</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mem 观察员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemcacheObserver</span> <span class="keyword">implements</span> \<span class="title">SplObserver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">Cache <span class="variable">$cache</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="variable">$cache</span>-&gt;clean(<span class="string">&#x27;mem&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArticles</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getArticles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><!-- more --><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mon 观察员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongodbObserver</span> <span class="keyword">implements</span> \<span class="title">SplObserver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">Cache <span class="variable">$cache</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="variable">$cache</span>-&gt;clean(<span class="string">&#x27;mon&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓存对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheSubject</span> <span class="keyword">implements</span> \<span class="title">SplSubject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> \SplObjectStorage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$observers</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;observers = <span class="keyword">new</span> \<span class="built_in">SplObjectStorage</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span>(<span class="params">\<span class="built_in">SplObserver</span> <span class="variable">$observer</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;observers-&gt;attach(<span class="variable">$observer</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detach</span>(<span class="params">\<span class="built_in">SplObserver</span> <span class="variable">$observer</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;observers-&gt;detach(<span class="variable">$observer</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params">Cache <span class="variable">$cache</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> \SplObserver $observer */</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;observers <span class="keyword">as</span> <span class="variable">$observer</span>) &#123;</span><br><span class="line">            <span class="variable">$observer</span>-&gt;update(<span class="variable">$cache</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新数据源</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$memcache</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$mongodb</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cacheSub</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">CacheSubject <span class="variable">$cacheSub</span> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cacheSub = <span class="variable">$cacheSub</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">postUpdate</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//添加订阅对象，此处是主动添加观察者，理想状态应该是观察者主动来订阅，做成事件配置，notify去读取配置</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;cacheSub-&gt;attach(MemcacheObserver <span class="keyword">$this</span>-&gt;memcache);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cacheSub-&gt;attach(MongodbObserver  <span class="keyword">$this</span>-&gt;mongodb);</span><br><span class="line">        <span class="comment">//更新数据源</span></span><br><span class="line">        <span class="built_in">self</span>::update([<span class="string">&#x27;id&#x27;</span>=&gt;<span class="variable">$id</span>]);</span><br><span class="line">        <span class="comment">//通知订阅者</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;cacheSub-&gt;notify(Cache <span class="variable">$cache</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;实现laravel中 &lt;code&gt;Observer&lt;/code&gt;模式三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;框架本地的Events事件机制&lt;/li&gt;
&lt;li&gt;PHP定义了两个接口：SplObserver和SplSubject&lt;/li&gt;
&lt;li&gt;自定义&lt;code&gt;Observer&lt;/code&gt; 和 &lt;code&gt;Subject&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不管采用哪种方式其目的是：对象更改其状态时，将通知附加的“观察者”。它用于缩短耦合对象的数量，并使用松耦合。&lt;/p&gt;
&lt;p&gt;举个缓存依赖例子：🐶&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://blog.nicexiangcun.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://blog.nicexiangcun.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>How do you understand yield in php</title>
    <link href="http://blog.nicexiangcun.com/2019/11/30/yield/"/>
    <id>http://blog.nicexiangcun.com/2019/11/30/yield/</id>
    <published>2019-11-30T13:43:35.000Z</published>
    <updated>2020-11-20T13:06:15.520Z</updated>
    
    <content type="html"><![CDATA[<p>yield 迭代器 协程  💤</p><p>我们知道cpu是按照时间片段执行的程序的，php中当线程遇到yield的时候，可以让出cpu去执行另外一段程序，是表示协程最初始的一种形态。真正意义上的协程要复杂的多，比如通常会在影响性能的网络io环节实现协程处理，是应用程序在处理网络io的时候让出cpu去处理其他事情。</p><h3 id="从系统内存等资源开销角度考虑其使用场景"><a class="header-anchor" href="#从系统内存等资源开销角度考虑其使用场景">¶</a>从系统内存等资源开销角度考虑其使用场景</h3><p>大文件读取，一次性取出大的数据集 🌱</p><p><code>yield</code> 的优势在于每次迭代只是到当前的<code>yield</code>就返回了，下次迭代在从它记录的位置在往下执行。不会消耗过多的系统资源。因为协程是程序之间上下文的切换，要比线程之间切换带来系统开销小。</p><span id="more"></span><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">nowExcute</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;fib() <span class="keyword">as</span> <span class="variable">$mobile</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$mobile</span>.PHP_EOL ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$handle</span> = fopen(<span class="string">&#x27;http://uc.dev/Jbh-JKFKLSJFKL4394.txt&#x27;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (!feof (<span class="variable">$handle</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$buffer</span>  = fgets(<span class="variable">$handle</span>);</span><br><span class="line">        <span class="keyword">yield</span> trim(<span class="variable">$buffer</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose (<span class="variable">$handle</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从算法设计角度考虑其使用场景"><a class="header-anchor" href="#从算法设计角度考虑其使用场景">¶</a>从算法设计角度考虑其使用场景</h3><p>斐波那契数列的实现 ☄️</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;fib(<span class="number">10</span>) <span class="keyword">as</span> <span class="variable">$n</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>  <span class="variable">$n</span>.PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params"><span class="variable">$num</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$n</span> = <span class="number">0</span> ; <span class="variable">$a</span> = <span class="number">0</span> ; <span class="variable">$b</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$n</span> &lt; <span class="variable">$num</span>)&#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="variable">$b</span> ;</span><br><span class="line">        <span class="variable">$t</span> = <span class="variable">$a</span> ;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$b</span>;</span><br><span class="line">        <span class="variable">$b</span> = <span class="variable">$b</span>+<span class="variable">$t</span>;</span><br><span class="line">        <span class="variable">$n</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fin</span>(<span class="params">num</span>):</span></span><br><span class="line">n,a,b = <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n&lt;num:</span><br><span class="line"><span class="keyword">yield</span> b      </span><br><span class="line">a,b = b,a+b</span><br></pre></td></tr></table></figure><h3 id="从程序功能设计角度考虑的使用场景"><a class="header-anchor" href="#从程序功能设计角度考虑的使用场景">¶</a>从程序功能设计角度考虑的使用场景</h3><p>管道模式的实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(begin) ----------------&gt; <span class="function"><span class="keyword">function</span>(<span class="params"></span>) -----------------&gt; (<span class="params">end</span>)</span></span><br><span class="line"><span class="function">            ^   ^   ^                   ^   ^   ^</span></span><br><span class="line"><span class="function">            |   |   |                   |   |   |</span></span><br><span class="line"><span class="function">            |   |   +------- <span class="title">M1</span>(<span class="params"></span>) ------+   |   |</span></span><br><span class="line"><span class="function">            |   +----------- ...  ----------+   |</span></span><br><span class="line"><span class="function">            +--------------- <span class="title">Mn</span>(<span class="params"></span>) --------------+</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">middleware</span>(<span class="params"><span class="variable">$handlers</span>,<span class="variable">$arguments</span> = []</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//函数栈</span></span><br><span class="line">            <span class="variable">$stack</span> = [];</span><br><span class="line">            <span class="variable">$result</span> = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$handlers</span> <span class="keyword">as</span> <span class="variable">$handler</span>) &#123;</span><br><span class="line">                <span class="comment">// 每次循环之前重置，只能保存最后一个处理程序的返回值</span></span><br><span class="line">                <span class="variable">$result</span> = <span class="literal">null</span>;</span><br><span class="line">                <span class="variable">$generator</span> = call_user_func_array(<span class="variable">$handler</span>, <span class="variable">$arguments</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$generator</span> <span class="keyword">instanceof</span> \<span class="built_in">Generator</span>) &#123;</span><br><span class="line">                    <span class="comment">//将协程函数入栈,为重入做准备</span></span><br><span class="line">                    <span class="variable">$stack</span>[] = <span class="variable">$generator</span>;</span><br><span class="line">                    <span class="comment">//获取协程返回参数,到第一个yield地方返回，yield以下的程序在栈里取出在执行</span></span><br><span class="line">                    <span class="variable">$yieldValue</span> = <span class="variable">$generator</span>-&gt;current();</span><br><span class="line">                    <span class="comment">//检查是否重入函数栈</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$yieldValue</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="variable">$generator</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//不属于迭代器的function,获取function的返回值</span></span><br><span class="line">                    <span class="variable">$result</span> = <span class="variable">$generator</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$return</span> = (<span class="variable">$result</span> !== <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//将协程函数出栈</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$generator</span> = array_pop(<span class="variable">$stack</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$return</span>) &#123;</span><br><span class="line">                    <span class="variable">$generator</span>-&gt;send(<span class="variable">$result</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$generator</span>-&gt;next();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$logMiddleware</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;日志中间件：进参记录日志 \n&quot;</span>;</span><br><span class="line">             <span class="keyword">yield</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;日志中间件：出参记录日志 \n&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$validatorMiddleware</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;验证器中间件：前置验证器中间件 \n&quot;</span>;</span><br><span class="line">            <span class="variable">$returnParms</span> = <span class="keyword">yield</span>;</span><br><span class="line">            print_r(<span class="variable">$returnParms</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;验证器中间件：后置验证器中间件 \n&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable">$handle</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&#x27;your English name&#x27;</span>=&gt;<span class="string">&#x27;Henry&#x27;</span>];</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        middleware([<span class="variable">$logMiddleware</span>,<span class="variable">$validatorMiddleware</span>,<span class="variable">$handle</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">日志中间件：进参记录日志</span><br><span class="line">验证器中间件：前置验证器中间件</span><br><span class="line"><span class="keyword">array</span>(<span class="string">&#x27;your English name&#x27;</span>=&gt;<span class="string">&#x27;Henry&#x27;</span>)</span><br><span class="line">验证器中间件：后置验证器中间件</span><br><span class="line">日志中间件：出参记录日志</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;yield 迭代器 协程  💤&lt;/p&gt;
&lt;p&gt;我们知道cpu是按照时间片段执行的程序的，php中当线程遇到yield的时候，可以让出cpu去执行另外一段程序，是表示协程最初始的一种形态。真正意义上的协程要复杂的多，比如通常会在影响性能的网络io环节实现协程处理，是应用程序在处理网络io的时候让出cpu去处理其他事情。&lt;/p&gt;
&lt;h3 id=&quot;从系统内存等资源开销角度考虑其使用场景&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#从系统内存等资源开销角度考虑其使用场景&quot;&gt;¶&lt;/a&gt;从系统内存等资源开销角度考虑其使用场景&lt;/h3&gt;
&lt;p&gt;大文件读取，一次性取出大的数据集 🌱&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; 的优势在于每次迭代只是到当前的&lt;code&gt;yield&lt;/code&gt;就返回了，下次迭代在从它记录的位置在往下执行。不会消耗过多的系统资源。因为协程是程序之间上下文的切换，要比线程之间切换带来系统开销小。&lt;/p&gt;</summary>
    
    
    
    
    <category term="协程" scheme="http://blog.nicexiangcun.com/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>代码整洁之道之优化嵌套代码</title>
    <link href="http://blog.nicexiangcun.com/2019/11/30/code-summarize-two/"/>
    <id>http://blog.nicexiangcun.com/2019/11/30/code-summarize-two/</id>
    <published>2019-11-30T12:44:30.000Z</published>
    <updated>2020-11-20T13:06:15.511Z</updated>
    
    <content type="html"><![CDATA[<h1>☘️ if else 和 switch case 优化方案</h1><p>1 如果嵌套逻辑是 返回值或者输出等简单的一句话代码，则使用表驱动方案。</p><p>2 如果是逻辑处理或者函数调用，则采用策略和多态模式。</p><p>举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$type</span> = <span class="variable">$data</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"> </span><br><span class="line"><span class="comment">//1-绑卡 2-充值</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="variable">$res</span> = (<span class="keyword">new</span> AccountPermission())-&gt;bindCard(<span class="variable">$account</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="variable">$res</span> = (<span class="keyword">new</span> AccountPermission())-&gt;recharge(<span class="variable">$account</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p>以上这个例子逻辑大概就是根据客户端传递的type去调用不同的验证方法，这样写违背了设计原则之中的针对扩展开放，修改关闭原则，如果有新增type类型那么必须要修改此文件和AccountPermission文件，另外函数的封装要尽可能的<code>短小精悍</code>，代码逻辑直截了当并尽可能的减少依赖关系，这样才能体现出只做好一件事情。那么针对这些问题，以上的代码优化思路是这样的：</p><p>1 定义抽象类或者接口 AbstractPermission</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractPermission</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">...<span class="variable">$data</span></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 创建不同的验证实体去实现或者继承AbstractPermission</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BindCard的验证实体</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BindCardPermission</span> <span class="keyword">extends</span> <span class="title">AbstractPermission</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">...<span class="variable">$parms</span></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//todo</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- more --><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Recharge的验证实体</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RechargePermission</span> <span class="keyword">extends</span> <span class="title">AbstractPermission</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">...<span class="variable">$parms</span></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//todo</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 创建工厂将创建实体的过程封装起来，在业务层通过策略来动态获取实例对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当然此处的工厂实例最好也要去继承或者实现一个抽象工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryPermission</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> PERMISSION = <span class="string">&#x27;Permission&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">permission</span>(<span class="params"><span class="variable">$permission</span>,<span class="variable">$parms</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$class</span> = <span class="variable">$permission</span>. constant(<span class="keyword">__CLASS__</span> . <span class="string">&quot;::PERMISSION&quot;</span>);</span><br><span class="line">        <span class="variable">$permissionObj</span> = <span class="string">&quot;App\\<span class="subst">&#123;$class&#125;</span>&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array(</span><br><span class="line">         [<span class="keyword">new</span> <span class="variable">$permissionObj</span>(),<span class="string">&#x27;validator&#x27;</span>],                                      [<span class="variable">$parms</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 如何使用，这里就要去设计一套策略了，可以结合创建工厂的步骤设计具体的策略</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  type 传递 BindCard  Recharge ....</span></span><br><span class="line"><span class="variable">$type</span>  = <span class="variable">$data</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="variable">$parms</span> = <span class="variable">$data</span>[<span class="string">&#x27;parms&#x27;</span>];</span><br><span class="line"><span class="variable">$res</span> = FactoryPermission::permission(<span class="variable">$type</span>,<span class="variable">$parms</span>)</span><br></pre></td></tr></table></figure><p>总结：将职责单一，减少依赖，针对扩展开放修改关闭，这样以后有新增type只需要扩展新增的permission实体，而不需要修改任何其他文件。</p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;☘️ if else 和 switch case 优化方案&lt;/h1&gt;
&lt;p&gt;1 如果嵌套逻辑是 返回值或者输出等简单的一句话代码，则使用表驱动方案。&lt;/p&gt;
&lt;p&gt;2 如果是逻辑处理或者函数调用，则采用策略和多态模式。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$type&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$data&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&amp;#x27;type&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1-绑卡 2-充值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;variable&quot;&gt;$type&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;$res&lt;/span&gt; = (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AccountPermission())-&amp;gt;bindCard(&lt;span class=&quot;variable&quot;&gt;$account&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;$res&lt;/span&gt; = (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AccountPermission())-&amp;gt;recharge(&lt;span class=&quot;variable&quot;&gt;$account&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://blog.nicexiangcun.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://blog.nicexiangcun.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>awk</title>
    <link href="http://blog.nicexiangcun.com/2019/11/29/awk/"/>
    <id>http://blog.nicexiangcun.com/2019/11/29/awk/</id>
    <published>2019-11-29T13:58:51.000Z</published>
    <updated>2020-11-20T13:06:15.510Z</updated>
    
    <content type="html"><![CDATA[<p>Reference：<code>https://www.gnu.org/software/gawk/manual/gawk.html#Running-gawk</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Amelia       555-5553     amelia.zodiacusque@gmail.com    F</span><br><span class="line">Anthony      555-3412     anthony.asserturo@hotmail.com   A</span><br><span class="line">Becky        555-7685     becky.algebrarum@gmail.com      A</span><br><span class="line">Bill         555-1675     bill.drowning@hotmail.com       A</span><br><span class="line">Broderick    555-0542     broderick.aliquotiens@yahoo.com R</span><br><span class="line">Camilla      555-2912     camilla.infusarum@skynet.be     R</span><br><span class="line">Fabius       555-1234     fabius.undevicesimus@ucb.edu    F</span><br><span class="line">Julie        555-6699     julie.perscrutabor@skeeve.com   F</span><br><span class="line">Martin       555-6480     martin.codicibus@hotmail.com    A</span><br><span class="line">Samuel       555-3430     samuel.lanceolis@shu.edu        A</span><br><span class="line">Jean-Paul    555-2127     jeanpaul.campanorum@nyu.edu     R</span><br></pre></td></tr></table></figure><h3 id="按-0-查找匹配元素"><a class="header-anchor" href="#按-0-查找匹配元素">¶</a>按 $0 查找匹配元素</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;/li/ &#123;print $0&#125;&#x27;</span> 2017.log </span><br><span class="line">&lt;=&gt;</span><br><span class="line">grep li 2017.log</span><br><span class="line"></span><br><span class="line">//不同的是 ‘/’ is called a regular expression,</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="切割-slice"><a class="header-anchor" href="#切割-slice">¶</a>切割 slice</h3><p><code>uuidd:x:107:111::/run/uuidd:/bin/false</code></p><p>如果每行串都有某个特殊字符可以按照特殊字符切割字符串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27; /redis/ &#123; print $1 &#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;/redis/ &#123; print $1 &#125;&#x27;</span> /etc/passwd  | wc -l</span><br><span class="line"></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27; &#123; print $1 &#125;&#x27;</span> /etc/passwd | sort </span><br></pre></td></tr></table></figure><h3 id="COUNT-THIS-FILE"><a class="header-anchor" href="#COUNT-THIS-FILE">¶</a>COUNT THIS FILE</h3><p>统计文件有多少列<br><code>awk 'END &#123; print NF &#125;' 2017.log </code><br>统计文件有多少行<br><code>awk 'END &#123; print NR &#125;' 2017.log</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Reference：&lt;code&gt;https://www.gnu.org/software/gawk/manual/gawk.html#Running-gawk&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Amelia       555-5553     amelia.zodiacusque@gmail.com    F&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Anthony      555-3412     anthony.asserturo@hotmail.com   A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Becky        555-7685     becky.algebrarum@gmail.com      A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bill         555-1675     bill.drowning@hotmail.com       A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Broderick    555-0542     broderick.aliquotiens@yahoo.com R&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Camilla      555-2912     camilla.infusarum@skynet.be     R&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fabius       555-1234     fabius.undevicesimus@ucb.edu    F&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Julie        555-6699     julie.perscrutabor@skeeve.com   F&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Martin       555-6480     martin.codicibus@hotmail.com    A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Samuel       555-3430     samuel.lanceolis@shu.edu        A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jean-Paul    555-2127     jeanpaul.campanorum@nyu.edu     R&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;按-0-查找匹配元素&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#按-0-查找匹配元素&quot;&gt;¶&lt;/a&gt;按 $0 查找匹配元素&lt;/h3&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;awk &lt;span class=&quot;string&quot;&gt;&amp;#x27;/li/ &amp;#123;print $0&amp;#125;&amp;#x27;&lt;/span&gt; 2017.log &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grep li 2017.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//不同的是 ‘/’ is called a regular expression,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://blog.nicexiangcun.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Best practice for feature switch of devops</title>
    <link href="http://blog.nicexiangcun.com/2019/11/28/devops-featur-switch/"/>
    <id>http://blog.nicexiangcun.com/2019/11/28/devops-featur-switch/</id>
    <published>2019-11-28T13:55:47.000Z</published>
    <updated>2020-11-20T13:06:15.511Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要使用特性开关"><a class="header-anchor" href="#为什么要使用特性开关">¶</a>为什么要使用特性开关?</h3><ul><li>上线周期短，屏蔽在单一上线周期内已开发但未完成的特性（例如每周两次上线，但“产品列表”功能需要三周才能开发完成）</li><li>对比在不同 UI 下的用户行为和转化率（A/B Testing）</li><li>部署与发布分离，持续频繁部署，业务随时可发布</li><li>部署：代码部署到生产环境</li><li>发布：特性上线，交付给最终用户使用,部署与发布分离，开发团队频繁持续进行部署，而业务人员（需求方）决定特性何时发布。</li></ul><hr><span id="more"></span><h3 id="为什么不继续使用旧做法（挑代码）？"><a class="header-anchor" href="#为什么不继续使用旧做法（挑代码）？">¶</a>为什么不继续使用旧做法（挑代码）？</h3><p>旧做法：每次发布前，从代码仓库中，由开发组长从最近的若干提交中，手工挑选出需要上线的若干个提交，测试人员进行测试并发布。<br>这种做法：</p><ul><li>生产环境和开发主干代码不一致，违背了单一主干代码的策略，造成代码库版本碎片化</li><li>与持续集成理念背道而驰（不能早期集成、早期测试、提供快速反馈）</li></ul><hr><h3 id="为什么不用-Git-Branch？"><a class="header-anchor" href="#为什么不用-Git-Branch？">¶</a>为什么不用 Git Branch？</h3><p>Long-lived feature branch是一个常见的持续交付反模式。这是因为：如果项目拥有多个长期彼此独立演进的分支，往往需要等到最后发布时才合并代码，这与持续集成的最佳实践背道而驰。<br>可参见 ThoughtWorks技术雷达相关介绍：<a href="https://www.thoughtworks.com/radar/techniques/long-lived-branches-with-gitflow">https://www.thoughtworks.com/radar/techniques/long-lived-branches-with-gitflow</a></p><hr><h3 id="特性开关是解决问题的最后手段"><a class="header-anchor" href="#特性开关是解决问题的最后手段">¶</a>特性开关是解决问题的最后手段</h3><p>为了隐藏未完成的特性进入生产环境，我们应遵循以下步骤：</p><ul><li>首先考虑将大的业务特性分解，分批次小步引入新的特性。这样做的好处是减少上线风险，并收集用户对于新特性的真实使用反馈，便于持续改进该特性。</li><li>其次，可以考虑新特性UI的入口地址与已有UI分离，给新特性赋予一个全新的URL，但不暴露该地址给真实用户，即可隐藏未完成的特性。最后才考虑特性开关，作为解决问题的最后手段。</li></ul><hr><h3 id="使用特性开关的注意事项"><a class="header-anchor" href="#使用特性开关的注意事项">¶</a>使用特性开关的注意事项</h3><ul><li>使用特性开关包裹某一特性时，要特别注意不要遗漏某些特性代码在开关范围之外。</li><li>使用了特性开关后，测试人员的测试策略 - 通常说来只需测试下列两种情况：</li></ul><ol><li>启用所有下一次上线发布时需要的功能的情况</li><li>启用所有功能的情况</li></ol><ul><li>由特性开关控制的功能正式上线并稳定后，务必要去掉特性开关代码，包括配置文件中特性开关变量以及所有使用特性开关的代码。</li><li>特性开关数量不能太多，一旦超过限定数量，务必清理已有特性开关</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;为什么要使用特性开关&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#为什么要使用特性开关&quot;&gt;¶&lt;/a&gt;为什么要使用特性开关?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;上线周期短，屏蔽在单一上线周期内已开发但未完成的特性（例如每周两次上线，但“产品列表”功能需要三周才能开发完成）&lt;/li&gt;
&lt;li&gt;对比在不同 UI 下的用户行为和转化率（A/B Testing）&lt;/li&gt;
&lt;li&gt;部署与发布分离，持续频繁部署，业务随时可发布&lt;/li&gt;
&lt;li&gt;部署：代码部署到生产环境&lt;/li&gt;
&lt;li&gt;发布：特性上线，交付给最终用户使用,部署与发布分离，开发团队频繁持续进行部署，而业务人员（需求方）决定特性何时发布。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="devops" scheme="http://blog.nicexiangcun.com/categories/devops/"/>
    
    
    <category term="devops" scheme="http://blog.nicexiangcun.com/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>好心修改别人的代码却带来新的bug</title>
    <link href="http://blog.nicexiangcun.com/2019/02/24/bug-with-auther/"/>
    <id>http://blog.nicexiangcun.com/2019/02/24/bug-with-auther/</id>
    <published>2019-02-24T13:50:13.000Z</published>
    <updated>2020-11-20T13:06:15.510Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有时候非常严重的问题，就是你常常忽略的小不点。</p></blockquote><p>开发过程中，有时候会遇到要修改别人的代码，那么怎么确保不会带出新的问题出来呢🙏我们的鹏飞老大给出了几条建议💯。</p><ul><li>UnitTest，仔细想了想，单元测试真的是太有必要了。</li><li>代码走查，优秀的技术团队通常都会有，走查和分享的环节。</li><li>开发纪律上以下上原话</li></ul><p>代码块注释：标明作者、时间、描述<br>原则上不允许擅自修改他人代码：如需修改需通知作者配合修改，如无法通知作者则必须慎重修改且须有测试保障<br>防御式编程与契约式编程：默认不信任任何外部调用和方法，默认双方遵守契约，任意一方撕毁契约则抛出异常，建议在UI及应用层倾向于防御式编程保证友好及体验，在逻辑层倾向于契约式编程尽早暴露隐患</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;有时候非常严重的问题，就是你常常忽略的小不点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开发过程中，有时候会遇到要修改别人的代码，那么怎么确保不会带出新的问题出来呢🙏我们的鹏飞老大给出了几条建议💯。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UnitTest</summary>
      
    
    
    
    <category term="bug" scheme="http://blog.nicexiangcun.com/categories/bug/"/>
    
    
    <category term="bug" scheme="http://blog.nicexiangcun.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Never forget why you started, and your mission can be accomplished.</title>
    <link href="http://blog.nicexiangcun.com/2017/10/21/today-idea-20171021/"/>
    <id>http://blog.nicexiangcun.com/2017/10/21/today-idea-20171021/</id>
    <published>2017-10-21T11:17:12.000Z</published>
    <updated>2020-11-20T13:06:15.518Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>About swoole questions</title>
    <link href="http://blog.nicexiangcun.com/2017/09/21/swoole/"/>
    <id>http://blog.nicexiangcun.com/2017/09/21/swoole/</id>
    <published>2017-09-21T15:01:21.000Z</published>
    <updated>2020-11-20T13:06:15.518Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* fpm only can use Synchronous client</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fpm</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$parms</span> = <span class="string">&#x27;parms&#x27;</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;tcpClient(<span class="variable">$parms</span>);<span class="comment">// throw a error Swoole\Client is must cli</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serv</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Swoole has three mode pattern maybe refence: https://wiki.swoole.com/wiki/page/353.html</span></span><br><span class="line"><span class="comment">         * have a question at here but i don&#x27;t know , if not use SWOOLE_BASE there is a error about epoll</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$serv</span> = <span class="keyword">new</span> \Swoole\Http\Server(<span class="string">&quot;0,0,0,0&quot;</span>, <span class="number">9508</span>,SWOOLE_BASE, SWOOLE_SOCK_TCP);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$serv</span>-&gt;on(<span class="string">&#x27;Request&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$request</span>, <span class="variable">$response</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$arrParms</span> = [</span><br><span class="line">                <span class="string">&#x27;channel&#x27;</span>=&gt;  <span class="keyword">isset</span>(<span class="variable">$request</span>-&gt;get[<span class="string">&#x27;channel&#x27;</span>]) ? <span class="variable">$request</span>-&gt;get[<span class="string">&#x27;channel&#x27;</span>] : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;uid&#x27;</span>    =&gt;  <span class="keyword">isset</span>(<span class="variable">$request</span>-&gt;get[<span class="string">&#x27;uid&#x27;</span>]) ? <span class="variable">$request</span>-&gt;get[<span class="string">&#x27;uid&#x27;</span>] : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            ];</span><br><span class="line">            <span class="variable">$class</span> = <span class="string">&#x27;BindCard&#x27;</span>. constant(<span class="keyword">__CLASS__</span> . <span class="string">&quot;::PERM&quot;</span>);</span><br><span class="line">            <span class="variable">$obj</span> = <span class="string">&quot;App\\Http\\Controllers\\<span class="subst">&#123;$class&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">           call_user_func_array(<span class="keyword">array</span>(<span class="keyword">new</span> <span class="variable">$obj</span>(),<span class="string">&#x27;bandCard&#x27;</span>), [<span class="variable">$arrParms</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$response</span>-&gt;cookie(<span class="string">&quot;User&quot;</span>, <span class="string">&quot;Swoole&quot;</span>);</span><br><span class="line">            <span class="variable">$response</span>-&gt;cookie(<span class="string">&quot;english_name&quot;</span>, <span class="string">&quot;Henry&quot;</span>);</span><br><span class="line">            <span class="variable">$response</span>-&gt;cookie(<span class="string">&quot;channel&quot;</span>, <span class="variable">$arrParms</span>[<span class="string">&#x27;channel&#x27;</span>]);</span><br><span class="line">            <span class="variable">$response</span>-&gt;header(<span class="string">&quot;X-Server&quot;</span>, <span class="string">&quot;Swoole&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$json</span> = json_encode([</span><br><span class="line">                <span class="string">&#x27;uid&#x27;</span>=&gt;<span class="variable">$arrParms</span>[<span class="string">&#x27;uid&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;chanle&#x27;</span>=&gt;<span class="variable">$arrParms</span>[<span class="string">&#x27;channel&#x27;</span>],</span><br><span class="line">            ]);</span><br><span class="line">            <span class="variable">$response</span>-&gt;end(<span class="string">&quot;&lt;h1&gt;Hello Swoole!&lt;/h1&gt;&quot;</span>.<span class="variable">$json</span>);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$serv</span>-&gt;start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BindCardRepository</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bandCard</span>(<span class="params"><span class="variable">$parms</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$parms</span> +=[</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>=&gt;<span class="string">&#x27;&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;tcpClient(<span class="variable">$parms</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tcpClient</span>(<span class="params"><span class="variable">$parms</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$client</span> = <span class="keyword">new</span> \Swoole\Client(SWOOLE_SOCK_TCP, SWOOLE_SOCK_ASYNC);</span><br><span class="line">        <span class="comment">//设置事件回调函数</span></span><br><span class="line">        <span class="variable">$client</span>-&gt;on(<span class="string">&quot;connect&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$cli</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$parms</span></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//log</span></span><br><span class="line">            <span class="variable">$cli</span>-&gt;send(serialize(<span class="variable">$parms</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$client</span>-&gt;on(<span class="string">&quot;receive&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$cli</span>, <span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// when reveived data do somethings</span></span><br><span class="line">            print_r(unserialize(<span class="variable">$data</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$client</span>-&gt;on(<span class="string">&quot;error&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$cli</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Connect failed\n&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$client</span>-&gt;on(<span class="string">&quot;close&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$cli</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Connection close\n&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//发起网络连接</span></span><br><span class="line">        <span class="variable">$client</span>-&gt;connect(<span class="string">&#x27;192.168.10.10&#x27;</span>, <span class="number">9503</span>, <span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tcpServer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$serv</span> = <span class="keyword">new</span> \Swoole\Server(<span class="string">&quot;192.168.10.10&quot;</span>, <span class="number">9503</span>,SWOOLE_BASE, SWOOLE_SOCK_TCP);</span><br><span class="line">        <span class="variable">$serv</span>-&gt;set(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;daemonize&#x27;</span>   =&gt; <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&#x27;reactor_num&#x27;</span> =&gt; <span class="number">2</span>,</span><br><span class="line">            <span class="string">&#x27;worker_num&#x27;</span>  =&gt; <span class="number">4</span></span><br><span class="line">        ));</span><br><span class="line">        <span class="variable">$serv</span>-&gt;on(<span class="string">&#x27;connect&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$serv</span>, <span class="variable">$fd</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;This Tcp Server is Connected.\n&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$serv</span>-&gt;on(<span class="string">&#x27;receive&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$serv</span>, <span class="variable">$fd</span>, <span class="variable">$from_id</span>, <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// do log and do somethings.</span></span><br><span class="line">            <span class="variable">$hanleData</span> = unserialize(<span class="variable">$data</span>);</span><br><span class="line">            <span class="variable">$serv</span>-&gt;send(<span class="variable">$fd</span>, <span class="variable">$data</span>);</span><br><span class="line">            <span class="variable">$serv</span>-&gt;close(<span class="variable">$fd</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$serv</span>-&gt;on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$serv</span>, <span class="variable">$fd</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Tcp Client: Close.\n&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$serv</span>-&gt;start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
    <category term="swoole" scheme="http://blog.nicexiangcun.com/tags/swoole/"/>
    
  </entry>
  
  <entry>
    <title>Here are some thing about redis</title>
    <link href="http://blog.nicexiangcun.com/2017/09/21/build-redis/"/>
    <id>http://blog.nicexiangcun.com/2017/09/21/build-redis/</id>
    <published>2017-09-21T14:50:41.000Z</published>
    <updated>2020-11-20T13:06:15.510Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># check redis status</span></span><br><span class="line">ps -aux | grep redis</span><br><span class="line"><span class="comment"># list status</span></span><br><span class="line">redis <span class="number">950</span>  <span class="number">0.1</span>  <span class="number">0.3</span>  <span class="number">40436</span>  <span class="number">8124</span> ? Ssl  <span class="number">02</span>:<span class="number">11</span>   <span class="number">0</span>:<span class="number">24</span> /usr/bin/redis-server <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span></span><br><span class="line">vagrant   <span class="number">4688</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">14520</span>  <span class="number">1092</span> pts/<span class="number">0</span>    S+   <span class="number">06</span>:<span class="number">13</span>   <span class="number">0</span>:<span class="number">00</span> grep</span><br><span class="line">--color=auto redis</span><br><span class="line"><span class="comment"># into server</span></span><br><span class="line">redis-cli -h <span class="number">127.0</span>.<span class="number">0.1</span>  -p <span class="number">6379</span></span><br><span class="line"><span class="comment"># show all key</span></span><br><span class="line">keys *</span><br><span class="line"><span class="comment"># check key&#x27;s type</span></span><br><span class="line">type your key</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Jobs</span>\<span class="title">ThisIsTestJob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Bus</span>\<span class="title">DispatchesJobs</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThisIsTestBuHenryController</span> <span class="keyword">extends</span>  <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DispatchesJobs</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fire</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// reference http://www.cnblogs.com/z1298703836/p/5346728.html</span></span><br><span class="line">        <span class="comment">// If use delay i don&#x27;t know is there any problem in redis it is zset</span></span><br><span class="line">        <span class="comment">// php artisan queue:work redis : yourself can run this command</span></span><br><span class="line">        <span class="comment">// php artisan queue:work redis --queue=emails : yourself can run this command that only specify queue name</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;dispatch((<span class="keyword">new</span> ThisIsTestJob())-&gt;onQueue((<span class="string">&#x27;register&#x27;</span>)));</span><br><span class="line">        <span class="comment">//$this-&gt;dispatch((new ThisIsTestJob())-&gt;delay(60)-&gt;onQueue((&#x27;emails&#x27;)));</span></span><br><span class="line">        <span class="comment">//$this-&gt;dispatch((new ThisIsTestJob()));</span></span><br><span class="line">        dd(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Supervisor"><a class="header-anchor" href="#Supervisor">¶</a>Supervisor</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[program:artisan]</span><br><span class="line">command                 = /usr/bin/php /home/vagrant/Code/jbh-oauth/artisan queue:work  --sleep=<span class="number">3</span> --tries=<span class="number">3</span> --queue=register  --daemon</span><br><span class="line"><span class="built_in">directory</span>               = /home/vagrant/Code/jbh-oauth</span><br><span class="line">autostart               = <span class="literal">true</span></span><br><span class="line">autorestart             = <span class="literal">true</span></span><br><span class="line">stdout_logfile          = /home/logs/supervisor/supervisor_queue.log</span><br><span class="line">stdout_logfile_maxbytes = <span class="number">10</span>MB</span><br><span class="line">stderr_logfile          = /home/logs/supervisor/supervisor_queue.log</span><br><span class="line">stderr_logfile_maxbytes = <span class="number">10</span>MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># check </span></span><br><span class="line"></span><br><span class="line">sudo supervisorctl reload</span><br><span class="line"></span><br><span class="line">sudo supervisorctl restart artisan</span><br><span class="line"></span><br><span class="line">sudo supervisorctl stop artisan</span><br><span class="line"></span><br><span class="line">sudo supervisorctl start artisan</span><br><span class="line"></span><br><span class="line">sudo supervisorctl status all</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
    <category term="redis" scheme="http://blog.nicexiangcun.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>positive energy</title>
    <link href="http://blog.nicexiangcun.com/2017/08/22/powerful/"/>
    <id>http://blog.nicexiangcun.com/2017/08/22/powerful/</id>
    <published>2017-08-22T14:26:14.000Z</published>
    <updated>2020-11-20T13:06:15.516Z</updated>
    
    <content type="html"><![CDATA[<p>Your opponents are reading.<br>Your dushman are burnishing knief.<br>Your bestie are Reducing weight.<br>Next door Lao Wang is exercising waist.<br>we must keep learning ,if not we will be overtaken by rivals.</p><p><img src="http://ogsm326mu.bkt.clouddn.com/%E7%BB%86%E6%80%9D%E6%9E%81%E6%81%90.gif" alt="细思极恐"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Your opponents are reading.&lt;br&gt;
Your dushman are burnishing knief.&lt;br&gt;
Your bestie are Reducing weight.&lt;br&gt;
Next door Lao Wang is exercis</summary>
      
    
    
    
    
    <category term="powerful" scheme="http://blog.nicexiangcun.com/tags/powerful/"/>
    
  </entry>
  
  <entry>
    <title>About Python bit operation</title>
    <link href="http://blog.nicexiangcun.com/2017/07/26/python-%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://blog.nicexiangcun.com/2017/07/26/python-%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2017-07-26T15:17:38.000Z</published>
    <updated>2020-11-20T13:06:15.517Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Python bit operation,when use bit operation case</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">RECHARGE = <span class="number">2</span>&gt;&gt;<span class="number">1</span></span><br><span class="line">WITHRAW  = <span class="number">2</span>&lt;&lt;<span class="number">0</span></span><br><span class="line">INVENT   = <span class="number">2</span>&lt;&lt;<span class="number">1</span></span><br><span class="line">BANDCARD = <span class="number">2</span>&lt;&lt;<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">If somebody will going to check recharge and bandcard,like this.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">this_user = RECHARGE | BANDCARD </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">How can check user like this.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> this_user &amp; RECHARGE:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;recharge is ok&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> this_user &amp; WITHRAW:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;withraw is ok&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> this_user &amp; BANDCARD:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;bandcard is ok&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> this_user &amp; INVENT:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;invent is ok&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="python" scheme="http://blog.nicexiangcun.com/categories/python/"/>
    
    
    <category term="python" scheme="http://blog.nicexiangcun.com/tags/python/"/>
    
  </entry>
  
</feed>
