<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>awk</title>
    <url>/2020/03/11/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<p>nginx 是七成的是tcp3次握手之后的事情，</p>
<p>数据包： 握手的包，传输数据的包，p 标示代表客户端给服务器的数据包需要交给应用程序立即处理，立即打断缓冲区的数据立即处理，说白了，要终止当前，打断缓冲，立即执行。buffer 是不断堆积东西，到一定量就要执行。</p>
<p>四层网络成负责资源开辟。开辟资源后才有socket，才有文件描述符。</p>
<p>工具 nc（netcat） 可用模拟 服务端 和客户端。</p>
<p>nc -l 8081 之后等待链接</p>
<p>nc localhost 8081  创建客服端，连接服务端</p>
<ol>
<li>查看nc 服务端的进程ID=2485</li>
</ol>
<p>ps -ef | grep nc</p>
<ol start="2">
<li>查看nc 进程的文件描述符</li>
</ol>
<p>cd /proc/2485/fd</p>
<p>可以看到任何程序都会有 0，1，2 ，同时还看到了一个socket ，0 标准输入（读） 1 标准输出（写） 2 报错。</p>
<p>此时还没有客户端去链接它，但是依然会有socket,只不过此时处于监听状态。现在用一个客户端去链接它，在去看描述符列表，此时就会多出一个4号。</p>
<p>工具 strace 可以追踪程序与系统内核的调用和信号。</p>
<p>mkdir -p /home/vagrant/lihongwei/strace_file</p>
<p>会抓取这个nc进程的所有的系统内核的调用</p>
<p>strace -ff -o out nc -l 8080</p>
<p>然后查看日志： tail -f  out.2753</p>
<p>通过日志记录的系统函数名可以查看帮助 ，系统2类的，读文档</p>
<p>man 2 socket</p>
<p>man 2 bind</p>
<p>程序调用 socket 执行成功会返回一个文件描述符。如上面的 socket 3, 然后就 accept 3 了。</p>
<p>开启追踪+开启日志监听后 启动一个客户端链接服务端。</p>
<p>监听到新的描述符4，同时追踪到的对系统调用的 poll(),同时阻塞到了poll。</p>
<p>用客户端发送字符hello给服务端，在看日志情况。</p>
<p>通过追踪日志可以开到，系统调用 read 从 描述符4 中读取 hello ，然后通过系统调用write 写入标准输出描述符1。</p>
<p>用服务端发送字符lihongwei给客户端，在看日志情况。</p>
<p>通过追踪日志可以开到，系统调用 read 从 标准输入描述符0 中读取 lihongwei ，然后通过系统调用write 写入描述符4（客户端）。</p>
<p>现在 在梳理 原始版本的 socket 过程。</p>
<p>先不看 poll() ,理论上只要我们得到了文件描述符，我们就可以去读它。只不过没有内容就会阻塞在那，如果描述符4一直在那阻塞，当有新的客户端完成3次握手创建了新的文件描述符5，那么5会一直在accept(). 这个过程称之为 BIO.</p>
<p>在后来，服务端通过多线程方式，为每个文件描述符clone 一个线程去读取，使每一个线程阻塞自己的，弊端就是客户端多了，就需要多少个客户端的线程,clone 属于系统调用，浪费资源。</p>
<p>在后来，非阻塞IO时期的到来（NIO），内核提供accept（），可以设置成为非阻塞了，这样主程序写一个死循环(一个线程)，read() 没有数据继续 accept(),然后创建一个队列，每次循环读取队列里的fd，看看是否是可读可写。弊端：每次都要所有的fd队列调用，如果只用第1000个fd可读可写，前面的都是浪费的，重点是还是不断的调用内核是浪费的。</p>
<p>man 2 select</p>
<p>在后来，内核 新增 select系统调用， 可以同时监听多个具柄的状态变化，应用程序调用 select 告诉内核有多少 fd.有内核完成遍历 fd，然后通知应用程序。应用程序是一个 O（1）的selct 调用，但是内核还是一个O（n）的遍历。返回可读可写的fd 给应用程序。弊端：文件描述符是有限制的 select 默认支持 1024个。</p>
<p>在后来，epool 的系统调用，网卡的高低压电瓶 接收数据，给内存buffer，所有设备都是谁有数据达到，就往数据总线打事件，然后触发cup中断，cpu 处理然后回掉（驱动的事情），</p>
<p>利用中断产生事件原理，epool_ctl 会将链接的描述符放在内核的一个指定区域A，当有可读可写的时候，内核会通过中断机制，将可读可写的放在另一个区域B，而epool_wait 就是循环读取这个区域。</p>
<p>看strace 日志，有一个sendfile() 系统调用，可以查看帮助，man 2 sendfile, 实现的是一个0拷贝，是系统内核读出文件描述符，自己发送给客户端文件描述符，否则的话流程是这样的应用程序通过调用系统内核read,内核将文件内容读到内核一个缓冲区，然后应用程序在调用内核 write(), 内核在通过wirte 写给客户端文件描述符。</p>
<p>直接内存： 内核代码在系统启动的时候，就会被系统保护起来，称之为内核态，内核态为了防止用户态的应用程序黑客的破坏，只提供了一些可供调用的系统调用函数，而数据交互都是通过内核提供的缓冲区交互，不停的拷贝来拷贝去，效率就很低。为了提高效率，就申请了一块用户态和内核态共享的内存空间buffer，不用考呗来拷贝去。典型的一个案例是kafa,他的原理就是：客户端链接kafka 服务端broker，服务端broker，系统内核调用read，读到消息，这歩系统调用少不了，然后下一步需要写入磁盘，这一步不用在系统调用了，直接维护一个1g的共享内存，直接写内存，然后内核落入磁盘。kafaka sendfile() 和 直接内存2项技术 都用到了。</p>
<p>cd /usr/sbin</p>
<p>strace -ff -o out ./nginx</p>
<p>看worker 进程的最终日志：</p>
<p>以上的一些解决方案，都是在服务端的应用程序在探索方案。</p>
<p>最终把 nc 换成我们日常其他的应用程序。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>基于docker搭建kong分布式集群</title>
    <url>/2020/01/07/kong/</url>
    <content><![CDATA[<h4 id="创建自定义网络"><a class="header-anchor" href="#创建自定义网络">¶</a>创建自定义网络</h4>
<p><code>docker network create kong-net</code></p>
<h4 id="安装kong依赖的数据库"><a class="header-anchor" href="#安装kong依赖的数据库">¶</a>安装kong依赖的数据库</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">docker run -d --name kong-database \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -p <span class="number">5432</span>:<span class="number">5432</span> \</span><br><span class="line">     -e <span class="string">&quot;POSTGRES_USER=kong&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;POSTGRES_DB=kong&quot;</span> \</span><br><span class="line">     postgres:<span class="number">9.6</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> \</span><br><span class="line">     kong:latest kong migrations bootstrap</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="安装2台kong节点"><a class="header-anchor" href="#安装2台kong节点">¶</a>安装2台kong节点</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">docker run -d --name kong-node1 \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl&quot;</span> \</span><br><span class="line">     -p <span class="number">8000</span>:<span class="number">8000</span> \</span><br><span class="line">     -p <span class="number">8443</span>:<span class="number">8443</span> \</span><br><span class="line">     -p <span class="number">8001</span>:<span class="number">8001</span> \</span><br><span class="line">     -p <span class="number">8444</span>:<span class="number">8444</span> \</span><br><span class="line">     kong:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -d --name kong-node2 \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl&quot;</span> \</span><br><span class="line">     -p <span class="number">8446</span>:<span class="number">8000</span> \</span><br><span class="line">     -p <span class="number">8447</span>:<span class="number">8443</span> \</span><br><span class="line">     -p <span class="number">8448</span>:<span class="number">8001</span> \</span><br><span class="line">     -p <span class="number">8449</span>:<span class="number">8444</span> \</span><br><span class="line">     kong:latest</span><br></pre></td></tr></table></figure>
<h4 id="安装两台nginx代理"><a class="header-anchor" href="#安装两台nginx代理">¶</a>安装两台nginx代理</h4>
<p>kong 默认的管理端是口8001，对外的端口是8000和8443，这里使用一台nginx代理转发到管理端口,一台转发到对外的访问端口.</p>
<p><code>docker run --name nginx-node1 -p 8085:80 -d nginx</code></p>
<p><code>docker run --name nginx-node2 -p 8086:80 -d nginx</code></p>
<p>修改nginx-node1的location</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header Bitz_Client_IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">    proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    proxy_ignore_client_abort on;</span><br><span class="line">    proxy_pass  http:<span class="comment">//henry;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>henry.conf</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">upstream henry &#123;</span><br><span class="line">    server <span class="number">10.0</span><span class="number">.208</span><span class="number">.62</span>:<span class="number">8001</span>; <span class="comment">//admin port </span></span><br><span class="line">    server <span class="number">10.0</span><span class="number">.208</span><span class="number">.62</span>:<span class="number">8448</span>; <span class="comment">//admin port</span></span><br><span class="line">    <span class="meta">#check interval=3000 rise=2 fall=5 timeout=1000 type=http;</span></span><br><span class="line">    #check_http_send <span class="string">&quot;HEAD /op/status HTTP/1.0\r\n\r\n&quot;</span>;</span><br><span class="line">    #check_http_expect_alive http_2xx http_3xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改nginx-node2的location</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header Bitz_Client_IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">    proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    proxy_ignore_client_abort on;</span><br><span class="line">    proxy_pass  http:<span class="comment">//proxy_for_api;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>proxy_for_api.conf</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">upstream proxy_for_api &#123;</span><br><span class="line">     server <span class="number">10.0</span><span class="number">.208</span><span class="number">.62</span>:<span class="number">8000</span>;</span><br><span class="line">     server <span class="number">10.0</span><span class="number">.208</span><span class="number">.62</span>:<span class="number">8446</span>;</span><br><span class="line">     <span class="meta">#check interval=3000 rise=2 fall=5 timeout=1000 type=http;</span></span><br><span class="line">     #check_http_send <span class="string">&quot;HEAD /op/status HTTP/1.0\r\n\r\n&quot;</span>;</span><br><span class="line">     #check_http_expect_alive http_2xx http_3xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="缓存"><a class="header-anchor" href="#缓存">¶</a>缓存</h4>
<h4 id="扩展-admin-api"><a class="header-anchor" href="#扩展-admin-api">¶</a>扩展 admin api</h4>
<h4 id="查看容器状态"><a class="header-anchor" href="#查看容器状态">¶</a>查看容器状态</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">docker container <span class="built_in">list</span> -a</span><br><span class="line"></span><br><span class="line">docker logs d402e041de4f</span><br><span class="line"></span><br><span class="line">docker restart d402e041de4f</span><br><span class="line"></span><br><span class="line">docker cp  ./http_headers.lua d402e041de4f:/usr/local/openresty/lualib/resty/</span><br><span class="line"></span><br><span class="line">docker cp d402e041de4f:/usr/local/share/lua/<span class="number">5.1</span>/kong/constants.lua ./</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OpenResty</category>
      </categories>
  </entry>
  <entry>
    <title>OpenResty的多级缓存库</title>
    <url>/2020/01/07/openresty%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h4 id="lua-resty-mlcache"><a class="header-anchor" href="#lua-resty-mlcache">¶</a>lua-resty-mlcache</h4>
<p>这个库可以作为 key/value存储来处理，但是可以缓存Lua类型和表，但是构建在lua_shared_dict，lua-resty-lrucache上 ，这种组合可以实现高性能和灵活的缓存。</p>
<p>功能：</p>
<ul>
<li>使用TTL缓存和负缓存，</li>
<li>通过lua-resty-lock构建互斥体，以防止在缓存失败时将狗堆影响到数据库/后端，</li>
<li>内置worker通信，传播缓存失效，并允许worker更新他们的L1 (lua-resty-lrucache )缓存的更改(set()，delete() )，</li>
<li>可以创建多个独立实例来保存各种类型的数据，同时依赖同一lua_shared_dict L2缓存，</li>
</ul>
<p>此库中内置的各种缓存级别的说明：</p>
<p><img src="http://cdn.nicexiangcun.com/lua-resty-lrucache.jpg" alt="lrucache"></p>
<p>缓存级别层次结构为：</p>
<ul>
<li>
<p>L1 ：使用Least-Recently-Used land缓存lua-resty-lrucache ，在填充时提供最快的查找，并避免耗尽worker的Lua虚拟机内存，</p>
</li>
<li>
<p>L2 ：所有员工共享的lua_shared_dict内存区域，只有L1未命中时才能访问此级别，并防止工作人员请求L3缓存，</p>
</li>
<li>
<p>L3 ：自定义函数，只由单个worker运行，以避免数据库/后端(通过lua-resty-lock )上的狗堆效应，通过L3获取的值将被设置为L2缓存，供其他员工访问，</p>
</li>
</ul>
]]></content>
      <categories>
        <category>OpenResty</category>
      </categories>
  </entry>
  <entry>
    <title>哈希表</title>
    <url>/2020/01/03/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
	hashtable是由数组和列表两种数据结构组合而成的，这里面有两个重要的知识点需要掌握，一个是如何对哈希表进行动态扩容，第二个如何巧妙的设计一个散列性和性能都非常好的散列函数。
</blockquote>
<span id="more"></span>
<p><img src="http://cdn.nicexiangcun.com/hashtable.png" alt="hashtable"></p>
<h3 id="数组的动态扩容策略"><a class="header-anchor" href="#数组的动态扩容策略">¶</a>数组的动态扩容策略</h3>
<p>已java的 <code>hashmap</code>为例，它的初始长度是16，默认阀值为0.75，当存储长度达到了长度的3/4时，就会触发扩容动作，扩容的长度为2的整数次幂，这是因为2的整数次幂的数据减1转为二进制，低位都是1，在与hashcode随机出来的数转为二进制做与运算，其结果范围一定是0-hashcode之间的范围，不会越界。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">bucketIndex = indexFor(hash, table.length);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="散列函数"><a class="header-anchor" href="#散列函数">¶</a>散列函数</h3>
<p>好的散列函数不但要保证计算速度快，还要保证散列性好，避免过多的碰撞，扰动函数的逻辑是将二进制数据右位移16位，正好是32bit的一半，然后自己的高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。</p>
<p><img src="http://cdn.nicexiangcun.com/hashcode.jpg" alt="hashtable"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>redis 主从配置</title>
    <url>/2020/01/01/redis-replication/</url>
    <content><![CDATA[<ul>
<li>docker pull  redis</li>
</ul>
<p>启动master并打开redis持久化配置</p>
<ul>
<li>docker run -p 6379:6379 -v $PWD/redis:/data  -d redis redis-server --appendonly yes</li>
</ul>
<p>查看容器信息</p>
<ul>
<li>docker inspect d7c20d48d35c | grep IPAddress</li>
</ul>
<p>内网IP： 172.17.0.2</p>
<p>启动slave1</p>
<ul>
<li>docker run --name redis-6380 -p 6380:6379 -v $PWD/redis:/data -d redis redis-server</li>
</ul>
<p>内网IP： 172.17.0.3</p>
<p>启动slave2</p>
<ul>
<li>docker run --name redis-6381 -p 6381:6379 -v $PWD/redis:/data -d redis redis-server</li>
</ul>
<p>内网IP： 172.17.0.4</p>
<p>进入2个从节点，修改配置。</p>
<ul>
<li>docker exec -it c19b7c8c6ed1 /bin/bash</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">info replication			<span class="comment">#查看角色</span></span><br><span class="line"></span><br><span class="line">SLAVEOF <span class="number">172.17</span>.<span class="number">0.2</span> <span class="number">6379</span>		<span class="comment">#设置master</span></span><br></pre></td></tr></table></figure>
<h4 id="配置Sentinel"><a class="header-anchor" href="#配置Sentinel">¶</a>配置Sentinel</h4>
<p>分别进入3个容器配置 创建 sentinel.conf</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster <span class="number">172.17</span>.<span class="number">0.2</span> <span class="number">6379</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>每个节点启动 <code>redis-sentinel ./sentinel.conf</code></p>
<p>首先查看哨兵监控情况,然后尝试关闭主容器,再查看剩余2个从机，这里会自动选举产生新的主机，然后，我们再次将刚才停止的主机启动起来，发现启动后其自动成为从机。</p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenResty 搭建 Api Gateway</title>
    <url>/2019/12/30/gateway/</url>
    <content><![CDATA[<h3 id="What"><a class="header-anchor" href="#What">¶</a>What</h3>
<ul>
<li>
<p>基于Nginx和lua的高性能Web平台，内部集成了大量精良的lua库，第三方模块以及大多数依赖项，方便搭建处理高并发、扩展性极高的动态web应用、web服务，动态网关。</p>
</li>
<li>
<p>扩展了Nginx的能力，将Nginx有效的变成了一个强大的web应用平台，web开发人员可以使用lua脚本调动nginx支持的各种c以及lua模块。快速构建出足以胜任c10k乃至c100k以上的单机并发连接的功性能web应用系统。</p>
</li>
<li>
<p>充分利用了Nginx的非阻塞的I/O模型，不仅对HTTP请求，甚至对于远程后端诸如<code>Mysql</code>、<code>PostgreSQL</code>,<code>Redis</code>等都进行了一致高性能相应。</p>
</li>
</ul>
<h3 id="使用场景"><a class="header-anchor" href="#使用场景">¶</a>使用场景</h3>
<ol>
<li>网关&amp;web防火墙：如数据前置校验，缓存前置，数据过滤，API请求聚合，ABtest,降级，监控等，可以进行 IP/URL/UserAgent/Referer 黑名单，限流等。</li>
</ol>
<p>站内应用案例：</p>
<p><img src="http://cdn.nicexiangcun.com/Canvas%201.png" alt="iterm2"></p>
<span id="more"></span>
<p>图中golang注册中心服务负责将后台提交的规则信息以插件化的形式进行打包处理后提交至gateway管理中心，gateway加载插件处理流量。</p>
<ol start="2">
<li>web应用：会进行一些业务逻辑处理，一般流程 mysql/redis/http获取数据返回前端，如京东商品详情页。</li>
</ol>
<p>利用<code>OpenResty</code>对于后端的远程存储可以进行高性能相应，可以代替类似于<code>php-fpm</code>对后端远程存储访问瓶颈的限制，转为由<code>OpenResty</code>请求，获取结果后通知给应用后端服务。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">docker pull redis:latest</span><br><span class="line">docker run -p <span class="number">6379</span>:<span class="number">6379</span> --name redis -v $PWD/redis.conf:/root/redis/redis.conf -v $PWD/data:/root/redis/data -d redis redis-server</span><br></pre></td></tr></table></figure>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"> location /lua &#123;</span><br><span class="line">        content_by_lua_block &#123;</span><br><span class="line">            <span class="keyword">local</span> redis = <span class="built_in">require</span> <span class="string">&quot;resty.redis&quot;</span></span><br><span class="line">            <span class="keyword">local</span> red = redis:new()</span><br><span class="line">            red:set_timeout(<span class="number">1000</span>) </span><br><span class="line">            <span class="keyword">local</span> ok, err = red:connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">                ngx.say(<span class="string">&quot;failed to connect: &quot;</span>, err)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            ok, err = red:set(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">                ngx.say(<span class="string">&quot;failed to set dog: &quot;</span>, err)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            ngx.say(red:get(<span class="string">&quot;color&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>缓存：可以对相应内容进行缓存，减少后端请求，以及规则下发。</li>
</ol>
<p><code>OpenResty</code> 提供了lru和shared纯内存缓存服务。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">lua_shared_dict books <span class="number">1</span>m;</span><br><span class="line">location /book &#123;</span><br><span class="line">    content_by_lua_block &#123;</span><br><span class="line">        <span class="keyword">local</span> cache = ngx.shared.books </span><br><span class="line">        <span class="keyword">local</span> <span class="built_in">len</span>, err = cache:lpush(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>) </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span> <span class="keyword">then</span></span><br><span class="line">             ngx.say(<span class="string">&quot;push success&quot;</span>) </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">             ngx.say(<span class="string">&quot;push err: &quot;</span>, err) </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        cache:set(<span class="string">&quot;lua&quot;</span>, <span class="string">&quot;lua&quot;</span>)</span><br><span class="line">        ngx.<span class="built_in">print</span>(cache:get(<span class="string">&quot;lua&quot;</span>))</span><br><span class="line">        cache:set(<span class="string">&quot;kind&quot;</span>, <span class="built_in">require</span>(<span class="string">&quot;cjson&quot;</span>).encode(&#123;php=<span class="number">7</span>&#125;)) </span><br><span class="line">        ngx.<span class="built_in">print</span>(<span class="built_in">require</span>(<span class="string">&quot;cjson&quot;</span>).decode(cache:get(<span class="string">&quot;kind&quot;</span>)).php)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">location /lru &#123;</span><br><span class="line">      content_by_lua_block &#123;</span><br><span class="line">        <span class="keyword">local</span> lrucache = <span class="built_in">require</span> <span class="string">&quot;resty.lrucache&quot;</span></span><br><span class="line">        <span class="keyword">local</span> cache, err = lrucache.new(<span class="number">200</span>)</span><br><span class="line">        cache:set(<span class="string">&quot;dog&quot;</span>, <span class="number">32</span>, <span class="number">0.03</span>)</span><br><span class="line">        ngx.sleep(<span class="number">0.02</span>)</span><br><span class="line">        <span class="keyword">local</span> data, stale_data = cache:get(<span class="string">&quot;dog&quot;</span>)</span><br><span class="line">        ngx.<span class="built_in">print</span>(stale_data)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">OpenResty -s quit -p `pwd`/ -c conf/nginx.conf</span><br><span class="line"></span><br><span class="line">OpenResty -p `pwd`/ -c conf/nginx.conf</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OpenResty</category>
      </categories>
  </entry>
  <entry>
    <title>数组和链表</title>
    <url>/2019/12/26/%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>数组的特点是在内存中地址是连续的，所以在随机访问一个数组中的地址的时间复杂度是O(1),寻址公式大概是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">a[i]_address = begin_address + i * data_type_size</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>&#125;,&#123;<span class="number">3</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">address = begin_address + ( i * n + j) * data_type_size</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>数组由于对内存的要求比较苛刻，带来的一个问题就是低效的“插入”和“删除”，在做数据的插入和删除的时候要频繁的进行数据的迁移。对于数组的动态扩容策略的实现可以参考redis的字符串底层实现原理或者java中的arrayList&lt;&gt;.</p>
<span id="more"></span>
<p>使用场景注意： 操作的数据不宜过大。</p>
<p>链表的分类：</p>
<p>单链表：   后继指针指next向下一个节点的heac（节点包含头部，数据data和指针next）<br>
双向链表： 后继指针next指向下一个节点的prev (节点包括前驱指针prev,数据data,后继指针next)<br>
循环链表： 尾结点指针指向头节点</p>
<p>链表就是用指针将节点连接起来，它对内存的要求没有数组那么苛刻，所以链表在“插入”和“删除”的动作上的时间复杂度是O(1),但是由于链表内存不是连续的，所以不能随机访问某个元素，在查找的时候时间复杂度是O(n)。</p>
<p>单链表的使用经典案例如：LRU缓存淘汰策略</p>
<p>双向链表：java中的<code>LinkedHashMap</code>实现，双向链表比单链表会占用更多的内存，但是在查找元素的速度上会比单链表性能更高，因为双向链表的每个节点上既有前驱指针，又有后继指针，当我们知道具体某一个node的时候那么它的前驱和后继指针我们就知道了，所以它在查找过程中可以判断是忘前走还是往后走，体现了用空间换时间的设计思想。</p>
<p>链表的另一种使用场景经常会配合散列表使用，配合<code>hashtable</code>使用的目的主要是为了解决链表在查询过程中时间复杂度O(N)的问题。做法是将单链表或者双链表中的节点通过hash函数散列到数组的槽(桶)上，用一个新的指针通过拉链的方式将冲突的节点连接上。这样在查找某一个node的时候，时间复杂度是接近O(1)的。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>linux中内存字节对齐</title>
    <url>/2019/12/25/%E5%86%85%E5%AD%98%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/</url>
    <content><![CDATA[<p>🍒 linux下默认字节对齐是以int类型变量所占字节数对齐，也就是说会申请被4整除的内存地址写入int类型，所以这就是我们每次看int类型的地址不会看到有奇数的。</p>
<h4 id="什么叫对齐"><a class="header-anchor" href="#什么叫对齐">¶</a>什么叫对齐</h4>
<p>计算机中内存空间都是按照byte划分的，从理论上讲似乎对任何类型的变量的访问可以从任何地址开始，但实际情况是在访问特定类型变量的时候经常在特 定的内存地址访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是顺序的一个接一个的排放，这就是对齐。</p>
<h4 id="为什么要进行对齐"><a class="header-anchor" href="#为什么要进行对齐">¶</a>为什么要进行对齐</h4>
<p>各个硬件平台对存储空间的处理上有很大的不同。一些平台对某些特定类型的数据只能从某些特定地址开始存取。比如有些架构的CPU在访问一个没有进行对齐的变量的时候会发生错误,那么在这种架构下编程必须保证字节对齐.其他平台可能没有这种情况，但是最常见的是如果不按照适合其平台要求对 数据存放进行对齐，会在存取效率上带来损失。比如有些平台每次读都是从偶地址开始，如果一个int型（假设为32位系统）如果存放在偶地址开始的地方，那么一个读周期就可以读出这32bit，而如果存放在奇地址开始的地方，就需要2个读周期，并对两次读出的结果的高低字节进行拼凑才能得到该32bit数据（linux中：在内存中是低位在先，高位在后）。显然在读取效率上下降很多。</p>
<p>例1程序分配的内存地址如下图：</p>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a = <span class="number">9.99</span>;</span><br><span class="line">    <span class="keyword">char</span>   b = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">int</span>    c =  <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p,sizeof(a):%lu\n&quot;</span>,&amp;a,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p,sizeof(b):%lu\n&quot;</span>,&amp;b,<span class="keyword">sizeof</span>(b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p,sizeof(c):%lu\n&quot;</span>,&amp;c,<span class="keyword">sizeof</span>(c));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="http://cdn.nicexiangcun.com/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.png" alt="计算机内存字节对齐"></p>
<p>例2程序分配的内存地址如下图：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">char</span>   a = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">   <span class="keyword">double</span> b = <span class="number">9.99</span>;</span><br><span class="line">   <span class="keyword">char</span>   c = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">   <span class="keyword">int</span>    d =  <span class="number">1</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%p,sizeof(a):%lu\n&quot;</span>,&amp;a,<span class="keyword">sizeof</span>(a));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%p,sizeof(b):%lu\n&quot;</span>,&amp;b,<span class="keyword">sizeof</span>(b));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%p,sizeof(c):%lu\n&quot;</span>,&amp;c,<span class="keyword">sizeof</span>(c));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%p,sizeof(d):%lu\n&quot;</span>,&amp;d,<span class="keyword">sizeof</span>(d));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://cdn.nicexiangcun.com/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%902.png" alt="计算机内存字节对齐"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>代码整洁之道之技巧总结</title>
    <url>/2019/11/30/code-summarize/</url>
    <content><![CDATA[<p><img src="http://cdn.nicexiangcun.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%A5%AE%E7%94%A8%E5%9B%BE%E7%89%87" alt="Coding Summarize"></p>
<h1>优雅的代码应该是什么样的</h1>
<ul>
<li>能够满足当前的需求（功能，稳定性，负载能力等）。</li>
<li>对未来的需求，能够快速的扩展，修改。</li>
<li>出现问题能够快速的定位问题方便修改问题。</li>
<li>尽量避免重复，最大程度复用。</li>
</ul>
<p>针对这些问题，整理出一些自己对于设计模式的理解，其实设计模式就是别人走过的路，踩过的坑，总结出来的优秀经验。总结的代码整洁之道就是如何复用这些经验。</p>
<p>下面是代码整洁之道第一篇：技巧总结 🙏</p>
<span id="more"></span>
<p>1.命名非常重要，就为了可读性更好。</p>
<p>2.适当的使用注释，开发新功能，修改别人的bug,关键业务逻辑，要合理的使用注释</p>
<p>3.变量需要初始化</p>
<p>4.1==$a 和常量比较常量在前,防御编程，避免误写出$a=1</p>
<p>5.防御式编程和契约编程</p>
<p>默认不信任任何外部调用和方法，默认双方遵守契约，任意一方撕毁契约则抛出异常，建议在UI及应用层倾向于防御式编程保证友好及体验，在逻辑层倾向于契约式编程尽早暴露隐患</p>
<p>6.可控的环境参数 🐛</p>
<p>代码不受环境的影响，各种魔术常亮，声明字符集，定义包含的绝对路径，错误级别7，自己开发的测试，准生产，生产环境切好等 🕷️</p>
<p>7.PHP结束标记</p>
<p>纯php语句不要结束标记</p>
<!-- more -->
<p>8.if的使用技巧之“给定初始值”</p>
<p>9.if的使用技巧之“用&quot;&amp;&amp;&quot; 替换 if”</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rand</span>&gt;<span class="number">3</span>)&#123;</span><br><span class="line">     <span class="variable">$long</span>=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$rand</span>&gt;<span class="number">3</span> &amp;&amp; <span class="variable">$long</span>=<span class="number">5</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>10.if的使用技巧之“用三元运算符替换if”</p>
<p>11.if的使用技巧之“去掉多此一举的if”</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>==<span class="variable">$a</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="number">1</span>==<span class="variable">$a</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>12.表驱动法 map</p>
<p>在php中数组使用的是hashtable，时间复杂度是O(1),运行速度远远高于以上两种，另外书写起来也更简便的多。如果传入的参数是开始未定义的也不会运行查找浪费大量的系统资源。</p>
<p>13.使用更精悍短小的代码</p>
<p>函数的最佳最大长度是150行代码，这样的代码比较便于维护，也方便修改，对于某些过于集中的算法函数，可能长度会大于这个长度。不过尽量还是不要超过，短小的才是美好的，短小的便于理解也便于修改，而功能相对单一的代码也就意味着可以复用它的地方会更多，有更好的复用性，另外当程序出问题的时候，测试起来也会相对简单好定位，便于维护修改。</p>
<p>14.避免使用幻数 ,幻数，简单来说既是我们所说的硬编码.</p>
<p>15.中间结果赋值给变量</p>
<p>当一个表达式中嵌套层数过多，逻辑过于复杂的时候，将其拆分成一块块的，将其每一块的结果赋值给中间变量，这样可以降低程序的阅读难度和提高可维护性。</p>
<p>16.复杂的逻辑表达式做成布尔函数</p>
<p>当某一个判断比较复杂的时候，可以考虑将其做成一个布尔函数，不要怕这个函数里面的代码少，很多时候这样写可以使你的逻辑更容易维护，另外碰到相同逻辑判定的地点还可以直接复用，不需要一处修改处处修改。</p>
<p>17.永远不要复制粘贴雷同的代码</p>
<p>大段相同的代码实现类似的但是略有不同的程序功能的时候，我们很容易就回进行复制完后修改，其实这种做法会有很大的问题.</p>
<p>18.备份源代码文件</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>代码整洁之道之对象间的发布订阅</title>
    <url>/2019/11/30/code-summarize-three/</url>
    <content><![CDATA[<p>实现laravel中 <code>Observer</code>模式三种方式：</p>
<ul>
<li>框架本地的Events事件机制</li>
<li>PHP定义了两个接口：SplObserver和SplSubject</li>
<li>自定义<code>Observer</code> 和 <code>Subject</code></li>
</ul>
<p>不管采用哪种方式其目的是：对象更改其状态时，将通知附加的“观察者”。它用于缩短耦合对象的数量，并使用松耦合。</p>
<p>举个缓存依赖例子：🐶</p>
<span id="more"></span>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果数据源发生变化根据cacheType清空不同数据缓存</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheRepository</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$catenation</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$db</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;catenation = <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cacheClear</span>(<span class="params"><span class="variable">$cacheType</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mem 观察员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemcacheObserver</span> <span class="keyword">implements</span> \<span class="title">SplObserver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">Cache <span class="variable">$cache</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="variable">$cache</span>-&gt;clean(<span class="string">&#x27;mem&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArticles</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getArticles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<!-- more -->
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mon 观察员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongodbObserver</span> <span class="keyword">implements</span> \<span class="title">SplObserver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">Cache <span class="variable">$cache</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="variable">$cache</span>-&gt;clean(<span class="string">&#x27;mon&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//缓存对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheSubject</span> <span class="keyword">implements</span> \<span class="title">SplSubject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> \SplObjectStorage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$observers</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;observers = <span class="keyword">new</span> \<span class="built_in">SplObjectStorage</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span>(<span class="params">\<span class="built_in">SplObserver</span> <span class="variable">$observer</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;observers-&gt;attach(<span class="variable">$observer</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detach</span>(<span class="params">\<span class="built_in">SplObserver</span> <span class="variable">$observer</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;observers-&gt;detach(<span class="variable">$observer</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params">Cache <span class="variable">$cache</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> \SplObserver $observer */</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;observers <span class="keyword">as</span> <span class="variable">$observer</span>) &#123;</span><br><span class="line">            <span class="variable">$observer</span>-&gt;update(<span class="variable">$cache</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新数据源</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$memcache</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$mongodb</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cacheSub</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">CacheSubject <span class="variable">$cacheSub</span> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cacheSub = <span class="variable">$cacheSub</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">postUpdate</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//添加订阅对象，此处是主动添加观察者，理想状态应该是观察者主动来订阅，做成事件配置，notify去读取配置</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;cacheSub-&gt;attach(MemcacheObserver <span class="keyword">$this</span>-&gt;memcache);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cacheSub-&gt;attach(MongodbObserver  <span class="keyword">$this</span>-&gt;mongodb);</span><br><span class="line">        <span class="comment">//更新数据源</span></span><br><span class="line">        <span class="built_in">self</span>::update([<span class="string">&#x27;id&#x27;</span>=&gt;<span class="variable">$id</span>]);</span><br><span class="line">        <span class="comment">//通知订阅者</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;cacheSub-&gt;notify(Cache <span class="variable">$cache</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>How do you understand yield in php</title>
    <url>/2019/11/30/yield/</url>
    <content><![CDATA[<p>yield 迭代器 协程  💤</p>
<p>我们知道cpu是按照时间片段执行的程序的，php中当线程遇到yield的时候，可以让出cpu去执行另外一段程序，是表示协程最初始的一种形态。真正意义上的协程要复杂的多，比如通常会在影响性能的网络io环节实现协程处理，是应用程序在处理网络io的时候让出cpu去处理其他事情。</p>
<h3 id="从系统内存等资源开销角度考虑其使用场景"><a class="header-anchor" href="#从系统内存等资源开销角度考虑其使用场景">¶</a>从系统内存等资源开销角度考虑其使用场景</h3>
<p>大文件读取，一次性取出大的数据集 🌱</p>
<p><code>yield</code> 的优势在于每次迭代只是到当前的<code>yield</code>就返回了，下次迭代在从它记录的位置在往下执行。不会消耗过多的系统资源。因为协程是程序之间上下文的切换，要比线程之间切换带来系统开销小。</p>
<span id="more"></span>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">nowExcute</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;fib() <span class="keyword">as</span> <span class="variable">$mobile</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$mobile</span>.PHP_EOL ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$handle</span> = fopen(<span class="string">&#x27;http://uc.dev/Jbh-JKFKLSJFKL4394.txt&#x27;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (!feof (<span class="variable">$handle</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$buffer</span>  = fgets(<span class="variable">$handle</span>);</span><br><span class="line">        <span class="keyword">yield</span> trim(<span class="variable">$buffer</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose (<span class="variable">$handle</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="从算法设计角度考虑其使用场景"><a class="header-anchor" href="#从算法设计角度考虑其使用场景">¶</a>从算法设计角度考虑其使用场景</h3>
<p>斐波那契数列的实现 ☄️</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;fib(<span class="number">10</span>) <span class="keyword">as</span> <span class="variable">$n</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>  <span class="variable">$n</span>.PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params"><span class="variable">$num</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$n</span> = <span class="number">0</span> ; <span class="variable">$a</span> = <span class="number">0</span> ; <span class="variable">$b</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$n</span> &lt; <span class="variable">$num</span>)&#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="variable">$b</span> ;</span><br><span class="line">        <span class="variable">$t</span> = <span class="variable">$a</span> ;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$b</span>;</span><br><span class="line">        <span class="variable">$b</span> = <span class="variable">$b</span>+<span class="variable">$t</span>;</span><br><span class="line">        <span class="variable">$n</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fin</span>(<span class="params">num</span>):</span></span><br><span class="line">	n,a,b = <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> n&lt;num:</span><br><span class="line">		<span class="keyword">yield</span> b      </span><br><span class="line">		a,b = b,a+b</span><br></pre></td></tr></table></figure>
<h3 id="从程序功能设计角度考虑的使用场景"><a class="header-anchor" href="#从程序功能设计角度考虑的使用场景">¶</a>从程序功能设计角度考虑的使用场景</h3>
<p>管道模式的实现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(begin) ----------------&gt; <span class="function"><span class="keyword">function</span>(<span class="params"></span>) -----------------&gt; (<span class="params">end</span>)</span></span><br><span class="line"><span class="function">            ^   ^   ^                   ^   ^   ^</span></span><br><span class="line"><span class="function">            |   |   |                   |   |   |</span></span><br><span class="line"><span class="function">            |   |   +------- <span class="title">M1</span>(<span class="params"></span>) ------+   |   |</span></span><br><span class="line"><span class="function">            |   +----------- ...  ----------+   |</span></span><br><span class="line"><span class="function">            +--------------- <span class="title">Mn</span>(<span class="params"></span>) --------------+</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">middleware</span>(<span class="params"><span class="variable">$handlers</span>,<span class="variable">$arguments</span> = []</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//函数栈</span></span><br><span class="line">            <span class="variable">$stack</span> = [];</span><br><span class="line">            <span class="variable">$result</span> = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$handlers</span> <span class="keyword">as</span> <span class="variable">$handler</span>) &#123;</span><br><span class="line">                <span class="comment">// 每次循环之前重置，只能保存最后一个处理程序的返回值</span></span><br><span class="line">                <span class="variable">$result</span> = <span class="literal">null</span>;</span><br><span class="line">                <span class="variable">$generator</span> = call_user_func_array(<span class="variable">$handler</span>, <span class="variable">$arguments</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$generator</span> <span class="keyword">instanceof</span> \<span class="built_in">Generator</span>) &#123;</span><br><span class="line">                    <span class="comment">//将协程函数入栈,为重入做准备</span></span><br><span class="line">                    <span class="variable">$stack</span>[] = <span class="variable">$generator</span>;</span><br><span class="line">                    <span class="comment">//获取协程返回参数,到第一个yield地方返回，yield以下的程序在栈里取出在执行</span></span><br><span class="line">                    <span class="variable">$yieldValue</span> = <span class="variable">$generator</span>-&gt;current();</span><br><span class="line">                    <span class="comment">//检查是否重入函数栈</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$yieldValue</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="variable">$generator</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//不属于迭代器的function,获取function的返回值</span></span><br><span class="line">                    <span class="variable">$result</span> = <span class="variable">$generator</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$return</span> = (<span class="variable">$result</span> !== <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//将协程函数出栈</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$generator</span> = array_pop(<span class="variable">$stack</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$return</span>) &#123;</span><br><span class="line">                    <span class="variable">$generator</span>-&gt;send(<span class="variable">$result</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$generator</span>-&gt;next();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$logMiddleware</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;日志中间件：进参记录日志 \n&quot;</span>;</span><br><span class="line">             <span class="keyword">yield</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;日志中间件：出参记录日志 \n&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$validatorMiddleware</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;验证器中间件：前置验证器中间件 \n&quot;</span>;</span><br><span class="line">            <span class="variable">$returnParms</span> = <span class="keyword">yield</span>;</span><br><span class="line">            print_r(<span class="variable">$returnParms</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;验证器中间件：后置验证器中间件 \n&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable">$handle</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&#x27;your English name&#x27;</span>=&gt;<span class="string">&#x27;Henry&#x27;</span>];</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        middleware([<span class="variable">$logMiddleware</span>,<span class="variable">$validatorMiddleware</span>,<span class="variable">$handle</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">日志中间件：进参记录日志</span><br><span class="line">验证器中间件：前置验证器中间件</span><br><span class="line"><span class="keyword">array</span>(<span class="string">&#x27;your English name&#x27;</span>=&gt;<span class="string">&#x27;Henry&#x27;</span>)</span><br><span class="line">验证器中间件：后置验证器中间件</span><br><span class="line">日志中间件：出参记录日志</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>协程</tag>
      </tags>
  </entry>
  <entry>
    <title>代码整洁之道之优化嵌套代码</title>
    <url>/2019/11/30/code-summarize-two/</url>
    <content><![CDATA[<h1>☘️ if else 和 switch case 优化方案</h1>
<p>1 如果嵌套逻辑是 返回值或者输出等简单的一句话代码，则使用表驱动方案。</p>
<p>2 如果是逻辑处理或者函数调用，则采用策略和多态模式。</p>
<p>举个例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$type</span> = <span class="variable">$data</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"> </span><br><span class="line"><span class="comment">//1-绑卡 2-充值</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="variable">$res</span> = (<span class="keyword">new</span> AccountPermission())-&gt;bindCard(<span class="variable">$account</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="variable">$res</span> = (<span class="keyword">new</span> AccountPermission())-&gt;recharge(<span class="variable">$account</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>以上这个例子逻辑大概就是根据客户端传递的type去调用不同的验证方法，这样写违背了设计原则之中的针对扩展开放，修改关闭原则，如果有新增type类型那么必须要修改此文件和AccountPermission文件，另外函数的封装要尽可能的<code>短小精悍</code>，代码逻辑直截了当并尽可能的减少依赖关系，这样才能体现出只做好一件事情。那么针对这些问题，以上的代码优化思路是这样的：</p>
<p>1 定义抽象类或者接口 AbstractPermission</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractPermission</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">...<span class="variable">$data</span></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2 创建不同的验证实体去实现或者继承AbstractPermission</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BindCard的验证实体</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BindCardPermission</span> <span class="keyword">extends</span> <span class="title">AbstractPermission</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">...<span class="variable">$parms</span></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//todo</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!-- more -->
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Recharge的验证实体</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RechargePermission</span> <span class="keyword">extends</span> <span class="title">AbstractPermission</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">...<span class="variable">$parms</span></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//todo</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3 创建工厂将创建实体的过程封装起来，在业务层通过策略来动态获取实例对象</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当然此处的工厂实例最好也要去继承或者实现一个抽象工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryPermission</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> PERMISSION = <span class="string">&#x27;Permission&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">permission</span>(<span class="params"><span class="variable">$permission</span>,<span class="variable">$parms</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$class</span> = <span class="variable">$permission</span>. constant(<span class="keyword">__CLASS__</span> . <span class="string">&quot;::PERMISSION&quot;</span>);</span><br><span class="line">        <span class="variable">$permissionObj</span> = <span class="string">&quot;App\\<span class="subst">&#123;$class&#125;</span>&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array(</span><br><span class="line">         [<span class="keyword">new</span> <span class="variable">$permissionObj</span>(),<span class="string">&#x27;validator&#x27;</span>],                                      [<span class="variable">$parms</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4 如何使用，这里就要去设计一套策略了，可以结合创建工厂的步骤设计具体的策略</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  type 传递 BindCard  Recharge ....</span></span><br><span class="line"><span class="variable">$type</span>  = <span class="variable">$data</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="variable">$parms</span> = <span class="variable">$data</span>[<span class="string">&#x27;parms&#x27;</span>];</span><br><span class="line"><span class="variable">$res</span> = FactoryPermission::permission(<span class="variable">$type</span>,<span class="variable">$parms</span>)</span><br></pre></td></tr></table></figure>
<p>总结：将职责单一，减少依赖，针对扩展开放修改关闭，这样以后有新增type只需要扩展新增的permission实体，而不需要修改任何其他文件。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>awk</title>
    <url>/2019/11/29/awk/</url>
    <content><![CDATA[<p>Reference：<code>https://www.gnu.org/software/gawk/manual/gawk.html#Running-gawk</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Amelia       555-5553     amelia.zodiacusque@gmail.com    F</span><br><span class="line">Anthony      555-3412     anthony.asserturo@hotmail.com   A</span><br><span class="line">Becky        555-7685     becky.algebrarum@gmail.com      A</span><br><span class="line">Bill         555-1675     bill.drowning@hotmail.com       A</span><br><span class="line">Broderick    555-0542     broderick.aliquotiens@yahoo.com R</span><br><span class="line">Camilla      555-2912     camilla.infusarum@skynet.be     R</span><br><span class="line">Fabius       555-1234     fabius.undevicesimus@ucb.edu    F</span><br><span class="line">Julie        555-6699     julie.perscrutabor@skeeve.com   F</span><br><span class="line">Martin       555-6480     martin.codicibus@hotmail.com    A</span><br><span class="line">Samuel       555-3430     samuel.lanceolis@shu.edu        A</span><br><span class="line">Jean-Paul    555-2127     jeanpaul.campanorum@nyu.edu     R</span><br></pre></td></tr></table></figure>
<h3 id="按-0-查找匹配元素"><a class="header-anchor" href="#按-0-查找匹配元素">¶</a>按 $0 查找匹配元素</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;/li/ &#123;print $0&#125;&#x27;</span> 2017.log </span><br><span class="line">&lt;=&gt;</span><br><span class="line">grep li 2017.log</span><br><span class="line"></span><br><span class="line">//不同的是 ‘/’ is called a regular expression,</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="切割-slice"><a class="header-anchor" href="#切割-slice">¶</a>切割 slice</h3>
<p><code>uuidd:x:107:111::/run/uuidd:/bin/false</code></p>
<p>如果每行串都有某个特殊字符可以按照特殊字符切割字符串。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27; /redis/ &#123; print $1 &#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;/redis/ &#123; print $1 &#125;&#x27;</span> /etc/passwd  | wc -l</span><br><span class="line"></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27; &#123; print $1 &#125;&#x27;</span> /etc/passwd | sort </span><br></pre></td></tr></table></figure>
<h3 id="COUNT-THIS-FILE"><a class="header-anchor" href="#COUNT-THIS-FILE">¶</a>COUNT THIS FILE</h3>
<p>统计文件有多少列<br>
<code>awk 'END &#123; print NF &#125;' 2017.log </code><br>
统计文件有多少行<br>
<code>awk 'END &#123; print NR &#125;' 2017.log</code></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Best practice for feature switch of devops</title>
    <url>/2019/11/28/devops-featur-switch/</url>
    <content><![CDATA[<h3 id="为什么要使用特性开关"><a class="header-anchor" href="#为什么要使用特性开关">¶</a>为什么要使用特性开关?</h3>
<ul>
<li>上线周期短，屏蔽在单一上线周期内已开发但未完成的特性（例如每周两次上线，但“产品列表”功能需要三周才能开发完成）</li>
<li>对比在不同 UI 下的用户行为和转化率（A/B Testing）</li>
<li>部署与发布分离，持续频繁部署，业务随时可发布</li>
<li>部署：代码部署到生产环境</li>
<li>发布：特性上线，交付给最终用户使用,部署与发布分离，开发团队频繁持续进行部署，而业务人员（需求方）决定特性何时发布。</li>
</ul>
<hr>
<span id="more"></span>
<h3 id="为什么不继续使用旧做法（挑代码）？"><a class="header-anchor" href="#为什么不继续使用旧做法（挑代码）？">¶</a>为什么不继续使用旧做法（挑代码）？</h3>
<p>旧做法：每次发布前，从代码仓库中，由开发组长从最近的若干提交中，手工挑选出需要上线的若干个提交，测试人员进行测试并发布。<br>
这种做法：</p>
<ul>
<li>生产环境和开发主干代码不一致，违背了单一主干代码的策略，造成代码库版本碎片化</li>
<li>与持续集成理念背道而驰（不能早期集成、早期测试、提供快速反馈）</li>
</ul>
<hr>
<h3 id="为什么不用-Git-Branch？"><a class="header-anchor" href="#为什么不用-Git-Branch？">¶</a>为什么不用 Git Branch？</h3>
<p>Long-lived feature branch是一个常见的持续交付反模式。这是因为：如果项目拥有多个长期彼此独立演进的分支，往往需要等到最后发布时才合并代码，这与持续集成的最佳实践背道而驰。<br>
可参见 ThoughtWorks技术雷达相关介绍：<a href="https://www.thoughtworks.com/radar/techniques/long-lived-branches-with-gitflow">https://www.thoughtworks.com/radar/techniques/long-lived-branches-with-gitflow</a></p>
<hr>
<h3 id="特性开关是解决问题的最后手段"><a class="header-anchor" href="#特性开关是解决问题的最后手段">¶</a>特性开关是解决问题的最后手段</h3>
<p>为了隐藏未完成的特性进入生产环境，我们应遵循以下步骤：</p>
<ul>
<li>首先考虑将大的业务特性分解，分批次小步引入新的特性。这样做的好处是减少上线风险，并收集用户对于新特性的真实使用反馈，便于持续改进该特性。</li>
<li>其次，可以考虑新特性UI的入口地址与已有UI分离，给新特性赋予一个全新的URL，但不暴露该地址给真实用户，即可隐藏未完成的特性。最后才考虑特性开关，作为解决问题的最后手段。</li>
</ul>
<hr>
<h3 id="使用特性开关的注意事项"><a class="header-anchor" href="#使用特性开关的注意事项">¶</a>使用特性开关的注意事项</h3>
<ul>
<li>使用特性开关包裹某一特性时，要特别注意不要遗漏某些特性代码在开关范围之外。</li>
<li>使用了特性开关后，测试人员的测试策略 - 通常说来只需测试下列两种情况：</li>
</ul>
<ol>
<li>启用所有下一次上线发布时需要的功能的情况</li>
<li>启用所有功能的情况</li>
</ol>
<ul>
<li>由特性开关控制的功能正式上线并稳定后，务必要去掉特性开关代码，包括配置文件中特性开关变量以及所有使用特性开关的代码。</li>
<li>特性开关数量不能太多，一旦超过限定数量，务必清理已有特性开关</li>
</ul>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>好心修改别人的代码却带来新的bug</title>
    <url>/2019/02/24/bug-with-auther/</url>
    <content><![CDATA[<blockquote>
<p>有时候非常严重的问题，就是你常常忽略的小不点。</p>
</blockquote>
<p>开发过程中，有时候会遇到要修改别人的代码，那么怎么确保不会带出新的问题出来呢🙏我们的鹏飞老大给出了几条建议💯。</p>
<ul>
<li>UnitTest，仔细想了想，单元测试真的是太有必要了。</li>
<li>代码走查，优秀的技术团队通常都会有，走查和分享的环节。</li>
<li>开发纪律上以下上原话</li>
</ul>
<p>代码块注释：标明作者、时间、描述<br>
原则上不允许擅自修改他人代码：如需修改需通知作者配合修改，如无法通知作者则必须慎重修改且须有测试保障<br>
防御式编程与契约式编程：默认不信任任何外部调用和方法，默认双方遵守契约，任意一方撕毁契约则抛出异常，建议在UI及应用层倾向于防御式编程保证友好及体验，在逻辑层倾向于契约式编程尽早暴露隐患</p>
]]></content>
      <categories>
        <category>bug</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Never forget why you started, and your mission can be accomplished.</title>
    <url>/2017/10/21/today-idea-20171021/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>About swoole questions</title>
    <url>/2017/09/21/swoole/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* fpm only can use Synchronous client</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fpm</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$parms</span> = <span class="string">&#x27;parms&#x27;</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;tcpClient(<span class="variable">$parms</span>);<span class="comment">// throw a error Swoole\Client is must cli</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serv</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Swoole has three mode pattern maybe refence: https://wiki.swoole.com/wiki/page/353.html</span></span><br><span class="line"><span class="comment">         * have a question at here but i don&#x27;t know , if not use SWOOLE_BASE there is a error about epoll</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$serv</span> = <span class="keyword">new</span> \Swoole\Http\Server(<span class="string">&quot;0,0,0,0&quot;</span>, <span class="number">9508</span>,SWOOLE_BASE, SWOOLE_SOCK_TCP);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$serv</span>-&gt;on(<span class="string">&#x27;Request&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$request</span>, <span class="variable">$response</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$arrParms</span> = [</span><br><span class="line">                <span class="string">&#x27;channel&#x27;</span>=&gt;  <span class="keyword">isset</span>(<span class="variable">$request</span>-&gt;get[<span class="string">&#x27;channel&#x27;</span>]) ? <span class="variable">$request</span>-&gt;get[<span class="string">&#x27;channel&#x27;</span>] : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;uid&#x27;</span>    =&gt;  <span class="keyword">isset</span>(<span class="variable">$request</span>-&gt;get[<span class="string">&#x27;uid&#x27;</span>]) ? <span class="variable">$request</span>-&gt;get[<span class="string">&#x27;uid&#x27;</span>] : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            ];</span><br><span class="line">            <span class="variable">$class</span> = <span class="string">&#x27;BindCard&#x27;</span>. constant(<span class="keyword">__CLASS__</span> . <span class="string">&quot;::PERM&quot;</span>);</span><br><span class="line">            <span class="variable">$obj</span> = <span class="string">&quot;App\\Http\\Controllers\\<span class="subst">&#123;$class&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">           call_user_func_array(<span class="keyword">array</span>(<span class="keyword">new</span> <span class="variable">$obj</span>(),<span class="string">&#x27;bandCard&#x27;</span>), [<span class="variable">$arrParms</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$response</span>-&gt;cookie(<span class="string">&quot;User&quot;</span>, <span class="string">&quot;Swoole&quot;</span>);</span><br><span class="line">            <span class="variable">$response</span>-&gt;cookie(<span class="string">&quot;english_name&quot;</span>, <span class="string">&quot;Henry&quot;</span>);</span><br><span class="line">            <span class="variable">$response</span>-&gt;cookie(<span class="string">&quot;channel&quot;</span>, <span class="variable">$arrParms</span>[<span class="string">&#x27;channel&#x27;</span>]);</span><br><span class="line">            <span class="variable">$response</span>-&gt;header(<span class="string">&quot;X-Server&quot;</span>, <span class="string">&quot;Swoole&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$json</span> = json_encode([</span><br><span class="line">                <span class="string">&#x27;uid&#x27;</span>=&gt;<span class="variable">$arrParms</span>[<span class="string">&#x27;uid&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;chanle&#x27;</span>=&gt;<span class="variable">$arrParms</span>[<span class="string">&#x27;channel&#x27;</span>],</span><br><span class="line">            ]);</span><br><span class="line">            <span class="variable">$response</span>-&gt;end(<span class="string">&quot;&lt;h1&gt;Hello Swoole!&lt;/h1&gt;&quot;</span>.<span class="variable">$json</span>);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$serv</span>-&gt;start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BindCardRepository</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bandCard</span>(<span class="params"><span class="variable">$parms</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$parms</span> +=[</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>=&gt;<span class="string">&#x27;&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;tcpClient(<span class="variable">$parms</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tcpClient</span>(<span class="params"><span class="variable">$parms</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$client</span> = <span class="keyword">new</span> \Swoole\Client(SWOOLE_SOCK_TCP, SWOOLE_SOCK_ASYNC);</span><br><span class="line">        <span class="comment">//设置事件回调函数</span></span><br><span class="line">        <span class="variable">$client</span>-&gt;on(<span class="string">&quot;connect&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$cli</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$parms</span></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//log</span></span><br><span class="line">            <span class="variable">$cli</span>-&gt;send(serialize(<span class="variable">$parms</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$client</span>-&gt;on(<span class="string">&quot;receive&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$cli</span>, <span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// when reveived data do somethings</span></span><br><span class="line">            print_r(unserialize(<span class="variable">$data</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$client</span>-&gt;on(<span class="string">&quot;error&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$cli</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Connect failed\n&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$client</span>-&gt;on(<span class="string">&quot;close&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$cli</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Connection close\n&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//发起网络连接</span></span><br><span class="line">        <span class="variable">$client</span>-&gt;connect(<span class="string">&#x27;192.168.10.10&#x27;</span>, <span class="number">9503</span>, <span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tcpServer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$serv</span> = <span class="keyword">new</span> \Swoole\Server(<span class="string">&quot;192.168.10.10&quot;</span>, <span class="number">9503</span>,SWOOLE_BASE, SWOOLE_SOCK_TCP);</span><br><span class="line">        <span class="variable">$serv</span>-&gt;set(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;daemonize&#x27;</span>   =&gt; <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&#x27;reactor_num&#x27;</span> =&gt; <span class="number">2</span>,</span><br><span class="line">            <span class="string">&#x27;worker_num&#x27;</span>  =&gt; <span class="number">4</span></span><br><span class="line">        ));</span><br><span class="line">        <span class="variable">$serv</span>-&gt;on(<span class="string">&#x27;connect&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$serv</span>, <span class="variable">$fd</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;This Tcp Server is Connected.\n&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$serv</span>-&gt;on(<span class="string">&#x27;receive&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$serv</span>, <span class="variable">$fd</span>, <span class="variable">$from_id</span>, <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// do log and do somethings.</span></span><br><span class="line">            <span class="variable">$hanleData</span> = unserialize(<span class="variable">$data</span>);</span><br><span class="line">            <span class="variable">$serv</span>-&gt;send(<span class="variable">$fd</span>, <span class="variable">$data</span>);</span><br><span class="line">            <span class="variable">$serv</span>-&gt;close(<span class="variable">$fd</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$serv</span>-&gt;on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$serv</span>, <span class="variable">$fd</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Tcp Client: Close.\n&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$serv</span>-&gt;start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>swoole</tag>
      </tags>
  </entry>
  <entry>
    <title>Here are some thing about redis</title>
    <url>/2017/09/21/build-redis/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check redis status</span></span><br><span class="line">ps -aux | grep redis</span><br><span class="line"><span class="comment"># list status</span></span><br><span class="line">redis <span class="number">950</span>  <span class="number">0.1</span>  <span class="number">0.3</span>  <span class="number">40436</span>  <span class="number">8124</span> ? Ssl  <span class="number">02</span>:<span class="number">11</span>   <span class="number">0</span>:<span class="number">24</span> /usr/bin/redis-server <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span></span><br><span class="line">vagrant   <span class="number">4688</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">14520</span>  <span class="number">1092</span> pts/<span class="number">0</span>    S+   <span class="number">06</span>:<span class="number">13</span>   <span class="number">0</span>:<span class="number">00</span> grep</span><br><span class="line">--color=auto redis</span><br><span class="line"><span class="comment"># into server</span></span><br><span class="line">redis-cli -h <span class="number">127.0</span>.<span class="number">0.1</span>  -p <span class="number">6379</span></span><br><span class="line"><span class="comment"># show all key</span></span><br><span class="line">keys *</span><br><span class="line"><span class="comment"># check key&#x27;s type</span></span><br><span class="line">type your key</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Jobs</span>\<span class="title">ThisIsTestJob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Bus</span>\<span class="title">DispatchesJobs</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThisIsTestBuHenryController</span> <span class="keyword">extends</span>  <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DispatchesJobs</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fire</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// reference http://www.cnblogs.com/z1298703836/p/5346728.html</span></span><br><span class="line">        <span class="comment">// If use delay i don&#x27;t know is there any problem in redis it is zset</span></span><br><span class="line">        <span class="comment">// php artisan queue:work redis : yourself can run this command</span></span><br><span class="line">        <span class="comment">// php artisan queue:work redis --queue=emails : yourself can run this command that only specify queue name</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;dispatch((<span class="keyword">new</span> ThisIsTestJob())-&gt;onQueue((<span class="string">&#x27;register&#x27;</span>)));</span><br><span class="line">        <span class="comment">//$this-&gt;dispatch((new ThisIsTestJob())-&gt;delay(60)-&gt;onQueue((&#x27;emails&#x27;)));</span></span><br><span class="line">        <span class="comment">//$this-&gt;dispatch((new ThisIsTestJob()));</span></span><br><span class="line">        dd(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Supervisor"><a class="header-anchor" href="#Supervisor">¶</a>Supervisor</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[program:artisan]</span><br><span class="line">command                 = /usr/bin/php /home/vagrant/Code/jbh-oauth/artisan queue:work  --sleep=<span class="number">3</span> --tries=<span class="number">3</span> --queue=register  --daemon</span><br><span class="line"><span class="built_in">directory</span>               = /home/vagrant/Code/jbh-oauth</span><br><span class="line">autostart               = <span class="literal">true</span></span><br><span class="line">autorestart             = <span class="literal">true</span></span><br><span class="line">stdout_logfile          = /home/logs/supervisor/supervisor_queue.log</span><br><span class="line">stdout_logfile_maxbytes = <span class="number">10</span>MB</span><br><span class="line">stderr_logfile          = /home/logs/supervisor/supervisor_queue.log</span><br><span class="line">stderr_logfile_maxbytes = <span class="number">10</span>MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># check </span></span><br><span class="line"></span><br><span class="line">sudo supervisorctl reload</span><br><span class="line"></span><br><span class="line">sudo supervisorctl restart artisan</span><br><span class="line"></span><br><span class="line">sudo supervisorctl stop artisan</span><br><span class="line"></span><br><span class="line">sudo supervisorctl start artisan</span><br><span class="line"></span><br><span class="line">sudo supervisorctl status all</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>positive energy</title>
    <url>/2017/08/22/powerful/</url>
    <content><![CDATA[<p>Your opponents are reading.<br>
Your dushman are burnishing knief.<br>
Your bestie are Reducing weight.<br>
Next door Lao Wang is exercising waist.<br>
we must keep learning ,if not we will be overtaken by rivals.</p>
<p><img src="http://ogsm326mu.bkt.clouddn.com/%E7%BB%86%E6%80%9D%E6%9E%81%E6%81%90.gif" alt="细思极恐"></p>
]]></content>
      <tags>
        <tag>powerful</tag>
      </tags>
  </entry>
  <entry>
    <title>About Python bit operation</title>
    <url>/2017/07/26/python-%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Python bit operation,when use bit operation case</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">RECHARGE = <span class="number">2</span>&gt;&gt;<span class="number">1</span></span><br><span class="line">WITHRAW  = <span class="number">2</span>&lt;&lt;<span class="number">0</span></span><br><span class="line">INVENT   = <span class="number">2</span>&lt;&lt;<span class="number">1</span></span><br><span class="line">BANDCARD = <span class="number">2</span>&lt;&lt;<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">If somebody will going to check recharge and bandcard,like this.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">this_user = RECHARGE | BANDCARD </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">How can check user like this.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> this_user &amp; RECHARGE:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;recharge is ok&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> this_user &amp; WITHRAW:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;withraw is ok&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> this_user &amp; BANDCARD:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;bandcard is ok&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> this_user &amp; INVENT:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;invent is ok&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>About Python Decorator</title>
    <url>/2017/07/26/python-%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<p><code>Decorator</code> 一个函数原有功能不变的情况下，增强这个函数的功能，这个就是装饰器。</p>
<p>case: when you difined a function , then you want to add some functions in it,but you don’t want modify this function.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is a test decorator,it useful is going to print messages or bring function at a function&#x27;s front and end.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">at_front_end_print</span>(<span class="params">fun</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">byfun</span>(<span class="params">*arg,**keyarg</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;At %s function\&#x27;s front print:&#x27;</span> %(fun.__name__))</span><br><span class="line">        fun(*arg,**keyarg)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;At %s function\&#x27;s end print:&#x27;</span> %(fun.__name__))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> byfun</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is a test function,it test decorator at_front_end_print</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@at_front_end_print</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_info</span>(<span class="params">uid</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This user id is %d :&#x27;</span> %uid )</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is a test function,it test decorator at_front_end_print</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@at_front_end_print</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_user_bank_card</span>(<span class="params">user , <span class="built_in">type</span>=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Do check %s user\&#x27;s status, for %d&#x27;</span> %(user,<span class="built_in">type</span>))</span><br><span class="line"></span><br><span class="line">get_user_info(<span class="number">100</span>)</span><br><span class="line">check_user_bank_card(<span class="number">101</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This follow Decorator may pass args for example: decorator&#x27;s function do sign , like this it need three floors deep.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base_sign</span>(<span class="params">sign_key</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">fun</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">byfun</span>(<span class="params">*arg , **keyargs</span>):</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;This sector handle sign for %s :&#x27;</span> % fun.__name__,<span class="string">&#x27;it\&#x27;s sign key is %s&#x27;</span> %sign_key)</span><br><span class="line">            fun(*arg , **keyargs)</span><br><span class="line">        <span class="keyword">return</span> byfun</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is a open user api</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@base_sign(<span class="params">sign_key=<span class="string">&#x27;abc&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_user</span>(<span class="params">uid</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This sector is handle user open %d:&#x27;</span> %uid)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is a bank user api</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@base_sign(<span class="params"><span class="string">&#x27;def&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bank_user</span>(<span class="params">uid</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This sector is handle user bank %d:&#x27;</span> %uid)</span><br><span class="line"></span><br><span class="line">open_user(<span class="number">200</span>)</span><br><span class="line">bank_user(<span class="number">201</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span> 
<p>装饰器作用:</p>
<p>简化代码，避免<code>function</code>重复代码</p>
<p>打印日志：@log , 带参数@log(‘DEBUG’) @log(‘INFO’)</p>
<p>检测性能：@performance</p>
<p>数据库事务：@transaction</p>
<p>Url路由：@post(‘/register’)</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 高阶函数</title>
    <url>/2017/07/24/python-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="reference-http-book-pythontips-com-en-latest"><a class="header-anchor" href="#reference-http-book-pythontips-com-en-latest">¶</a>reference:  <a href="http://book.pythontips.com/en/latest/">http://book.pythontips.com/en/latest/</a></h3>
<p>Let’s going to understand Python’s map , reduce , filter.</p>
<span id="more"></span> 
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="comment"># use input,like Php readline ext</span></span><br><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>(<span class="string">&quot;please input:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span> , <span class="built_in">input</span>.split(<span class="string">&#x27;,&#x27;</span>))))</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;dd,wer,   &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.lstrip(<span class="string">&#x27;d&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># use Map</span></span><br><span class="line"></span><br><span class="line">fruitList = [<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;banana&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># this map returns is  an iterable object. so i don&#x27;t understand how can i retrieve or take out i want elements</span></span><br><span class="line">iterter = <span class="built_in">map</span>(<span class="keyword">lambda</span> item: item+<span class="string">&quot;s&quot;</span> , fruitList)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> iterter:</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># list is may any data type even object or function for example</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if you invest 10000 yuan and you need to know each manth&#x27;s replay plan,then i hope define 12 manth handle to give map lists</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getJan</span>(<span class="params">money</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;this is Jan\&#x27;s repaly plan&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFeb</span>(<span class="params">money</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;this is Feb\&#x27;s replay plan&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMar</span>(<span class="params">money</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;this is Mar\&#x27;s replay plan&#x27;</span></span><br><span class="line"></span><br><span class="line">money = <span class="number">10000</span></span><br><span class="line">rep = <span class="built_in">map</span>(<span class="keyword">lambda</span> getRepaly : getRepaly(money)  , [getJan,getFeb,getMar])</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> rep:</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#filter : as the name suggests , it return a list elements for which a function returns true.</span></span><br><span class="line"></span><br><span class="line">prepareFilter =  [<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;python&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="keyword">lambda</span> language: language != <span class="string">&#x27;php&#x27;</span> , prepareFilter):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># reduce It applies a rolling computation to sequential pairs of values in a list.</span></span><br><span class="line"><span class="comment"># Notice : If you want to use reduce need  to from functools import reduce</span></span><br><span class="line"></span><br><span class="line">points = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">print</span>(reduce(<span class="keyword">lambda</span> x ,y: x+y ,points))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python AES and PHP AES</title>
    <url>/2017/07/24/python-aes/</url>
    <content><![CDATA[<p>When i try use Python’s package of json.dumps,I find the result is difference PHP, There is a question about Python’s json.dumps. It can behand <code>:</code> add a place.(它会在 ‘:’ 后放置一个空格，而像PHP这样的语言是没有这样的hash.这样导致两种语言的AES结果不一致).</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">key= <span class="string">&#x27;LJl:*DOOUV8(&#123;t11&#x27;</span>;</span><br><span class="line">iv = <span class="string">&#x27;OK~aAEHi&#123;yxfXDf4&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里密钥key 长度必须为16（AES-128）,</span></span><br><span class="line"><span class="comment">#24（AES-192）,或者32 （AES-256）Bytes 长度</span></span><br><span class="line"><span class="comment">#目前AES-128 足够目前使用</span></span><br><span class="line">BS = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pad = lambda s: s + (BS - len(s) % BS) * &#x27;\0&#x27;</span></span><br><span class="line">pad = <span class="keyword">lambda</span> s: s + (BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">Aesdata = &#123;<span class="string">&#x27;uid&#x27;</span>:<span class="string">&#x27;361503611&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#text = json.dumps(Aesdata, sort_keys=True, indent=4, separators=(&#x27;,&#x27;, &#x27;:&#x27;))</span></span><br><span class="line">text = json.dumps(Aesdata,separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>))</span><br><span class="line"></span><br><span class="line">cryptor = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># do AES</span></span><br><span class="line">ciphertext = cryptor.encrypt(pad(text))</span><br><span class="line"></span><br><span class="line"><span class="comment">#因为AES加密时候得到的字符串不一定是ascii字符集的，输出到终端或者保存时候可能存在问题</span></span><br><span class="line"><span class="comment">#所以这里统一把加密后的字符串转化为 base64 或者 16进制字符串</span></span><br><span class="line"></span><br><span class="line">rew = base64.b64encode(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># md5</span></span><br><span class="line">md = hashlib.md5()</span><br><span class="line"></span><br><span class="line">sign = <span class="string">&#x27;H*a1CsCDFIJIL*Ib&#x27;</span>+rew.decode()+<span class="string">&#x27;bim09e0d656374f46228c5205fe66f06ba7&#x27;</span></span><br><span class="line"></span><br><span class="line">md.update(sign.encode(<span class="string">&#x27;UTF-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(md.hexdigest())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我大PHP very easier</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params"><span class="variable">$data</span>,<span class="variable">$key</span>,<span class="variable">$iv</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$cipher</span> = MCRYPT_RIJNDAEL_128;</span><br><span class="line">    <span class="variable">$mode</span> = MCRYPT_MODE_CBC;</span><br><span class="line">    <span class="variable">$data</span>=json_encode(<span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$encrypt_data</span> = mcrypt_encrypt(<span class="variable">$cipher</span>, <span class="variable">$key</span>, <span class="variable">$data</span>, <span class="variable">$mode</span>, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="variable">$data</span>= base64_encode(<span class="variable">$encrypt_data</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>java－基础整数运算</title>
    <url>/2017/07/23/java-%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h3 id="整数运算"><a class="header-anchor" href="#整数运算">¶</a>整数运算</h3>
<p>整数除法仍然是整数，<code>%</code>可以取余。</p>
<p>自增和自减运算：<code>++</code>和<code>--</code>，注意是先引用在自增，还是先自增在引用的差别。</p>
<p>简写的<code>+=</code>和<code>-=</code></p>
<p>计算结果溢出不报错，但结果是错误的。 在计算过程中我们没有必要为了减少内存，采用byte,short等短类型进行计算。</p>
<h3 id="移位运算"><a class="header-anchor" href="#移位运算">¶</a>移位运算</h3>
<p>左移：<code>&lt;&lt;</code></p>
<p>右移：<code>&gt;&gt;</code></p>
<p>无条件右移：<code>&gt;&gt;&gt;</code></p>
<p>byte 和 short 会先转换为int在移位</p>
<p>注意移位如果超出了范围则直接被丢弃。For explame 5120 &gt;&gt; 11位</p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/java_%E7%A7%BB%E4%BD%8D.png" alt="java"></p>
<p><code>int</code> 类型如上图在内存中占32位存储空间其中最高位是符号位。在右移过程中可以用<code>&gt;&gt;&gt;</code>强制右移，将直接移动最高位的二进制数。</p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/java%20%E4%BD%8D%E8%BF%90%E7%AE%97%E7%A7%BB%E4%BD%8D.png" alt="java_right_move"></p>
<span id="more"></span>
<h3 id="位运算"><a class="header-anchor" href="#位运算">¶</a>位运算</h3>
<p><img src="http://o8979n2hu.bkt.clouddn.com/java_%E4%BD%8D%E8%BF%90%E7%AE%97.png" alt="java_wei_calut"></p>
<p>位运算过程中会先按位对齐，然后一次按位进行与运算或者或运算For example:</p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/java_%E4%BD%8D%E8%BF%90%E7%AE%97_%E4%BE%8B%E5%AD%90.png" alt="java_wei"></p>
<h3 id="异或运算"><a class="header-anchor" href="#异或运算">¶</a>异或运算</h3>
<p><img src="http://o8979n2hu.bkt.clouddn.com/%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97.png" alt="java_yihuo"></p>
<h3 id="运算过程中类型的自动提升"><a class="header-anchor" href="#运算过程中类型的自动提升">¶</a>运算过程中类型的自动提升</h3>
<p>Notice: 不能将较大的类型参与进入一个较小类型的运算当中。</p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/java_%E7%B1%BB%E5%9E%8B%E8%87%AA%E5%8A%A8%E6%8F%90%E5%8D%87.png" alt="java_yihuo"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>代码整洁之用责任链条重构你的if else</title>
    <url>/2017/05/30/%E8%B4%A3%E4%BB%BB%E9%93%BE/</url>
    <content><![CDATA[<blockquote>
<p>职责链模式是使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>
</blockquote>
<p>构造责任链条<code>chain</code>的两种方式：</p>
<p>1 通过函数方法属性构造 eg :</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span>  <span class="title">RepaymentCalculateAbstract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$next</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setNextCalculate</span>(<span class="params">RepaymentCalculateAbstract <span class="variable">$nextCalculate</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;next = <span class="variable">$nextCalculate</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"><span class="variable">$parms</span></span>) </span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span> 
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JanuaryRepayment</span> <span class="keyword">extends</span> <span class="title">RepaymentCalculateAbstract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"><span class="variable">$parms</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//pass</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Jan-&#x27;</span>.<span class="variable">$parms</span> ;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;next-&gt;calculate(<span class="variable">$parms</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FebruaryRepayment</span> <span class="keyword">extends</span> <span class="title">RepaymentCalculateAbstract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"><span class="variable">$parms</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//pass</span></span><br><span class="line">        <span class="variable">$parms</span> = <span class="number">100</span> + <span class="variable">$parms</span> ;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Feb&#x27;</span>.<span class="variable">$parms</span> ;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;next-&gt;calculate(<span class="variable">$parms</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MarchRepayment</span> <span class="keyword">extends</span> <span class="title">RepaymentCalculateAbstract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"><span class="variable">$parms</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//pass</span></span><br><span class="line">        <span class="variable">$parms</span> = <span class="number">100</span> +  <span class="variable">$parms</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Mar&#x27;</span>.<span class="variable">$parms</span> ;</span><br><span class="line">        <span class="comment">//$this-&gt;next-&gt;calculate($parms);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppRepaymentCalculate</span> <span class="keyword">extends</span> <span class="title">RestAbstractController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">Request <span class="variable">$request</span> , FebruaryRepayment <span class="variable">$Feb</span> , JanuaryRepayment <span class="variable">$Jan</span> ,MarchRepayment <span class="variable">$Mar</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$Jan</span>-&gt;setNextCalculate(<span class="variable">$Feb</span>) ;</span><br><span class="line">        <span class="variable">$Feb</span>-&gt;setNextCalculate(<span class="variable">$Mar</span>);</span><br><span class="line">        <span class="variable">$Jan</span>-&gt;calculate(<span class="string">&#x27;100&#x27;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2 构造注入链条，通过在父类做切面代理调用子类的 processing ： eg</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Handler|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$successor</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Handler <span class="variable">$handler</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;successor = <span class="variable">$handler</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This approach by using a template method pattern ensures you that</span></span><br><span class="line"><span class="comment">     * each subclass will not forget to call the successor</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> RequestInterface $request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">RequestInterface <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$processed</span> = <span class="keyword">$this</span>-&gt;processing(<span class="variable">$request</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$processed</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// the request has not been processed by this handler =&gt; see the next</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;successor !== <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="variable">$processed</span> = <span class="keyword">$this</span>-&gt;successor-&gt;handle(<span class="variable">$request</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$processed</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">processing</span>(<span class="params">RequestInterface <span class="variable">$request</span></span>)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpInMemoryCacheHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Handler|null $successor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span>, Handler <span class="variable">$successor</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::__construct(<span class="variable">$successor</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> RequestInterface $request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">processing</span>(<span class="params">RequestInterface <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$key</span> = sprintf(</span><br><span class="line">            <span class="string">&#x27;%s?%s&#x27;</span>,</span><br><span class="line">            <span class="variable">$request</span>-&gt;getUri()-&gt;getPath(),</span><br><span class="line">            <span class="variable">$request</span>-&gt;getUri()-&gt;getQuery()</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$request</span>-&gt;getMethod() == <span class="string">&#x27;GET&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;data[<span class="variable">$key</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[<span class="variable">$key</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SlowDatabaseHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> RequestInterface $request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">processing</span>(<span class="params">RequestInterface <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// this is a mockup, in production code you would ask a slow (compared to in-memory) DB for the results</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChainTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Handler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$chain</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;chain = <span class="keyword">new</span> HttpInMemoryCacheHandler(</span><br><span class="line">            [<span class="string">&#x27;/foo/bar?index=1&#x27;</span> =&gt; <span class="string">&#x27;Hello In Memory!&#x27;</span>],</span><br><span class="line">            <span class="keyword">new</span> SlowDatabaseHandler()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testCanRequestKeyInFastStorage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$uri</span> = <span class="keyword">$this</span>-&gt;createMock(<span class="string">&#x27;Psr\Http\Message\UriInterface&#x27;</span>);</span><br><span class="line">        <span class="variable">$uri</span>-&gt;method(<span class="string">&#x27;getPath&#x27;</span>)-&gt;willReturn(<span class="string">&#x27;/foo/bar&#x27;</span>);</span><br><span class="line">        <span class="variable">$uri</span>-&gt;method(<span class="string">&#x27;getQuery&#x27;</span>)-&gt;willReturn(<span class="string">&#x27;index=1&#x27;</span>);</span><br><span class="line">        <span class="variable">$request</span> = <span class="keyword">$this</span>-&gt;createMock(<span class="string">&#x27;Psr\Http\Message\RequestInterface&#x27;</span>);</span><br><span class="line">        <span class="variable">$request</span>-&gt;method(<span class="string">&#x27;getMethod&#x27;</span>)</span><br><span class="line">            -&gt;willReturn(<span class="string">&#x27;GET&#x27;</span>);</span><br><span class="line">        <span class="variable">$request</span>-&gt;method(<span class="string">&#x27;getUri&#x27;</span>)-&gt;willReturn(<span class="variable">$uri</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="string">&#x27;Hello In Memory!&#x27;</span>, <span class="keyword">$this</span>-&gt;chain-&gt;handle(<span class="variable">$request</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testCanRequestKeyInSlowStorage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$uri</span> = <span class="keyword">$this</span>-&gt;createMock(<span class="string">&#x27;Psr\Http\Message\UriInterface&#x27;</span>);</span><br><span class="line">        <span class="variable">$uri</span>-&gt;method(<span class="string">&#x27;getPath&#x27;</span>)-&gt;willReturn(<span class="string">&#x27;/foo/baz&#x27;</span>);</span><br><span class="line">        <span class="variable">$uri</span>-&gt;method(<span class="string">&#x27;getQuery&#x27;</span>)-&gt;willReturn(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="variable">$request</span> = <span class="keyword">$this</span>-&gt;createMock(<span class="string">&#x27;Psr\Http\Message\RequestInterface&#x27;</span>);</span><br><span class="line">        <span class="variable">$request</span>-&gt;method(<span class="string">&#x27;getMethod&#x27;</span>)</span><br><span class="line">            -&gt;willReturn(<span class="string">&#x27;GET&#x27;</span>);</span><br><span class="line">        <span class="variable">$request</span>-&gt;method(<span class="string">&#x27;getUri&#x27;</span>)-&gt;willReturn(<span class="variable">$uri</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="string">&#x27;Hello World!&#x27;</span>, <span class="keyword">$this</span>-&gt;chain-&gt;handle(<span class="variable">$request</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Practice of devops thinking</title>
    <url>/2017/05/14/devops-thinking/</url>
    <content><![CDATA[<h3 id="精益思想：消除浪费"><a class="header-anchor" href="#精益思想：消除浪费">¶</a>精益思想：消除浪费</h3>
<ol>
<li>以越来越少的投入——较少的人力、较少的设备、较短的时间和较小的场地创造出尽可能多的价值；</li>
<li>越来越接近用户，提供他们确实要的东西，精确地定义价值</li>
<li>确定每个产品的全部价值流；</li>
<li>使保留下来的、创造价值的各个步骤流动起来，缩短周期</li>
<li>及时跟上不断变化着的顾客需求</li>
<li>精益思想包括精益生产、精益管理、精益设计和精益供应等一系列思想，其核心是通过及时适量、零库存、传票卡等现场管理手段实现订货生产，从而确保产品质量并降低成本。“精”体现在质量上，追求尽善尽美、精益求精；“益”体现在成本上，只有成本低于行业平均成本的企业才能获得收益。因而，精益思想不单纯追求成本最低、企业眼中的质量最优，而是追求用户和企业都满意的质量、追求成本与质量的最佳配置、追求产品性能价格的最优比。</li>
</ol>
<h3 id="敏捷选型：SCRUM"><a class="header-anchor" href="#敏捷选型：SCRUM">¶</a>敏捷选型：SCRUM</h3>
<hr>
<span id="more"></span>
<p>角色：产品负责人（PO）—— 敏捷教练（SM）—— 自组织开发团队（DT）<br>
Scrum过程框架的基石：</p>
<ol>
<li>透明性：看板管理（Product Backlog、SPRINT BACKLOG、BURN-DOWN CHART）<br>
为了增强面对面沟通，前三个月建议使用白板进行，之后可以使用 JIRA 等看板系统</li>
<li>检验和适应：产品待办事项列表梳理、Sprint计划会议、每日站会、Sprint评审、Sprint回顾会议</li>
</ol>
<p><img src="http://o8979n2hu.bkt.clouddn.com/ScrumCN_Scrum_Process_710.png" alt="Scrum"></p>
<p>每日站会：  15分钟以内完成，每个人回答三个问题<br>
我昨天完成了什么任务？<br>
我今天打算做什么任务？<br>
我遇到了哪些障碍或困难？</p>
<h3 id="持续交付模型：敏捷开发-版本管理-单元测试-代码审查-集成构建-自动化测试"><a class="header-anchor" href="#持续交付模型：敏捷开发-版本管理-单元测试-代码审查-集成构建-自动化测试">¶</a>持续交付模型：敏捷开发 + 版本管理 +单元测试 + 代码审查 + 集成构建 + 自动化测试</h3>
<p>持续交付工具链：  intelliJ -&gt; gitlab  -&gt; sonar -&gt; jenkins -&gt; SIT</p>
<p>统一的代码管理：gitlab</p>
<ul>
<li>分支策略：   dev（SIT） release（UAT） master（PRO）注意事项：每个人每天都要向代码库主干提交代码</li>
<li>严格的代码审查机制：sonar  规则：New bugs &lt;= 0 , New Vulnerabilities &lt;= 0  ,注意事项：只有通过代码审查的代码才能进行构建</li>
<li>集成构建：jenkins , 流程模板：代码更新,单元测试,代码检查,部署测试环境,接口测试</li>
</ul>
<p>部署策略：  dev分支-&gt; SIT环境,release分支 -&gt; UAT环境 -&gt; PRO环境,PRO环境     -&gt; master分支<br>
注意事项：   每日至少构建一次,过程不不能存在人工干预,修复失败的构建是优先级最高的事情</p>
<p>summarize ： DevOps = 精益思想 + 敏捷开发 + 持续交付</p>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Best Practice Of Jenkins</title>
    <url>/2017/05/11/jenkins/</url>
    <content><![CDATA[<h3 id="Jenkins交付流水"><a class="header-anchor" href="#Jenkins交付流水">¶</a>Jenkins交付流水</h3>
<p>DevOps和产品团队需要熟悉的Jenkins技能</p>
<ol>
<li>持续集成</li>
</ol>
<ul>
<li>持续集成概念简介</li>
<li>项目交付流水线：持续集成的表现形式</li>
<li>Web和Mobile项目的典型交付流水线</li>
</ul>
<ol start="2">
<li>Jenkins持续集成系统</li>
</ol>
<ul>
<li>Jenkins的特点</li>
<li>理解流水线即代码（Pipeline as Code）</li>
</ul>
<ol start="3">
<li>Jenkins的使用</li>
</ol>
<ul>
<li>流水线的目录层级规划</li>
<li>在Jenkins中创建流水线</li>
</ul>
<ol>
<li>配置定时检查代码更新</li>
<li>配置带输入参数的流水线</li>
<li>添加流水线内容</li>
</ol>
<ul>
<li>Jenkinsfile的使用</li>
</ul>
<ol>
<li>Jenkinsfile的管理：项目中的pipeline目录</li>
<li>标准流水线的常见步骤</li>
<li>常用的Jenkinsfile语法</li>
<li>Jenkins中的Pipeline Syntax工具</li>
</ol>
<hr>
<span id="more"></span>
<h3 id="建议阅读材料"><a class="header-anchor" href="#建议阅读材料">¶</a>建议阅读材料</h3>
<ol>
<li>Jenkins Pipeline官方教程：</li>
</ol>
<ul>
<li><a href="https://github.com/jenkinsci/pipeline-plugin/blob/master/TUTORIAL.md">https://github.com/jenkinsci/pipeline-plugin/blob/master/TUTORIAL.md</a></li>
</ul>
<ol start="2">
<li>Jenkins Pipeline的10个最佳实践：</li>
</ol>
<ul>
<li><a href="http://www.cnblogs.com/itech/p/5678643.html">http://www.cnblogs.com/itech/p/5678643.html</a></li>
</ul>
<ol start="3">
<li>Jenkinsfile官方示例：</li>
</ol>
<ul>
<li><a href="https://github.com/jenkinsci/pipeline-examples">https://github.com/jenkinsci/pipeline-examples</a></li>
</ul>
<h3 id="持续集成基础概念"><a class="header-anchor" href="#持续集成基础概念">¶</a>持续集成基础概念</h3>
<p>持续集成，Continuous integration ，简称CI。</p>
<p>随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。<br>
持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。<br>
以一个比较典型的大型IT项目为例。<br>
首先，解释下集成。我们所有项目的代码都是托管在Git服务器上。每个项目都要有若干个单元测试，只有在本地电脑上通过了单元测试的代码才能上传到Git服务器上，保证上传的代码没有问题。代码进入流水线以后会经历一系列的预定过程，比如确认单元测试通过，代码静态检查和测试环境的部署等，然后会进入集成测试阶段。集成测试是指将多个软件组件连接后，通过自动化的手段检查组件直接的通信是否被破坏，因此这里的“集成”指就是指的集成测试。<br>
再说持续。不言而喻，就是指长期的对项目代码进行集成测试。既然是长期，那肯定是自动执行的，否则，人工执行则没有保证，而且耗人力。对此，我们有一台服务器，它会检查Git仓库的代码变更，当代码仓库内容发生变化以后，它需要更新本地代码，重新编译，然后跑集成测试。每次集成测试结果都会记录在案。完成这方面工作的就是Jenkins软件，当然，它的功能远不止这些。</p>
<p>持续集成的特点：</p>
<ul>
<li>它是一个自动化的周期性的集成测试过程，从检出代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，无需人工干预；</li>
<li>需要有专门的集成服务器来执行集成构建；</li>
<li>需要有代码托管工具支持；</li>
</ul>
<p>持续集成的作用：</p>
<ul>
<li>保证团队开发人员提交代码的质量，减轻了软件发布时的压力</li>
<li>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；</li>
</ul>
<h3 id="Jenkins安装与配置"><a class="header-anchor" href="#Jenkins安装与配置">¶</a>Jenkins安装与配置</h3>
<p>Jenkins是一个开源的实现持续集成的软件工具。它能实时监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。</p>
<p>官方网站：<a href="http://jenkins.io">http://jenkins.io</a></p>
<p>Jenkins的特点：</p>
<ul>
<li>易安装：仅仅一个 java -jar jenkins.war，从官网下载该文件后，直接运行，无需额外的安装，更无需安装数据库；</li>
<li>易配置：提供友好的GUI配置界面；</li>
<li>变更支持：Jenkins能从代码仓库（Svn/Git）中获取并产生代码更新列表并显示到流水线信息中；</li>
<li>支持永久链接：用户是通过web来访问Jenkins的，而这些web页面的链接地址都是永久链接地址，因此，你可以在各种文档中直接使用该链接；</li>
<li>集成E-Mail/RSS/IM：当完成一次集成完成时，可通过这些工具实时告诉你集成结果（集成测试通常需要花费一定时间，有了这个功能，就可以在等待结果过程中，干别的事情）；</li>
<li>JUnit/TestNG测试报告：也就是用以图表等形式提供详细的测试报表功能；</li>
<li>支持分布式构建：Jenkins可以把集成构建等工作分发到多台计算机中完成；</li>
<li>文件指纹信息：Jenkins会保存哪次集成构建产生了哪些产物文件，哪一次集成测试的环境是哪个版本部署的等记录</li>
<li>支持第三方插件：使得Jenkins 变得越来越强大；</li>
</ul>
<h3 id="部署Jenkins服务"><a class="header-anchor" href="#部署Jenkins服务">¶</a>部署Jenkins服务</h3>
<ol>
<li>安装环境介绍</li>
</ol>
<ul>
<li>系统：CentOS6.5_x64</li>
<li>Jenkins：2.19.3，路径为 /opt/soft/jenkins</li>
<li>JDK：jdk1.8.0_51，路径为 /opt/jdk1.8.0_51</li>
<li>机器 IP：10.70.71.235</li>
</ul>
<ol start="2">
<li>安装 Jenkins</li>
</ol>
<ul>
<li>
<p>新建 /opt/soft/jenkins 目录</p>
</li>
<li>
<p>jenkins 官网下载 war 包</p>
</li>
<li>
<p>将 jenkins.war 拷贝到此目录下</p>
</li>
<li>
<p>初始化运行，执行以下命令，默认以管理员身份启动运行</p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cd /opt/soft/jenkins;</span><br><span class="line">export JAVA_HOME=/opt/jdk1.<span class="number">8.0_51</span>;</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:<span class="variable">$PATH</span>;</span><br><span class="line">export JENKINS_HOME=/opt/soft/jenkins/workdir/;</span><br><span class="line">java -jar /opt/soft/jenkins/jenkins.war --httpPort=<span class="number">80</span></span><br><span class="line"><span class="comment">//在浏览器里输入 10.70.71.235，可以进入 Jenkins</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="3">
<li>配置 Jenkins</li>
</ol>
<ul>
<li>从左侧面板的“系统管理”按钮进入配置管理页面</li>
<li>首先点击“管理插件”页面，在“高级”Tab页上传必要的插件，包括Git、Gitlab Auth、Role-Based Authorization等</li>
<li>然后进入“Configure Global Security”页面，勾选“启用安全”，安全域里选择Gitlab登录，并添加相关信息</li>
<li>在“Configure Global Security”页面的安全域“权限”中选择“Role-Based Strategy”，然后到“Manage and Assign Roles”页面配置项目角色和权限</li>
<li>域名映射</li>
<li>启动时，设置 --httpPort=80，再由网管指定域名 <a href="http://jenkins.haihangyun.com">http://jenkins.haihangyun.com</a> 映射即可</li>
<li>集成Gitlab登录后，用户登录时会跳转到Gitlab页面，此时可用海航域账号登录，完成后会跳转回到Jenkins首页。</li>
</ul>
<h3 id="Jenkins发布流水线"><a class="header-anchor" href="#Jenkins发布流水线">¶</a>Jenkins发布流水线</h3>
<p>部署流水线：<br>
Jenkins提供很好的持续集成/交付的支持。<br>
通常流水线的设计是从Gitlab获取代码更新开始的，对于单开发分支+单发布分支的项目，应该对应有两条甚至多条流水线。<br>
一个比较完整的部署流程如下图：</p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/pipeline.png" alt="pipeline"></p>
<p>创建流水线:</p>
<ol>
<li>进入jenkins界面后，点击左上角新建按钮，出现如下界面<br>
<img src="http://o8979n2hu.bkt.clouddn.com/jenkins-manager.png" alt="jenkins-manager"></li>
</ol>
<ol start="2">
<li>依据需要创建子目录或流水线</li>
</ol>
<ul>
<li>如果需要创建的是子目录，在界面中填写目录名称，并且选择下方的Folder选项<br>
为同一项目搭建的流水线应该放置于同一目录下。<br>
<img src="http://o8979n2hu.bkt.clouddn.com/jenkins-manager-project-name.png" alt="jenkins-manager"></li>
</ul>
<p>点击保存后，在界面会出现新建的目录<br>
<img src="http://o8979n2hu.bkt.clouddn.com/jenkins-manager-project-name-over.png" alt="jenkins-manager"></p>
<p>点击目录名称进入目录内，在左侧的按钮可以继续创建子目录和流水线。</p>
<p>如果创建的是流水线，填写流水线名称，并选择Pipeline选项,流水线的创建完成</p>
<h3 id="Jenkins配置流水线内容"><a class="header-anchor" href="#Jenkins配置流水线内容">¶</a>Jenkins配置流水线内容</h3>
<p>打开新建流水线，点击左侧configure按钮。进入配置界面。具体有两种方式：</p>
<ol>
<li>直接填写在界面中,选择Pipeline script，如下图所示：<br>
<img src="http://o8979n2hu.bkt.clouddn.com/Pipeline-scrip.png" alt="jenkins-manager"></li>
</ol>
<ol start="2">
<li>使用SCM,在Defintion部分选择  Pipeline script from SCM。在SCM类型中选择Git，填写Pipeline script所在代码仓库和分支以及脚本文件路径。<br>
<img src="http://o8979n2hu.bkt.clouddn.com/Pipeline-script-from-SCM.png" alt="jenkins-manager"></li>
</ol>
<ol start="3">
<li>至此一条流水线搭建完成。</li>
</ol>
<h3 id="典型的流水线模板"><a class="header-anchor" href="#典型的流水线模板">¶</a>典型的流水线模板</h3>
<p>对于不同类型的应用，所需的流水线会有差异。例如Web应用通常需要设计自动化部署的流程，而Mobile的应用则通常只能到达打包的步骤。<br>
以聚宝滙产品为例。一个比较规范的Web项目流水线如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">withEnv([<span class="string">&#x27;PATH=/usr/local/bin:$PATH&#x27;</span>]) &#123;</span><br><span class="line">    node &#123;</span><br><span class="line">        stage(<span class="string">&#x27;代码更新&#x27;</span>) &#123;</span><br><span class="line">            checkout scm: [<span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;*/dev&#x27;</span>]],</span><br><span class="line">                         userRemoteConfigs: [[url: <span class="string">&#x27;git@gitbj.haihangyun.com:JBH/web.git&#x27;</span>]]]</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;单元测试&#x27;</span>) &#123;</span><br><span class="line">            sh <span class="string">&quot;phpunit&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;代码检查&#x27;</span>) &#123;</span><br><span class="line">            sh <span class="string">&quot;sonar-scanner -Dsonar.login=&#x27;jenkins&#x27; -Dsonar.password=&#x27;jenkins&#x27; -Dsonar.host.url=http://sonar.haihangyun.com&quot;</span></span><br><span class="line">            sh <span class="string">&quot;bash ./pipeline/checkSonarStatus.sh&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;部署确认&#x27;</span>) &#123;</span><br><span class="line">        timeout(time:<span class="number">1</span>, unit:<span class="string">&#x27;HOURS&#x27;</span>) &#123;</span><br><span class="line">            milestone()</span><br><span class="line">            input <span class="string">&quot;现在执行部署？&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    node &#123;</span><br><span class="line">        lock(resource: <span class="string">&#x27;WEB_PAAS&#x27;</span>, inversePrecedence: <span class="literal">true</span>) &#123;</span><br><span class="line">            stage(<span class="string">&#x27;部署PaaS云主站服务&#x27;</span>) &#123;</span><br><span class="line">                sh <span class="string">&#x27;bash ./pipeline/buildImage.sh dev&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;bash ./pipeline/makesureImageReady.sh dev&#x27;</span></span><br><span class="line">                sh <span class="string">&quot;bash ./pipeline/deployImage.sh dev&quot;</span></span><br><span class="line">                sh <span class="string">&quot;bash ./pipeline/waitDeployment.sh dev&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            stage(<span class="string">&#x27;部署PaaS云消息队列服务&#x27;</span>) &#123;</span><br><span class="line">                sh <span class="string">&#x27;bash ./pipeline/buildImage.sh dev -queue&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;bash ./pipeline/makesureImageReady.sh dev -queue&#x27;</span></span><br><span class="line">                sh <span class="string">&quot;bash ./pipeline/deployImage.sh dev -queue&quot;</span></span><br><span class="line">                sh <span class="string">&quot;bash ./pipeline/waitDeployment.sh dev -queue&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            stage(<span class="string">&#x27;接口测试&#x27;</span>) &#123;</span><br><span class="line">                withEnv([<span class="string">&#x27;SERVICE_NAME=api-app&#x27;</span>,<span class="string">&#x27;BACKEND_ADDR=&quot;http://devopsgroup-jbh-api-dev.haihangyun.com&quot;&#x27;</span>]) &#123;</span><br><span class="line">                    dir(<span class="string">&#x27;api-test&#x27;</span>) &#123;</span><br><span class="line">                        git url: <span class="string">&#x27;git@gitbj.haihangyun.com:JBH/api-doc.git&#x27;</span></span><br><span class="line">                        sh <span class="string">&#x27;npm run api-test&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            stage(<span class="string">&#x27;界面测试&#x27;</span>) &#123;</span><br><span class="line">                withEnv([<span class="string">&#x27;PATH=/opt/jdk1.7.0_67/bin:/usr/local/bin:$PATH&#x27;</span>,<span class="string">&#x27;JAVA_HOME=/opt/jdk1.7.0_67&#x27;</span>]) &#123;</span><br><span class="line">                    dir(<span class="string">&#x27;e2e-test&#x27;</span>) &#123;</span><br><span class="line">                        git url: <span class="string">&#x27;git@gitbj.haihangyun.com:JBH/e2e-test.git&#x27;</span></span><br><span class="line">                        sh <span class="string">&#x27;mvn clean test&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            milestone()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而Mobile的流水线内容看起来是这样的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">withEnv([<span class="string">&#x27;PATH=/usr/local/bin:$PATH&#x27;</span>]) &#123;</span><br><span class="line">    node &#123;</span><br><span class="line">        stage(<span class="string">&#x27;代码更新&#x27;</span>) &#123;</span><br><span class="line">            checkout scm: [<span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;*/dev&#x27;</span>]],</span><br><span class="line">                         userRemoteConfigs: [[url: <span class="string">&#x27;git@gitbj.haihangyun.com:JBH/app-android.git&#x27;</span>]]]</span><br><span class="line">        &#125;</span><br><span class="line">        dir(<span class="string">&#x27;jbh&#x27;</span>) &#123;</span><br><span class="line">            stage(<span class="string">&#x27;单元测试&#x27;</span>) &#123;</span><br><span class="line">                sh <span class="string">&#x27;gradle clean test&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            stage(<span class="string">&#x27;代码检查&#x27;</span>) &#123;</span><br><span class="line">                sh <span class="string">&quot;sonar-scanner -Dsonar.login=&#x27;jenkins&#x27; -Dsonar.password=&#x27;jenkins&#x27; -Dsonar.host.url=http://sonar.haihangyun.com&quot;</span></span><br><span class="line">                sh <span class="string">&quot;bash ./pipeline/checkSonarStatus.sh&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;打包确认&#x27;</span>) &#123;</span><br><span class="line">        timeout(time:<span class="number">6</span>, unit:<span class="string">&#x27;HOURS&#x27;</span>) &#123;</span><br><span class="line">            milestone()</span><br><span class="line">            input <span class="string">&quot;生成此版本的Apk包？&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    node &#123;</span><br><span class="line">        dir(<span class="string">&#x27;jbh&#x27;</span>) &#123;</span><br><span class="line">            stage(<span class="string">&#x27;生成Apk&#x27;</span>) &#123;</span><br><span class="line">                sh <span class="string">&quot;gradle build&quot;</span></span><br><span class="line">                archiveArtifacts <span class="string">&#x27;build/app.apk&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Jenkinsfile文件管理"><a class="header-anchor" href="#Jenkinsfile文件管理">¶</a>Jenkinsfile文件管理</h3>
<p>依据Jenkins的惯例，流水线脚本文件通常命名为Jenkinsfile，与项目一起存放到版本仓库中。<br>
在Jenkinsfile中可能还需要调用其他辅助脚本，我们可以将所有相关的文件放到一个统一的pipeline目录中。形成类似这样的结构：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">pipeline</span><br><span class="line">├── Jenkinsfile.dev</span><br><span class="line">├── Jenkinsfile.release</span><br><span class="line">├── Jenkinsfile.prod</span><br><span class="line">├── checkSonarStatus.sh</span><br><span class="line">├── buildImage.sh</span><br><span class="line">├── deployImage.sh</span><br><span class="line">├── ... ...</span><br></pre></td></tr></table></figure>
<h3 id="help"><a class="header-anchor" href="#help">¶</a>help</h3>
<ul>
<li>Jenkins Step参考：<a href="https://jenkins.io/doc/pipeline/steps/">https://jenkins.io/doc/pipeline/steps/</a></li>
<li>使用Jenkins Syntax</li>
</ul>
]]></content>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>代码整洁之道之装饰者模式</title>
    <url>/2017/04/23/%E8%A3%85%E9%A5%B0%E8%80%85/</url>
    <content><![CDATA[<p>装饰者模式（结构型设计模式）：通过动态的代理给一个对象添加一些额外的职责，就新增加的功能来说，装饰者比派生子类更加灵活。</p>
<p>装饰者模式采用组合的构建方式,大大减少了类的数量,也打破了扩展功能一定要使用继承的思维惯性.但是装饰者模式会产生过多的小类,过度地使用会让程序变得更复杂</p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/%E8%A3%85%E9%A5%B0%E8%80%85URM.jpg" alt="Decorator"></p>
<p>如上图：WebService的renderData职责是返回String,现在需要添加两项职责：返回<code>Xml</code> 和 <code>Json</code></p>
<p>通过 <code>RendererDecorator</code>来代理 <code>JsonRenderer</code> 和 <code>XmlRenderer </code> 装饰<code>Webservice</code> 的返回结果。</p>
<span id="more"></span>
<h3 id="RenderableInterface-接口（被装饰者接口或者抽象类）-如下："><a class="header-anchor" href="#RenderableInterface-接口（被装饰者接口或者抽象类）-如下：">¶</a>RenderableInterface 接口（被装饰者接口或者抽象类） 如下：</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPatterns</span>\<span class="title">Structural</span>\<span class="title">Decorator</span>;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RenderableInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderData</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Webservice（具体被装饰者）-如下："><a class="header-anchor" href="#Webservice（具体被装饰者）-如下：">¶</a>Webservice（具体被装饰者） 如下：</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPatterns</span>\<span class="title">Structural</span>\<span class="title">Decorator</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Webservice</span> <span class="keyword">implements</span> <span class="title">RenderableInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderData</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="RendererDecorator-代理如下-装饰者抽象类-："><a class="header-anchor" href="#RendererDecorator-代理如下-装饰者抽象类-：">¶</a>RendererDecorator 代理如下(装饰者抽象类)：</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPatterns</span>\<span class="title">Structural</span>\<span class="title">Decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RendererDecorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> RenderableInterface</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$wrapped</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> RenderableInterface $renderer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">RenderableInterface <span class="variable">$renderer</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;wrapped = <span class="variable">$renderer</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="具体装饰者-JsonRenderer"><a class="header-anchor" href="#具体装饰者-JsonRenderer">¶</a>具体装饰者 JsonRenderer</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPatterns</span>\<span class="title">Structural</span>\<span class="title">Decorator</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonRenderer</span> <span class="keyword">extends</span> <span class="title">RendererDecorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderData</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> json_encode(<span class="keyword">$this</span>-&gt;wrapped-&gt;renderData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="具体装饰者-XmlRenderer"><a class="header-anchor" href="#具体装饰者-XmlRenderer">¶</a>具体装饰者 XmlRenderer</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPatterns</span>\<span class="title">Structural</span>\<span class="title">Decorator</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XmlRenderer</span> <span class="keyword">extends</span> <span class="title">RendererDecorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderData</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$doc</span> = <span class="keyword">new</span> \DOMDocument();</span><br><span class="line">        <span class="variable">$data</span> = <span class="keyword">$this</span>-&gt;wrapped-&gt;renderData();</span><br><span class="line">        <span class="variable">$doc</span>-&gt;appendChild(<span class="variable">$doc</span>-&gt;createElement(<span class="string">&#x27;content&#x27;</span>, <span class="variable">$data</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$doc</span>-&gt;saveXML();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="test"><a class="header-anchor" href="#test">¶</a>test :</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPatterns</span>\<span class="title">Structural</span>\<span class="title">Decorator</span>\<span class="title">Tests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">DesignPatterns</span>\<span class="title">Structural</span>\<span class="title">Decorator</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Decorator\Webservice</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$service</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;service = <span class="keyword">new</span> Decorator\Webservice(<span class="string">&#x27;foobar&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testJsonDecorator</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$service</span> = <span class="keyword">new</span> Decorator\JsonRenderer(<span class="keyword">$this</span>-&gt;service);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="string">&#x27;&quot;foobar&quot;&#x27;</span>, <span class="variable">$service</span>-&gt;renderData());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testXmlDecorator</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$service</span> = <span class="keyword">new</span> Decorator\XmlRenderer(<span class="keyword">$this</span>-&gt;service);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertXmlStringEqualsXmlString(<span class="string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;content&gt;foobar&lt;/content&gt;&#x27;</span>, <span class="variable">$service</span>-&gt;renderData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>备注：装饰者可以装饰，装饰者返回的结果。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>swoole 安装</title>
    <url>/2017/04/19/swoole-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="从release上选择一个版本clone源代码-😉"><a class="header-anchor" href="#从release上选择一个版本clone源代码-😉">¶</a>从release上选择一个版本clone源代码 😉</h3>
<p><code>sudo  git clone https://github.com/swoole/swoole-src.git</code></p>
<h3 id="编译生成configure文件"><a class="header-anchor" href="#编译生成configure文件">¶</a>编译生成configure文件</h3>
<p>一 ： 通过phpize脚本生成<br>
<code>cd swoole-src.git</code><br>
<code>sudo /usr/bin/phpize7.0</code></p>
<p>如果没有找到<code>phpize</code> 先安装<code>phpize</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo apt-get install autoconf automake libtool m4</span><br><span class="line">sudo apt-get install php7.<span class="number">0</span>-dev</span><br><span class="line"><span class="keyword">For</span> PHP7.<span class="number">1</span>, <span class="keyword">use</span> <span class="title">php7</span>.1-<span class="title">dev</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>二 ：  通过configure生成<code>makefile</code> 文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo ./configure </span><br></pre></td></tr></table></figure>
<p>三 ：通过 makefile 文件编译生成 <code>.so</code>文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo make</span><br><span class="line">sudo make test  <span class="comment">//可选</span></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>四 ：配置 <code>.ini</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cd /etc/php/<span class="number">7.0</span>/mods-available/</span><br><span class="line">touch swoole.ini</span><br><span class="line">extension=swoole.so</span><br><span class="line"></span><br><span class="line">sudo ln -s /etc/php/<span class="number">7.0</span>/mods-available/swoole.ini/etc/php/<span class="number">7.0</span>/cli/conf.d/swoole.ini</span><br><span class="line"></span><br><span class="line">sudo ln -s /etc/php/<span class="number">7.0</span>/mods-available/swoole.ini/etc/php/<span class="number">7.0</span>/fpm/conf.d/swoole.ini</span><br><span class="line"></span><br><span class="line"><span class="comment">//fpm模式下需要重启fpm，phpinfo 查看</span></span><br><span class="line">sudo service php7.<span class="number">0</span>-fpm restart</span><br><span class="line"></span><br><span class="line">php -m | grep swoole</span><br></pre></td></tr></table></figure>
<h3 id="通过Cmake安装"><a class="header-anchor" href="#通过Cmake安装">¶</a>通过Cmake安装</h3>
<p>把<code>swoole.so</code>做为一个C库</p>
]]></content>
      <categories>
        <category>swoole</category>
      </categories>
      <tags>
        <tag>swoole</tag>
      </tags>
  </entry>
  <entry>
    <title>大型网站技术篇之负载均衡</title>
    <url>/2017/04/17/large-website-load-balance/</url>
    <content><![CDATA[<h3 id="架构图"><a class="header-anchor" href="#架构图">¶</a>架构图</h3>
<p><img src="http://o8979n2hu.bkt.clouddn.com/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.jpg" alt="架构图"></p>
<h3 id="负载均衡工作方式"><a class="header-anchor" href="#负载均衡工作方式">¶</a>负载均衡工作方式</h3>
<p><img src="http://o8979n2hu.bkt.clouddn.com/lvs.png" alt="lvs"></p>
<h4 id="http-重定向＝》转移请求"><a class="header-anchor" href="#http-重定向＝》转移请求">¶</a>http 重定向＝》转移请求</h4>
<h4 id="DNS-负载均衡"><a class="header-anchor" href="#DNS-负载均衡">¶</a>DNS 负载均衡</h4>
<p>多机房部署，就近访问。可以查看google的dns配置 ： <code>dig google.cn</code> 可以产看 <code>google.cn</code> 的域名后面配置的<code>IP</code></p>
<h4 id="反响代理负载均衡"><a class="header-anchor" href="#反响代理负载均衡">¶</a>反响代理负载均衡</h4>
<p>工作在 http层（七层）常用 nginx做代理软件</p>
<h4 id="IP负载均衡"><a class="header-anchor" href="#IP负载均衡">¶</a>IP负载均衡</h4>
<p>工作在 传输层 (四层转发负载) ，通过转发ip数据包方式，缺点是所有数据均要通过负载机器，负载机器的网络带宽会逐渐成为瓶颈</p>
<h4 id="LVS"><a class="header-anchor" href="#LVS">¶</a>LVS</h4>
<p>工作在 数据链路层（二层）通过虚拟IP转发webserver,2⃣webserver处理完成后直接响应给客户端</p>
<h3 id="负载均衡常见策略"><a class="header-anchor" href="#负载均衡常见策略">¶</a>负载均衡常见策略</h3>
<ul>
<li>轮询</li>
<li>加权轮询</li>
<li>最小链接数</li>
<li>ip hash</li>
</ul>
]]></content>
      <tags>
        <tag>大型网站</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql锁机制</title>
    <url>/2017/04/11/mysql/</url>
    <content><![CDATA[<h1>锁机制用于管理对共享资源的并发访问，提供数据的完整性和一致性</h1>
<blockquote>
<p>读锁是共享的，不影响并发的读取，但是会阻塞写操作（当然这只是默认情况，可以通过修改配置，使其可以进行末尾插入），写锁是排他的，阻塞读和写。</p>
</blockquote>
<h3 id="行锁"><a class="header-anchor" href="#行锁">¶</a>行锁</h3>
<p>InnoDB行锁是通过给索引记录加锁来实现的，即：InnoDB会在它扫描到的每条索引记录上设置一个S或X锁，在MVCC模式下，简单的select语句不会加任何锁，除非手动添加。因此查询时，索引很重要 💯</p>
<h3 id="锁模式"><a class="header-anchor" href="#锁模式">¶</a>锁模式</h3>
<p>共享锁S(Shared Lock)： 允许事务使用该锁去读取<br>
加锁语句： select … lock in share mode (手动加锁)<br>
排它锁X(Exclusive Lock)： 允许事务使用该锁去update、insert或者delete<br>
加锁语句： insert … update … delete … select … for update (手动加锁)</p>
<h3 id="阻塞"><a class="header-anchor" href="#阻塞">¶</a>阻塞</h3>
<p>因为不同锁之间的兼容性关系，在有些时刻一个事务中的锁需要等待另一事务中的锁释放它所占有的资源，阻塞可以确保事务正常进行</p>
<h3 id="死锁"><a class="header-anchor" href="#死锁">¶</a>死锁</h3>
<p>指两个或两个以上的事务在执行过程中，因争夺资源而造成的一种互相等待的现象 除了超时机制外（innodb_lock_wait_timeout），InnoDB还采用了wait-for graph来进行死锁检测，若检测到死锁，InnoDB会选择回滚undo量最小的事务</p>
<span id="more"></span>
<h3 id="更新丢失"><a class="header-anchor" href="#更新丢失">¶</a>更新丢失</h3>
<p>由于并发问题，在事务内部未正确使用锁定导致的更新丢失问题 zhangshan --&gt; money = 20</p>
<table>
<thead>
<tr>
<th>Session A</th>
<th>SessionB</th>
</tr>
</thead>
<tbody>
<tr>
<td>begin <br> 查询money = 20 <br>select money from account where user=‘zhangshan’;</td>
<td></td>
</tr>
</tbody>
</table>
<pre><code>                &lt;br&gt;    |begin;&lt;br&gt;查询money = 20&lt;br&gt;select money from account where user='zhangshan';&lt;br&gt;
</code></pre>
<p>update account set money=money+10 where user=‘zhangshan’;<br>commit;  |  <br><br>
<br>            | 	update account set money=money+50 where user=‘zhangshan’;<br>commit;</p>
<p>最终的结果是：70，少加10<br>
解决办法：<br>
select … for update 锁定该条记录，加排它锁</p>
<hr>
<table>
<thead>
<tr>
<th>Session A</th>
<th>SessionB</th>
</tr>
</thead>
<tbody>
<tr>
<td>begin<br>对该条记录加排它锁X<br>查询money = 20<br>select money from account where user=‘zhangshan’ for update;</td>
<td></td>
</tr>
</tbody>
</table>
<pre><code>                &lt;br&gt;    |begin;&lt;br&gt;被阻塞，程序挂起，等待Session A完成&lt;br&gt;查询money = 20&lt;br&gt;select money from account where user='zhangshan' for update;&lt;br&gt;
</code></pre>
<p>update account set money=money+10 where user=‘zhangshan’;<br>commit;  |  <br><br>
<br>            |update account set money=money+50 where user=‘zhangshan’;<br>commit;</p>
<hr>
<h3 id="死锁产生的2种情况"><a class="header-anchor" href="#死锁产生的2种情况">¶</a>死锁产生的2种情况</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> CREATE TABLE b (</span><br><span class="line">    id int(11) NOT NULL,</span><br><span class="line">    uid int(11) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (id),</span><br><span class="line">    KEY uid (uid)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>id</th>
<th>uid</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>10</td>
</tr>
<tr>
<td>2</td>
<td>20</td>
</tr>
<tr>
<td>3</td>
<td>30</td>
</tr>
<tr>
<td>4</td>
<td>40</td>
</tr>
</tbody>
</table>
<h4 id="第一种情况：区间死锁（目前最多的情况）"><a class="header-anchor" href="#第一种情况：区间死锁（目前最多的情况）">¶</a>第一种情况：区间死锁（目前最多的情况）</h4>
<table>
<thead>
<tr>
<th>Session A</th>
<th>SessionB</th>
</tr>
</thead>
<tbody>
<tr>
<td>begin;<br>使用辅助索引筛选时，此时使用Next-key算法锁定区间为:(11,55)<br>select * from b where uid=22 for update;</td>
<td></td>
</tr>
</tbody>
</table>
<pre><code>                &lt;br&gt;    |begin;&lt;br&gt;此时Session B被阻塞&lt;br&gt;select * from b where uid&lt;22 for update;&lt;br&gt;
</code></pre>
<p>插入成功…<br>insert into b values(9,20);<br>commit;  |  <br><br>
<br>            |死锁出现<br>Deadlock found，try restarting transaction<br>rollback;</p>
<h4 id="第二种情况：不同记录锁定"><a class="header-anchor" href="#第二种情况：不同记录锁定">¶</a>第二种情况：不同记录锁定</h4>
<table>
<thead>
<tr>
<th>Session A</th>
<th>SessionB</th>
</tr>
</thead>
<tbody>
<tr>
<td>begin;<br>id为主键，使用Record Lock算法锁定锁定id=5该行记录<br>select * from b where id = 5 for update;</td>
<td></td>
</tr>
</tbody>
</table>
<pre><code>                &lt;br&gt;    |begin;&lt;br&gt;同理&lt;br&gt;select * from b where id=8 for update;&lt;br&gt;
</code></pre>
<p>select * from b where id = 8 for update;  |  <br><br>
<br>            |死锁出现<br>select * from b where id=5 for update;<br>Deadlock found，try restarting transaction;<br>
commit  |<br><br>
<br> | rollback;</p>
<hr>
<h3 id="如何避免阻塞和死锁："><a class="header-anchor" href="#如何避免阻塞和死锁：">¶</a>如何避免阻塞和死锁：</h3>
<p>update时，尽量使用主键或辅助索引作为where条件，切勿不使用索引进行查询，否则全表锁定<br>
跑脚本或者批量任务时，每次只对一条数据加事务处理，切勿将一个大循环包裹在一个事务里面<br>
严禁在update语句里面封装子查询，select语句，update … set … where …就ok，其他的由程序处理<br>
养成良好的事务习惯，事务一定要进行commit或rollback操作<br>
涉及到修改同一张表数据的定时任务，应该间隔一定的时间，避免出现死锁<br>
减少锁定范围，在跑定时任务时，筛选数据时，尤其是日期范围的，请务必使用between … and … 而不是end_time &lt; now()</p>
<h3 id="隐式转换-v2"><a class="header-anchor" href="#隐式转换-v2">¶</a>隐式转换</h3>
<ol>
<li>查询时，类型不对，导致类型转换，结果不对<br>
mysql&gt; select * from test_2 where name=0;</li>
</ol>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
</table>
<pre><code>    1        | lhw
    2        | cxx
    3        | 0
</code></pre>
<p>分析：很多开发在书写sql时，没有考虑到传入到数据库的值的类型，比如：上面name类型为char，而传入查询时，却输入的是0，而不是’0’<br>
结果：mysql对匹配到行的字符串进行了类型转换，发现转换非法，转换成了0<br>
注意：在查询时检查传入的查询条件类型</p>
<ol start="2">
<li>全表扫描，查询慢<br>
mysql&gt; explain select * from xboss_account where mobile=15510337665;<br>
<img src="http://o8979n2hu.bkt.clouddn.com/extra.png" alt="此处输入图片的描述"></li>
</ol>
<p>分析：mobile字段类型为char(11)，查询时，应该使用mobile=‘15510337665’<br>
注意：在php端书写sql时，应正确传入查询值的类型<br>
正确使用类型转换，防止SQL注入，其它的类型转换，感兴趣的可以自己研究，如：<code>select '11aa' + 11,select a+1，select '1'+1</code>等</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Mysql的一些总结</title>
    <url>/2017/04/10/Mysql-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>🐛</p>
<h3 id="事务概念："><a class="header-anchor" href="#事务概念：">¶</a>事务概念：</h3>
<p>事务是由一组SQL组成，可以认为是一个执行单元，在事务中，所有操作要么全部成功，要么全部回滚，建表统一使用InnoDB存储引擎</p>
<hr>
<h3 id="事务的ACID的特性："><a class="header-anchor" href="#事务的ACID的特性：">¶</a>事务的ACID的特性：</h3>
<p>原子性(atomicity): 事务中的所有操作要么全部提交成功，要么全部失败回滚一致性(consistency): 在事务开始和完成时，数据都必须保持一致状态隔离性(isolation): 一个事务所做的修改在提交之前对其它事务是不可见的持久性(durability):一旦事务提交，其所做的修改便会永久保存在数据库中</p>
<hr>
<h3 id="事务使用场景："><a class="header-anchor" href="#事务使用场景：">¶</a>事务使用场景：</h3>
<p>例如一个金融平台，凡是涉及到核心业务，比如：金额、积分等操作都必须使用事务，事务保证了数据的一致性和完整性</p>
<p>比如用户购买，此时需要使用事务，同时需要使用select … for update进行数据验证，确保数据的一致性和完整性</p>
<hr>
<h3 id="不需要使用事务的场景："><a class="header-anchor" href="#不需要使用事务的场景：">¶</a>不需要使用事务的场景：</h3>
<p>用户登录<br>
用户资产，钱包，积分等查询，允许一定的延时<br>
凡是不涉及到交易的查询</p>
<hr>
<h3 id="NULL的问题"><a class="header-anchor" href="#NULL的问题">¶</a>NULL的问题</h3>
<p>NULL：可以插入空值或NULL，NULL会占用数据库空间，数据库会请求额外的空间记录该行为NULL</p>
<p>NOT NULL：不可以插入NULL，可以插入空值，空值不占用数据库空间</p>
<p>NULL占用空间，空值不占用空间，B树索引不会存储NULL值，如果索引字段可以为NULL，则效率下降很多</p>
<p>通常字段设置(NOT NULL) 如时间字段 NOT NULL DEFAULT 0000-00 00:00:00</p>
<span id="more"></span>
<p>任何数值的运算和字符组合，结果都是NULL</p>
<p><code>mysql&gt; select 1+NULL, CONCAT('Invisible',NULL);</code></p>
<table>
<thead>
<tr>
<th>1+NULL</th>
<th>CONCAT(‘Invisible’,NULL)</th>
</tr>
</thead>
<tbody>
<tr>
<td>NUL</td>
<td>NULL</td>
</tr>
</tbody>
</table>
<p>NULL允许插入和NULL，查询时容易产生歧义<br>
<code>mysql&gt; select * from test_1 where name &lt;&gt; ;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>lhw</td>
</tr>
</tbody>
</table>
<p><code>mysql&gt; select * from test_1 where name is not null;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>lhw</td>
</tr>
<tr>
<td>2</td>
<td></td>
</tr>
</tbody>
</table>
<p>count问题，忽略非主键外的null值<br>
<code>mysql&gt; select count(1),count(name) from test_1;</code></p>
<table>
<thead>
<tr>
<th>count(1)</th>
<th>count(name)</th>
</tr>
</thead>
<tbody>
<tr>
<td>6</td>
<td>3</td>
</tr>
</tbody>
</table>
<p>排序问题<br>
在order by排序的时候，如果存在NULL值，那么NULL是最小的，ASC正序排序的话，NULL值是在最前面的 <code>mysql&gt; select * from test_1 order by name asc;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>create_at</th>
</tr>
</thead>
<tbody>
<tr>
<td>3</td>
<td>null</td>
<td>null</td>
</tr>
<tr>
<td>2</td>
<td></td>
<td>null</td>
</tr>
<tr>
<td>5</td>
<td>lhw</td>
<td>null</td>
</tr>
</tbody>
</table>
<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select * from test_1 order by isnull(name) asc;</span><br><span class="line">select *,name is null as username from test_1 order by username asc;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="流控制函数"><a class="header-anchor" href="#流控制函数">¶</a>流控制函数</h3>
<h3 id="case语法："><a class="header-anchor" href="#case语法：">¶</a>case语法：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CASE value WHEN [compare_value] THEN result [WHEN [compare_value] THEN result ...] [ELSE result] END</span><br><span class="line"></span><br><span class="line">&lt;=等价于=&gt;</span><br><span class="line"></span><br><span class="line">CASE WHEN [condition] THEN result [WHEN [condition] THEN result ...] [ELSE result] END</span><br></pre></td></tr></table></figure>
<h3 id="if语法："><a class="header-anchor" href="#if语法：">¶</a>if语法：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IF(expr1,expr2,expr3)</span><br><span class="line"></span><br><span class="line">如果expr1为True，返回expr2，否则返回expr3</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="ifnull语法："><a class="header-anchor" href="#ifnull语法：">¶</a>ifnull语法：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IFNULL(expr1,expr2)</span><br><span class="line"></span><br><span class="line">如果expr1为null，返回expr2</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="nullif语法："><a class="header-anchor" href="#nullif语法：">¶</a>nullif语法：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NULLIF(expr1,expr2)</span><br><span class="line"></span><br><span class="line">如果expr1=expr2，返回null，否则返回expr1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="隐式转换"><a class="header-anchor" href="#隐式转换">¶</a>隐式转换</h3>
<p>查询时，类型不对，导致类型转换，结果不对<br>
<code>mysql&gt; select * from test_2 where name=0;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>lhw</td>
</tr>
<tr>
<td>2</td>
<td>cxx</td>
</tr>
<tr>
<td>3</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>分析：很多开发在书写sql时，没有考虑到传入到数据库的值的类型，比如：上面name类型为char，而传入查询时，却输入的是0，而不是’0’<br>
结果：mysql对匹配到行的字符串进行了类型转换，发现转换非法，转换成了0<br>
注意：在查询时检查传入的查询条件类型</p>
<p>全表扫描，查询慢<br>
<code>mysql&gt; explain select * from xboss_account where mobile=15510337665;</code></p>
<p>分析：mobile字段类型为char(11)，查询时，应该使用mobile=‘15510337665’<br>
注意：在php端书写sql时，应正确传入查询值的类型<br>
正确使用类型转换，防止SQL注入，其它的类型转换，感兴趣的可以自己研究，如：select ‘11aa’ + 11,select a+1，select ‘1’+1等</p>
<hr>
<h3 id="Group-by"><a class="header-anchor" href="#Group-by">¶</a>Group by</h3>
<p>group by一般和聚合函数一起使用才有意义，在MySQL5.7引入了ONLY_FULL_GROUP_BY对语法合法性进行检测</p>
<p>使用group by的两个要素：<br>
出现在select后面的字段，要么是聚合函数中的，要么就是group by中的，若是该字段既不出现在聚合函数中，也不出现在后面的group by中，则该条select语句是错误的<br>
若是需要筛选结果，可以先使用where，再用group by；或者先用group by，再用having</p>
<p>为什么要求使用聚合函数：<br>
在未使用聚合函数的情况下，如果group by后面的字段不唯一，则会出现查询出来的数据不对</p>
<hr>
<h3 id="Sql-mode问题"><a class="header-anchor" href="#Sql-mode问题">¶</a>Sql mode问题</h3>
<p>sql_mode通过检测sql的合法性来保证数据的一致性</p>
<p>常用到的设置：<br>
STRICT_TRANS_TABLES<br>
如果不能将给定的值插入到事务表中，则放弃该语句，对于非事务表，如果出现在单行语句或多行语句的第一行，则放弃该语句</p>
<p>NO_ENGINE_SUBSTITUTION<br>
当使用create table或者alter table时，自动控制替换存储引擎</p>
<p>ONLY_FULL_GROUP_BY<br>
实现sql语句合法性检测<br>
对于group by column表达式，select列必须使用聚合函数，否则报错，如：<br>
<code>select group_concat(id1),id2 from test_1 group by id2;</code></p>
<hr>
<h3 id="没有开启严格模式，引起的问题："><a class="header-anchor" href="#没有开启严格模式，引起的问题：">¶</a>没有开启严格模式，引起的问题：</h3>
<p>一 比如：freeze_score不为负数，即：unsigned<br>
update <code>xboss_integrals</code> set <code>freeze_score</code> = 500-1000, <code>updated_at</code> = ‘2016-07-04 16:51:20’ where <code>id</code> = ‘562’;<br>
此时freeze_score会被设置为0，warning警告不会被返回给api端，导致数据不一致</p>
<p>二 比如：mobile字段为int(11)<br>
update zz set phone=‘188qwewq’ where id=8;<br>
此时phone字段会被设置为188，warning警告不会被返回给api端，导致数据不一致</p>
<hr>
<h3 id="JOIN语法"><a class="header-anchor" href="#JOIN语法">¶</a>JOIN语法</h3>
<p>此处只说MySQL最常用的两种join类型，inner join 和 {LEFT|RIGHT} [OUTER] join<br>
在MySQL中的JOIN，CROSS JOIN和INNER JOIN和’,'在句法上相同,可以互相替换使用。但是在标准的SQL中，它们是不同的</p>
<p>inner join(内连接)：<br>
将A表和B表中存在连接关系的字段，组成的结果集(A表和B表的交集)</p>
<p>left join(左连接,属于外连接):<br>
以左表为准，去右表找数据，如果没有匹配的数据，则以null补位右表的数据，所以输出结果数为左表原数据集(right join同理)</p>
<p>tips：left join 可以转换为 inner join</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select * from a inner join b on a.id=b.id;</span><br><span class="line">&lt;==&gt;</span><br><span class="line">select * from a left join b on a.id=b.id <span class="built_in">where</span> b.id is not null;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="常用字符处理函数"><a class="header-anchor" href="#常用字符处理函数">¶</a>常用字符处理函数</h3>
<p><code>concat(str1,str2,...)</code><br>
把给定字符串合并为一个字符串,适用于多个数据列<br>
<code>select concat(firstname,lastname) as fullname from user;</code></p>
<hr>
<p><code>concat_ws(separator,str1,str2,...)</code><br>
使用指定的分隔符将给定的字符串或列合并为一个字符串<br>
<code>select concat_ws('-',id,name) from pp;</code></p>
<hr>
<p><code>ELT(N,str1,str2,str3,...)</code><br>
返回字符串列表的第几个元素，当N为1时，返回str1，为2时，返回str2，当N大于字符串列表长度时，返回NULL<br>
<code>select elt(2,'hello','world');</code><br>
–&gt;world</p>
<hr>
<p><code>SUBSTRING(str,pos),SUBSTRING(strFROMpos),SUBSTRING(str,pos,len),</code> <code>SUBSTRING(str FROM pos FOR len)</code><br>
截取字符串，默认起始位置为1，结束位置为-1</p>
<p>从第五个字符开始截取<br>
<code>SELECT SUBSTRING('Quadratically',5);</code><br>
–&gt;ratically</p>
<p>从第四个字符开始截取<br>
<code>SELECT SUBSTRING('foobarbar' FROM 4);</code><br>
–&gt;barbar</p>
<p>从第五个字符开始截取，截取长度为6个字符<br>
<code>SELECT SUBSTRING('Quadratically',5,6);</code><br>
–&gt;ratica</p>
<p>从倒数第三个字符截取<br>
<code>SELECT SUBSTRING('Sakila', -3);</code><br>
–&gt;ila</p>
<p>从倒数第4个字符开始，截取长度为2个字符<br>
<code>SELECT SUBSTRING('Sakila' FROM -4 FOR 2);</code><br>
–&gt;ki</p>
<hr>
<p><code>substring_index(str,delim,count)</code><br>
截取字符串，<code>substring_index('www.mysql.com','.',2)</code>，以逗号分隔，截取：www.mysql</p>
<p><code>select substring_index(sitename,'.',-2) from siteinfo where id=2;</code> 截取结果为:mysql.com</p>
<hr>
<p><code>mid(str,pos,len)</code>截取字符串,<code>mid('helloworld',7,12)</code>，截取第7个到第12个字符之间的字符串，结果为：world<br>
<code>select mid(username,6,5) from userinfo;</code></p>
<hr>
<p><code>left(str,len)&lt;=&gt;right(str,len)</code><br>
截取字符串，<code>left('hello world',5)</code>，截取左边5个字符<br>
<code>select right(username,5) from userinfo;</code></p>
<hr>
<p><code>replace(str,from_str,to_str)</code><br>
替换字符串<br>
将username列中的zhang姓全部改为li姓<br>
<code>update user set username=replace(username,'zhang','li');</code></p>
<hr>
<p><code>instr(str,substr)</code><br>
返回指定字符在字符串中的位置，<code>instr('welcome you baby,','you'),</code>返回位置为：9<br>
<code>select instr(username,'shan') as pos from userinfo where uid=1;</code></p>
<hr>
<p><code>find_in_set(str,strlist)</code><br>
返回字符串在字符串列表中的位置，字符串列表必须以逗号’,'分隔，起始值为：1<br>
<code>select find_in_set('shi','wo,shi,chinese') as pos;</code> 返回值为2</p>
<hr>
<p><code>TRIM([&#123;BOTH | LEADING | TRAILING&#125; [remstr] FROM] str), TRIM([remstr FROM] str)</code><br>
移除指定的字符，both表示前后，leading：前面，trailing：后面<br>
移除字符串前后的空格，如果不指定，默认为both，移除空格<br>
<code>select trim(' bar ');</code><br>
–&gt;bar</p>
<hr>
<p>移除字符串前面的x<br>
<code>SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');</code><br>
–&gt;barxxx</p>
<hr>
<p>移除字符串中的x<br>
<code>SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');</code><br>
–&gt;bar</p>
<hr>
<p>移除字符串后面的xyz<br>
<code>SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');</code><br>
–&gt;barx</p>
<h3 id="常用时间函数"><a class="header-anchor" href="#常用时间函数">¶</a>常用时间函数</h3>
<p>CURDATE(),CURTIME()<br>
以’YYYY-MM-DD’格式返回当前日期<br>
select curdate();<br>
–&gt;2016-07-05</p>
<hr>
<p>以’YYYYMMDD’格式返回当前日期，+0表示+0天<br>
select curdate()+0;<br>
–&gt;20160705</p>
<hr>
<p>以’HH:MM:SS’格式返回当前时间<br>
select curtime();<br>
–&gt;15:17:30</p>
<hr>
<p>以’HHMMSS’格式返回当前时间,+0表示+0秒<br>
select curtime()+0;<br>
–&gt;151855</p>
<hr>
<p>DATE(),TIME()<br>
返回时间表达式的日期部分<br>
select date(now());<br>
–&gt;2016-07-05</p>
<hr>
<p>返回时间表达式的时间部分<br>
select time(now());<br>
–&gt;15:14:16</p>
<hr>
<p>DATEDIFF(expr1,expr2),TIMEDIFF(expr1,expr2)<br>
返回expr1-expr2相差的天数，忽略时间部分<br>
select datediff(now(),‘2016-6-12 12:00:00’);<br>
–&gt;23</p>
<hr>
<p>返回expr1-expr2相差的时间<br>
select timediff(now(),‘2016-6-12 12:00:00’);<br>
–&gt;555:24:52</p>
<hr>
<p>FROM_UNIXTIME(unix_timestamp),FROM_UNIXTIME(unix_timestamp,format)<br>
格式化unix时间戳成’YYYY-MM-DD HH:MM:SS’ or YYYYMMDDHHMMSS格式</p>
<p>select from_unixtime(1467703739,‘%Y %M %D %h:%i:%s’)<br>
–&gt;2016 July 5th 03:28:59</p>
<p>select from_unixtime(1467703739);<br>
–&gt;2016-07-05 15:28:59</p>
<hr>
<p>TIMESTAMP(expr),TIMESTAMP(expr1,expr2)<br>
当一个参数时，格式化为datetime类型，当为2个参数时，expr2将会对expr1的日期或时间部分进行相加</p>
<p>select timestamp(‘2016-07-03’);<br>
–&gt;2016-07-03 00:00:00</p>
<p>SELECT TIMESTAMP(‘2003-12-31 12:00:00’,‘09:00:00’);<br>
–&gt;2003-12-31 21:00:00</p>
<hr>
<p>UNIX_TIMESTAMP()返回unix时间戳</p>
<p>select unix_timestamp(‘2015-08-12 13:57:51’);<br>
–&gt;1439359071</p>
<p>DATE_FORMAT(date,format)，TIME_FORMAT(time,format)<br>
格式化date成指定类型</p>
<p>select date_format(now(),‘%Y-%m-%d’);<br>
–&gt;2016-07-05</p>
<hr>
<p>DATE_ADD(date,INTERVAL expr unit), DATE_SUB(date,INTERVAL expr unit)<br>
时间加减</p>
<p>加10分钟<br>
select date_add(now(), interval 10 minute);<br>
–&gt;2016-07-05 15:57:17</p>
<p>减10分钟<br>
select date_sub(now(), interval 10 minute);<br>
–&gt;2016-07-05 15:37:47</p>
<p>设置时间为24小时之前<br>
set @time_before_24= (select date_sub(now(),interval 24 hour));</p>
<h3 id="架构组件"><a class="header-anchor" href="#架构组件">¶</a>架构组件</h3>
<h3 id="MaxScale"><a class="header-anchor" href="#MaxScale">¶</a>MaxScale</h3>
<ol>
<li>自动读写分离</li>
<li>自动剔除延迟超过30s的从库</li>
<li>读负载</li>
<li>最小化宕机时间</li>
</ol>
<h3 id="MHA"><a class="header-anchor" href="#MHA">¶</a>MHA</h3>
<ol start="5">
<li>自动故障探测，恢复</li>
<li>差异日志应用，保证数据一致性</li>
</ol>
<h3 id="Pacemaker-Corosync"><a class="header-anchor" href="#Pacemaker-Corosync">¶</a>Pacemaker + Corosync</h3>
<ol start="7">
<li>提供心跳检测和自动故障切换，保证MaxScale的高可用</li>
</ol>
<h3 id="Box-Anemometer"><a class="header-anchor" href="#Box-Anemometer">¶</a>Box Anemometer</h3>
<ol start="8">
<li>慢查询分析系统，每5分钟自动采集慢查询日志并汇总</li>
</ol>
<h3 id="Binlog-Server"><a class="header-anchor" href="#Binlog-Server">¶</a>Binlog Server</h3>
<ol>
<li>负责中继Binlog，并加密复制给海口机房</li>
</ol>
<h3 id="数据安全"><a class="header-anchor" href="#数据安全">¶</a>数据安全</h3>
<h3 id="数据审核"><a class="header-anchor" href="#数据审核">¶</a>数据审核</h3>
<p>明御数据库审计与风险控制系统提供准实时的数据操作审核记录</p>
<h3 id="数据备份"><a class="header-anchor" href="#数据备份">¶</a>数据备份</h3>
<ol>
<li>每天全量备份并加密</li>
<li>每天单表备份并加密</li>
<li>实时binlog增量备份</li>
<li>灾备系统</li>
</ol>
<!-- http://o8979n2hu.bkt.clouddn.com/JBH%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%B6%E6%9E%84-v2.png -->
<h3 id="Sphinx"><a class="header-anchor" href="#Sphinx">¶</a>Sphinx</h3>
<h3 id="规范"><a class="header-anchor" href="#规范">¶</a>规范</h3>
<ol>
<li>手机号：长度&gt;=7个字符</li>
<li>姓名：长度&gt;=2个字符</li>
<li>模糊查询结果统一最大取1W：limit=10000,maxmatches=10000</li>
</ol>
<p>表：<code>xboss_sphinx_counts</code></p>
<ol>
<li>解决后台分页（包含where条件的count，请直接去原库查询），例句：<br>
<code>select count(*) from xboss_account;</code></li>
<li>已支持表：<br>
<code>xboss_account,xboss_user_orders</code></li>
<li>例子（需要对xboss_account表进行count，并计算后台显示页数）：<br>
<code>select table_rows from xboss_sphinx_counts where query='*xboss_account*'; </code><br>
xboss_account必须跟上*号</li>
</ol>
<p>表：<code>xboss_account_sphinx</code></p>
<ol>
<li>解决模糊查询和模糊join查询：</li>
</ol>
<p>索引xboss_account表的true_name，mobile字段</p>
<h3 id="SphinxSE-SQL语法："><a class="header-anchor" href="#SphinxSE-SQL语法：">¶</a>SphinxSE SQL语法：</h3>
<p>语法：limit,offet,maxmatches</p>
<p>limit默认为20，offset默认为0，maxmatches默认为1000（rows）<br>
例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select * from xboss_account_sphinx <span class="built_in">where</span> query=<span class="string">&#x27;*18810*;limit=2000;maxmatches=100&#x27;</span>;</span><br><span class="line"></span><br><span class="line">--&gt;输出100行结果</span><br><span class="line"></span><br><span class="line">select * from xboss_account_sphinx <span class="built_in">where</span> query=<span class="string">&#x27;*18810*;limit=2000&#x27;</span>;</span><br><span class="line"></span><br><span class="line">--&gt;输出1000行结果</span><br></pre></td></tr></table></figure>
<hr>
<p>引用索引字段</p>
<ol>
<li>'@'引用索引字段,如：@mobile，@true_name，| 表示 and，必须加上：mode=extended</li>
<li>如果没有指定，则检索所有的索引字段</li>
<li>下面查询true_name包含‘付’，且手机号包含‘18622’的用户</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select b.true_name,b.mobile  from xboss_account_sphinx a join xboss_account b on a.uid=b.uid <span class="built_in">where</span> b.is_auth=<span class="string">&#x27;1&#x27;</span> and a.query=<span class="string">&#x27;@mobile *18622* | @true_name  *付*;mode=extended;limit=10000;maxmatches=10000&#x27;</span> <span class="built_in">limit</span> 15 offset 0;</span><br></pre></td></tr></table></figure>
<hr>
<p>filter</p>
<ol>
<li>filter 只支持int类型</li>
<li>采用filter=字段名称,值就相当于where中的字段名=值，filter提到的字段必须在sphinx的source部分的字段属性定义中定义</li>
<li>例句：查询is_auth为1的用户，不等于：!filter=is_auth,1，范围：filter=is_auth,1,2,3</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select b.true_name,b.mobile,b.created_at,b.updated_at  from xboss_account_sphinx a join xboss_account b on a.uid=b.uid <span class="built_in">where</span> a.query=<span class="string">&#x27;@mobile *18622* | @true_name *付*;mode=extended;limit=10000;maxmatches=10000;filter=is_auth,1&#x27;</span> order by b.created_at <span class="built_in">limit</span> 15 offset 0;</span><br></pre></td></tr></table></figure>
<h3 id="分页（在外部实现）"><a class="header-anchor" href="#分页（在外部实现）">¶</a>分页（在外部实现）</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select a.*,b.mobile,b.true_name from xboss_wallet_records a join xboss_account b join xboss_account_sphinx c on a.uid = b.uid and a.uid = c.uid <span class="built_in">where</span> a.`type_new` != <span class="string">&#x27;4&#x27;</span> and c.query=<span class="string">&#x27;*1881048*;limit=10000;maxmatches=10000&#x27;</span> order by a.id desc <span class="built_in">limit</span> 15 offset 0;</span><br></pre></td></tr></table></figure>
<h3 id="and或or查询"><a class="header-anchor" href="#and或or查询">¶</a>and或or查询</h3>
<p>and查询，用|分隔</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> names utf8;</span><br><span class="line"></span><br><span class="line">select * from xboss_account_sphinx a join xboss_wallet_records b on a.uid=b.uid <span class="built_in">where</span> a.query=<span class="string">&#x27;@mobile *18622* | @true_name *付*;mode=extended;limit=10000;maxmatches=10000&#x27;</span>\G;</span><br></pre></td></tr></table></figure>
<h3 id="or查询"><a class="header-anchor" href="#or查询">¶</a>or查询</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select b.username from xboss_account_sphinx a join xboss_wallet_records b on a.uid=b.uid <span class="built_in">where</span> a.query =<span class="string">&#x27;*1881048*;limit=10000;maxmatches=10000&#x27;</span> or a.query=<span class="string">&#x27;*付*;limit=10000;maxmatches=10000&#x27;</span>\G;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行下mysql事务控制方法</title>
    <url>/2017/04/10/Mysql-item-%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<p>查看mysql系统的事务隔离级别 ☺️</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT @@global.tx_isolation;</span><br><span class="line">+-----------------------+</span><br><span class="line">| @@global.tx_isolation |</span><br><span class="line">+-----------------------+</span><br><span class="line">| REPEATABLE-READ       |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看mysql会话的事务隔离级别</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT @@tx_isolation;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+-----------------+</span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @@session.tx_isolation;</span><br><span class="line">+------------------------+</span><br><span class="line">| @@session.tx_isolation |</span><br><span class="line">+------------------------+</span><br><span class="line">| REPEATABLE-READ        |</span><br><span class="line">+------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>设置系统的事务隔离级别</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global transaction isolation level <span class="built_in">read</span> committed;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @@global.tx_isolation;</span><br><span class="line">+-----------------------+</span><br><span class="line">| @@global.tx_isolation |</span><br><span class="line">+-----------------------+</span><br><span class="line">| READ-COMMITTED        |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @@tx_isolation;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+-----------------+</span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>设置会话的事务隔离级别</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> session transaction isolation level <span class="built_in">read</span> committed;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @@global.tx_isolation;</span><br><span class="line">+-----------------------+</span><br><span class="line">| @@global.tx_isolation |</span><br><span class="line">+-----------------------+</span><br><span class="line">| READ-COMMITTED        |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @@tx_isolation;</span><br><span class="line">+----------------+</span><br><span class="line">| @@tx_isolation |</span><br><span class="line">+----------------+</span><br><span class="line">| READ-COMMITTED |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>mysql默认是自动提交事务的，查看autocommit变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@autocommit;</span><br><span class="line">+--------------+</span><br><span class="line">| @@autocommit |</span><br><span class="line">+--------------+</span><br><span class="line">|            1 |</span><br><span class="line">+--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>设置mysql不自动提交事务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> autocommit = 0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@autocommit;</span><br><span class="line">+--------------+</span><br><span class="line">| @@autocommit |</span><br><span class="line">+--------------+</span><br><span class="line">|            0 |</span><br><span class="line">+--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>使用rollback回滚事务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from t1;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values (51, 3000);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+----+------+</span><br><span class="line">| a  | b    |</span><br><span class="line">+----+------+</span><br><span class="line">| 51 | 3000 |</span><br><span class="line">+----+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; rollback;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>使用start transaction;或begin;显示的开启一个事务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; start transaction;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values (51, 3000);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+----+------+</span><br><span class="line">| a  | b    |</span><br><span class="line">+----+------+</span><br><span class="line">| 51 | 3000 |</span><br><span class="line">+----+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; rollback;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; commit;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用savepoint在事务中创建一个保存点（可以在一个事务中创建多个保存点）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values (51, 3000);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+----+------+</span><br><span class="line">| a  | b    |</span><br><span class="line">+----+------+</span><br><span class="line">| 51 | 3000 |</span><br><span class="line">+----+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; savepoint tx1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values (52, 3000);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+----+------+</span><br><span class="line">| a  | b    |</span><br><span class="line">+----+------+</span><br><span class="line">| 51 | 3000 |</span><br><span class="line">| 52 | 3000 |</span><br><span class="line">+----+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; rollback to tx1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+----+------+</span><br><span class="line">| a  | b    |</span><br><span class="line">+----+------+</span><br><span class="line">| 51 | 3000 |</span><br><span class="line">+----+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; commit;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以上是mysql命令行是对事务隔离级别和事务提交的基本操作。现在说明以下操作基于可重复复读的隔离级别，事务不自动提交。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global transaction isolation level repeatable <span class="built_in">read</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> session transaction isolation level repeatable <span class="built_in">read</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> autocommit = 0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 变量和数据类型</title>
    <url>/2017/04/10/java-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="变量-😜"><a class="header-anchor" href="#变量-😜">¶</a>变量 😜</h3>
<ul>
<li>变量可以持有基本类型或指向某个对象</li>
<li>变量必须先定义后使用</li>
<li>定义变量</li>
<li>变量可以被赋值，还可以被重新赋值</li>
<li>等号<code>=</code>是赋值，不是数学的相等</li>
</ul>
<h3 id="Eclipse-Debug"><a class="header-anchor" href="#Eclipse-Debug">¶</a>Eclipse Debug</h3>
<p>进入调试模式后可以设置断点后单步执行</p>
<h3 id="数据类型"><a class="header-anchor" href="#数据类型">¶</a>数据类型</h3>
<ul>
<li>整数类型：byte，short，int，long</li>
<li>浮点类型：float，double</li>
<li>字符类型：char</li>
<li>布尔类型：boolean</li>
</ul>
<h3 id="常量"><a class="header-anchor" href="#常量">¶</a>常量</h3>
<ul>
<li>用final定义</li>
<li>通常全部大写</li>
<li>避免magic number</li>
</ul>
<h3 id="计算机内存地址"><a class="header-anchor" href="#计算机内存地址">¶</a>计算机内存地址</h3>
<p>如下图所示，每个内存正好存一个字节，算一下如果你有16G内存，大概有多少字节呢.</p>
<p><img src="http://omduc9pze.bkt.clouddn.com/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="计算机内存地址"></p>
<p>java中,整型所对应内存的字节数如下图</p>
<p><img src="http://omduc9pze.bkt.clouddn.com/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AF%B9%E5%BA%94%E5%86%85%E5%AD%98.jpg" alt="java内存地址"></p>
<h3 id="整型的范围"><a class="header-anchor" href="#整型的范围">¶</a>整型的范围</h3>
<p>java 的整型是带符号的，注意要声明为long整型的时候要在后面加上L，否则是int类型，如下图</p>
<p><img src="http://omduc9pze.bkt.clouddn.com/java%E6%95%B4%E5%9E%8B.jpg" alt="java整型值范围"></p>
<span id="more"></span>
<h3 id="浮点数"><a class="header-anchor" href="#浮点数">¶</a>浮点数</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> money = <span class="number">100.12f</span> <span class="comment">// 结尾加f</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.79e4</span></span><br></pre></td></tr></table></figure>
<h3 id="字符类型"><a class="header-anchor" href="#字符类型">¶</a>字符类型</h3>
<p>注意字符类型和字符串类型的区别：字符类型用单引号，并且只有一个字符。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span> ;</span><br><span class="line"><span class="keyword">char</span> b = <span class="string">&#x27;李&#x27;</span>；</span><br></pre></td></tr></table></figure>
<h3 id="二进制和十六进制表示整形的方式"><a class="header-anchor" href="#二进制和十六进制表示整形的方式">¶</a>二进制和十六进制表示整形的方式</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i3 = <span class="number">2_000_000_000</span>;</span><br><span class="line"><span class="keyword">int</span> i4 = <span class="number">0xff0000</span>; <span class="comment">// 十六进制表示的十进制16711680</span></span><br><span class="line"><span class="keyword">int</span> i5 = <span class="number">0b1000000000</span>; <span class="comment">// 二进制表示的十进制512</span></span><br></pre></td></tr></table></figure>
<p>如果要输出一个以16进制表示的整型，或者以二进制表示的整型，可以使用JDK提供的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 输出以十六进制表示的整型的字符串：</span></span><br><span class="line">System.out.println(Integer.toHexString(<span class="number">12345678</span>)); <span class="comment">// bc614e</span></span><br><span class="line"><span class="comment">// 输出以二进制表示的整型的字符串：</span></span><br><span class="line">System.out.println(Integer.toBinaryString(<span class="number">12345678</span>)); <span class="comment">// 101111000110000101001110</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="常量-v2"><a class="header-anchor" href="#常量-v2">¶</a>常量</h3>
<p>不管PHP 还是 JAVA,许多可以避免硬编码的地方都可以用常亮去修饰，这样可以使我们更好地去理解程序的意图</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>大型网站技术篇之容量估算和负载的查看</title>
    <url>/2017/04/09/large-website/</url>
    <content><![CDATA[<h3 id="✍️大型网站具有的特点"><a class="header-anchor" href="#✍️大型网站具有的特点">¶</a>✍️大型网站具有的特点</h3>
<ul>
<li>海量数据（大数据）</li>
<li>高并发 大流量</li>
<li>高可用 7*24 小时不断服务, 五个9级别 (99.999)</li>
<li>频频迭代，需求多</li>
</ul>
<h3 id="✍️容量估算和负载查看"><a class="header-anchor" href="#✍️容量估算和负载查看">¶</a>✍️容量估算和负载查看</h3>
<p>容量：数据量，并发量，带宽，CPU 等</p>
<p>容量评估的简单步骤和方法：</p>
<ul>
<li>评估总访问量，结合市场及运营活动等评估</li>
<li>评估平局访问量QPS</li>
<li>评估高峰QPS，一般是平均QPS的2倍</li>
<li>系统压测如用apache的 ab等，单机极限QPS，拿高峰的QPS和单机压测的QPS比对一下。</li>
<li>计算容量</li>
</ul>
<p>负载：系统的繁忙程度，即有多少进程等cpu调度</p>
<p>top命令：过去1分钟，5分钟，10分钟的负载值</p>
<p>Load Avg: 1.61, 1.79, 1.64  CPU usage: 1.96% user, 1.96% sys, 96.6%</p>
<p>Load 的警惕值 ： 以单核为例 Load &gt; 2 系统以相对繁忙 Load &gt; 5 系统崩溃边缘</p>
<span id="more"></span>]]></content>
      <tags>
        <tag>大型网站</tag>
      </tags>
  </entry>
  <entry>
    <title>Yar</title>
    <url>/2017/03/27/Yar/</url>
    <content><![CDATA[<h3 id="🐷-Yar-编译安装"><a class="header-anchor" href="#🐷-Yar-编译安装">¶</a>🐷 Yar 编译安装</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git <span class="keyword">clone</span> https:<span class="comment">//github.com/laruence/yar.git</span></span><br><span class="line"></span><br><span class="line">cd yar</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装依赖包</span></span><br><span class="line">sudo apt-get install curl</span><br><span class="line">sudo apt-get install libcurl4-gnutls-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">//软连接到bin目录</span></span><br><span class="line">ln -s /usr/local/php7.<span class="number">0</span>/bin/phpize /usr/bin/phpize </span><br><span class="line"></span><br><span class="line">phpize</span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置fpm</span></span><br><span class="line">sudo ln -s /etc/php/<span class="number">7.0</span>/mods-available/yar.ini  /etc/php/<span class="number">7.0</span>/fpm/conf.d/yar.ini</span><br><span class="line"></span><br><span class="line"><span class="comment">//重启fpm</span></span><br><span class="line"></span><br><span class="line">sudo service php7.<span class="number">0</span>-fpm restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="服务端注册"><a class="header-anchor" href="#服务端注册">¶</a>服务端注册</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params"><span class="variable">$uid</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> json_encode([</span><br><span class="line">            <span class="string">&#x27;uid&#x27;</span>=&gt;<span class="variable">$uid</span>,</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>=&gt;<span class="string">&#x27;lihongwei&#x27;</span>,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDealInfo</span>(<span class="params"><span class="variable">$dealid</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> json_encode([</span><br><span class="line">            <span class="string">&#x27;did&#x27;</span>=&gt;<span class="variable">$dealid</span>,</span><br><span class="line">            <span class="string">&#x27;dealname&#x27;</span>=&gt;<span class="string">&#x27;haihang&#x27;</span>,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$service</span> = <span class="keyword">new</span> \Yar_Server(<span class="keyword">new</span> ApiController());</span><br><span class="line"><span class="variable">$service</span>-&gt;handle();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="客户端调用"><a class="header-anchor" href="#客户端调用">¶</a>客户端调用</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">//同步</span></span><br><span class="line"> </span><br><span class="line"> <span class="variable">$client</span> = <span class="keyword">new</span> \Yar_Client(<span class="string">&quot;http://yaf.dev&quot;</span>);</span><br><span class="line"> <span class="comment">/* 以下是最佳setopt */</span></span><br><span class="line"> <span class="variable">$client</span>-&gt;SetOpt(YAR_OPT_CONNECT_TIMEOUT, <span class="number">1000</span>);</span><br><span class="line"> <span class="comment">/* 同步调用远程服务 */</span></span><br><span class="line"> <span class="variable">$result</span> = <span class="variable">$client</span>-&gt;getUserInfo(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//异步</span></span><br><span class="line"> </span><br><span class="line">\Yar_Concurrent_Client::call(<span class="string">&quot;http://yaf.dev&quot;</span>, <span class="string">&quot;getUserInfo&quot;</span>,[<span class="number">11320</span>],[<span class="keyword">$this</span> , <span class="string">&#x27;getUserInfoCallback&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">\Yar_Concurrent_Client::call(<span class="string">&quot;http://yaf.dev&quot;</span>, <span class="string">&quot;getDealInfo&quot;</span>,[<span class="number">18800</span>],[<span class="keyword">$this</span> , <span class="string">&#x27;getDealInfoCallback&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">\Yar_Concurrent_Client::call(<span class="string">&quot;http://yaf.dev&quot;</span>, <span class="string">&quot;getDealInfo&quot;</span>,[<span class="number">18800</span>],[<span class="keyword">$this</span> , <span class="string">&#x27;getDealInfoCallback&#x27;</span>],[<span class="keyword">$this</span> , <span class="string">&#x27;getDealInfoCallbackError&#x27;</span>],[YAR_OPT_PACKAGER =&gt; <span class="string">&quot;json&quot;</span>]);</span><br><span class="line"></span><br><span class="line">\Yar_Concurrent_Client::call(<span class="string">&quot;http://yaf.dev&quot;</span>, <span class="string">&quot;getDealInfo&quot;</span>,[<span class="number">18800</span>],[<span class="keyword">$this</span> , <span class="string">&#x27;getDealInfoCallback&#x27;</span>],[<span class="keyword">$this</span> , <span class="string">&#x27;getDealInfoCallbackError&#x27;</span>],[YAR_OPT_TIMEOUT=&gt;<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">\Yar_Concurrent_Client::loop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">getUserInfoCallback</span>(<span class="params"><span class="variable">$retval</span>, <span class="variable">$callinfo</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$data</span> =  json_decode(<span class="variable">$retval</span> ,<span class="literal">true</span>);</span><br><span class="line">    var_dump(<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>yar</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解正则表达式</title>
    <url>/2017/02/25/%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<h3 id="表达式测试-🐝"><a class="header-anchor" href="#表达式测试-🐝">¶</a>表达式测试 🐝</h3>
<p>推荐一个测试地址 <a href="http://www.rexv.org/">http://www.rexv.org/</a><br>
测试题：用单引号和双引号匹配 <code>\$</code><br>
答案 ： 首先<code>\$</code>都是元字符都需要转义，转义结果为：<code>\\\$</code></p>
<ul>
<li>用单引号来标识的正则: <code>/\\\\\$/</code></li>
<li>用双引号来标识的正则: <code>/\\\\\\\$/</code></li>
</ul>
<h3 id="🌴-分组和后向引用"><a class="header-anchor" href="#🌴-分组和后向引用">¶</a>🌴 分组和后向引用</h3>
<p>通过次数限定符，来限定前面括号中的单元。匹配到的单元将会被捕获，捕获到的内容可以在正则表达式的后面通过<code>\1,\2,\3</code>获取。</p>
<h3 id="贪婪与非贪婪-🪲"><a class="header-anchor" href="#贪婪与非贪婪-🪲">¶</a>贪婪与非贪婪 🪲</h3>
<ul>
<li><code>.*</code> 贪婪模式，贪婪模式会回溯匹配效率低。</li>
<li><code>.*?</code> 非贪婪模式</li>
</ul>
<span id="more"></span>
<h3 id="正则表达式的回溯"><a class="header-anchor" href="#正则表达式的回溯">¶</a>正则表达式的回溯</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/<span class="string">&quot;.*&quot;</span>/ 和 /<span class="string">&quot;.*?&quot;</span>/</span><br><span class="line">分别匹配 <span class="string">&#x27;my name is &quot;lhw&quot; who &quot;are&quot; you &#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>&quot;.*&quot;</code>匹配过程：当匹配到第一个<code>&quot;</code>字符的时候由于<code>.</code>是匹配非换行符的所有字符，所以就从<code>&quot;</code>一直匹配的最后，匹配到最后然后在逐次往前回溯，拿每个字符和最后一个<code>&quot;</code>符号匹配，直到匹配到为止，所以<code>&quot;.*&quot;</code>匹配的结果是 “lhw” who “are”</p>
</li>
<li>
<p><code>&quot;.*?&quot;</code>匹配过程：当匹配到第一个<code>&quot;</code>字符的时候，就会逐次的从当前的<code>&quot;</code>后面的字符和最后<code>&quot;</code>做匹配。直到匹配为止。</p>
</li>
</ul>
<h3 id="✂️-限定符和元字符使用时注意"><a class="header-anchor" href="#✂️-限定符和元字符使用时注意">¶</a>✂️ 限定符和元字符使用时注意</h3>
<ul>
<li>所有限定符都是限定它前面的一个子单元出现的次数。</li>
<li>只有元字符出现在它该出现的地方才能起到元字符作用，否则就是普通字符如：<br>
[-0-9A-Z.?]由于[]优先级高于<code>.?</code>所以这里的<code>.?</code>就是普通字符</li>
</ul>
<h3 id="PCRE-主要函数"><a class="header-anchor" href="#PCRE-主要函数">¶</a>PCRE 主要函数</h3>
<ul>
<li>preg_grep 返回匹配模式的数组条目</li>
<li>preg_match 执行一个正则表达式匹配</li>
<li>preg_match_all 执行一个全局正则表达式匹配</li>
<li>preg_filter 执行一个正则表达式搜索和替换</li>
<li>preg_replace 执行一个正则表达式搜索和替换</li>
<li>preg_replace_callback 执行一个正则表达式搜索且使用一个回调进行替换</li>
<li>preg_split 通过一个正则表达式分割字符串</li>
</ul>
<h3 id="正则表达式-元字符-🐽"><a class="header-anchor" href="#正则表达式-元字符-🐽">¶</a>正则表达式 - 元字符 🐽</h3>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>\</td>
<td>有三种含义，1是转义如 <code>\\</code>,<code>\(</code>,2是特殊字符如<code>\n</code> 匹配一个换行符,3是向后引用</td>
</tr>
<tr>
<td>^</td>
<td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\n”或“\r”之后的位置</td>
</tr>
<tr>
<td><code>$</code></td>
<td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multilin性，$也匹配“\n”或“\r”之前的位置</td>
</tr>
</tbody>
</table>
<ul>
<li>| 匹配前面的子表达式零次或多次(注意：前面的子表达)。例如，lhw* 能匹配 “lh&quot;和&quot;lhw” 以及 “lhwww”。等价于{0,}</li>
</ul>
<ul>
<li>| 匹配前面的子表达式一次或多次。例如，‘lhw+’ 能匹配 “lhw” 以及 “lhwww”，但不能匹配 “lh”。+ 等价于 {1,}<br>
?  | 匹配前面的子表达式零次或一次。例如，“lhw(nb)?” 可以匹配 “lhw” 或 “lhwnb” 等价于 {0,1}<br>
{n}  | 匹配确定的 n 次。例如，‘lhw{2}’ 不能匹配 “lhw” 但是能匹配 “lhww”<br>
{n,} | 至少匹配n 次。例如，‘o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foood” 中的所有 o,‘o{1,}’ 等价于 ‘o+’,‘o{0,}’ 则等价于 ‘o*’<br>
{n,m} | 最少匹配 n 次且最多匹配 m 次。例如，“o{1,3}” 将匹配 “fooood” 中的前三个 o。‘o{0,1}’ 等价于 ‘o?’<br>
.  | 匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像&quot;(.|\n)&quot;的模式<br>
? | 当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，‘o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’<br>
x|y | 匹配 x 或 y。例如，‘z|food’ 能匹配 “z” 或 “food”。‘(z|f)ood’ 则匹配 “zood” 或 “food”<br>
[xyz] | 匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’<br>
[^xyz] | 匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、‘l’、‘i’、‘n’<br>
[a-z] | 匹配指定范围内的任意字符。例如，‘[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符<br>
[^a-z] | 匹配任何不在指定范围内的任意字符。例如，‘[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符<br>
\d | 匹配一个数字字符。等价于 [0-9]<br>
\D | 匹配一个非数字字符。等价于 [^0-9]<br>
\n | 匹配一个换行符<br>
\s | 匹配任何空白字符，包括空格、制表符、换页符等等<br>
\S |匹配任何非空白字符。等价于 [^ \f\n\r\t\v]<br>
\r | 匹配一个回车符<br>
\t | 匹配一个制表符<br>
\w | 匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’<br>
\W | 	匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’<br>
\xn | 十六进制转义值必须为确定的两个数字长。例如，‘\x41’ 匹配 “A”。‘\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码<br>
\nm | 标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm<br>
[\u4e00-\u9fa5] | unicode码范围，匹配任意汉字，\u固定写法，4e00为16进制的unicode编码</li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串和字符编码原理</title>
    <url>/2017/02/24/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h3 id="🕷️单引号和双引号的区别"><a class="header-anchor" href="#🕷️单引号和双引号的区别">¶</a>🕷️单引号和双引号的区别</h3>
<p>单引号和双引号的区别经常被当做面试题被问到，但是大部分回答的并不好，其中有以下几种区别经常被忽略。<br>
当字符串用双引号或者heredoc结构定义时，其中变量可以被解析，同时可以解析以下字符</p>
<ul>
<li>\n,\r,\t,\v,\e,\f,\,$,&quot;</li>
<li>[0-7]{1,3}符合该正则表达式的，是以一个八进制方式来表达的字符，例如</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 101转10进制：1*8^2+0*8^1+1*8^0 = 64+0+1 = 65</span></span><br><span class="line"><span class="comment">* 102转10进制：1*8^2+0*8^1+2*8^0 = 64+0+2 = 66</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\101\102&quot;</span> <span class="comment">// AB</span></span><br></pre></td></tr></table></figure>
<ul>
<li>\x[0-9A-Fa-f]{1,2}符合该正则表达的，是以一个十六进制方式来表达的字符，例如</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 41转10进制：4*16^1+1*16^0 = 64+1 = 65</span></span><br><span class="line"><span class="comment">* 42转10进制：4*16^2+2*16^0 = 64+2 = 66</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\x41\x42&quot;</span> <span class="comment">// AB</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>单引号只转义\ 和 ’</p>
</blockquote>
<h3 id="↘️-关于字符串下标"><a class="header-anchor" href="#↘️-关于字符串下标">¶</a>↘️ 关于字符串下标</h3>
<ul>
<li>获取字符串中的字符，可以通过下标去获取。</li>
<li>用超出字符串长度的下标写入字符串，会拉长该字符串，中间以空格填充。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;lhw&#x27;</span>;</span><br><span class="line"><span class="variable">$str</span>[<span class="number">10</span>] = <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br></pre></td></tr></table></figure>
<h3 id="🐜-字符串串行化"><a class="header-anchor" href="#🐜-字符串串行化">¶</a>🐜 字符串串行化</h3>
<p>串行化的目的：将不易于存储的数据结构，通过串行化来存储数据库或者文件当中。</p>
<ul>
<li>serialize()   性能稍差，可序列号对象</li>
<li>json_encode() 性能好，这序列化数组，并且不同语言可通用</li>
<li>var_export($arr,true) 序列化数组，并写入文件，可做文件缓存使用，或者写入日志调试</li>
</ul>
<blockquote>
<p>var_export 利用它的特性，可以将读取数据库的配置等信息，写入缓存文件。</p>
</blockquote>
<span id="more"></span>
<h3 id="字符"><a class="header-anchor" href="#字符">¶</a>字符</h3>
<p>相关关键字</p>
<ul>
<li>位(bit b)，计算机最小存储单位，0或1组成</li>
<li>字节(byte B),计量单位</li>
<li>字符(char),可见字母，数字，符号等</li>
</ul>
<h3 id="字符集和字符编码"><a class="header-anchor" href="#字符集和字符编码">¶</a>字符集和字符编码</h3>
<ul>
<li>字符集<br>
所有抽象字符的集合，如 ASCII 字符集，Unicode 字符集</li>
<li>字符编码<br>
一种约定规范，使字符和计算机直接建立对应关系，就是以二进制的数字对应字符集的字符。</li>
</ul>
<h3 id="ASCII-编码"><a class="header-anchor" href="#ASCII-编码">¶</a>ASCII 编码</h3>
<p>美国定义的字符集，只用一个字节标识的字符，使用字节的低7位标识一共2的7次方128个字符，这些字符都和二进制数字有了对应关系。</p>
<h3 id="Latin1-编码-ISO-8859-1"><a class="header-anchor" href="#Latin1-编码-ISO-8859-1">¶</a>Latin1 编码 (ISO-8859-1)</h3>
<p>在ASCII编码基础上的扩展，主要是西欧国家的，范围是125-255(具体字符去 google)</p>
<h3 id="GB2132编码-和-GBK编码-中国"><a class="header-anchor" href="#GB2132编码-和-GBK编码-中国">¶</a>GB2132编码 和 GBK编码 (中国)</h3>
<ul>
<li>GB2132 只收了常用的6763个汉字</li>
<li>GBK在GB2132的基础上扩展了许多行的汉字</li>
</ul>
<p>GB2132一个汉字用2个字节表示，一个字节占8位总共分为2的8次方(<code>256</code>)种可能，两个字节就是<code>256*256=65536</code>种不同的符合，但是中国只才用了两个字节的低7位<code>128*128=16384</code>种不同的汉字。但是在GB2132中为了和ASCII保持兼容，GB2132的每个字节中不能在用ASCII中的字符编码，所有实际GB2132所能表示的只有94*94=8836个。</p>
<h3 id="BIG5编码-台湾"><a class="header-anchor" href="#BIG5编码-台湾">¶</a>BIG5编码 (台湾)</h3>
<h3 id="ISO组织的Unicode字符集"><a class="header-anchor" href="#ISO组织的Unicode字符集">¶</a>ISO组织的Unicode字符集</h3>
<ul>
<li>Unicode的编码方式：UTF-8/UTF-16/UTF-32</li>
<li>Unicode 采用4个字节来表达一个字符</li>
</ul>
<h3 id="UTF-8的编码规则"><a class="header-anchor" href="#UTF-8的编码规则">¶</a>UTF-8的编码规则</h3>
<table>
<thead>
<tr>
<th>Unicode编码(16进制)</th>
<th>UTF-8字节流(二进制)</th>
</tr>
</thead>
<tbody>
<tr>
<td>0000-007F</td>
<td>0xxxxxxx</td>
</tr>
<tr>
<td>0080-07FF</td>
<td>110xxxxx 10xxxxxx</td>
</tr>
<tr>
<td>0800-FFFF</td>
<td>1110xxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td>010000-10FFFF</td>
<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
</tbody>
</table>
<p>中国的汉字范围是4E00-9FFF,根据上面的规则可以看出，是0800-FFFF区间，所以UTF-8的汉字是3个字节。</p>
<p>如何把’北京’的unicode码 ‘21271’,'20140’转为UTF-8.</p>
<ul>
<li>算出每个字的二进制</li>
<li>从右至左一次填充，不足补0： 1110xxxx 10xxxxxx 10xxxxxx</li>
<li>在将二进制转为16进制</li>
<li>将16进制编辑到编辑器，已UTF-8查看</li>
</ul>
<h3 id="UTF-16的编码规则"><a class="header-anchor" href="#UTF-16的编码规则">¶</a>UTF-16的编码规则</h3>
<p>和 UTF-8类似，采用两个字节存储一个字符，但是不兼容ASCII码，如果存储英文势必会造成空间的浪费</p>
<h3 id="GBK和UTF-8如何选择"><a class="header-anchor" href="#GBK和UTF-8如何选择">¶</a>GBK和UTF-8如何选择</h3>
<ul>
<li>优先选择UTF-8</li>
<li>为了节省存储空间选择GBK</li>
<li>支持多种语言选择UTF-8</li>
</ul>
<p>PHP 中的<code>json_encode()</code>是只支持UTF-8的汉字。</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务</title>
    <url>/2017/02/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="微服务目的"><a class="header-anchor" href="#微服务目的">¶</a>微服务目的</h3>
<p>一直在说微服务，微服务到底能带来什么好处呢，从老板的角度来说，他们真正只在乎两件事情：</p>
<p>系统要稳定，别挂<br></p>
<p>出活要快，我让你们加什么功能，赶紧就给加上</p>
<p>稳定性和交付速度就是最重要的两个指标了。</p>
<h3 id="微服务切分"><a class="header-anchor" href="#微服务切分">¶</a>微服务切分</h3>
<p>把一个单体应用切分为多个进程，独立部署是必然的。独立发布，独立测试，独立流水线，无论怎么拆分，都会比合在一起要好。但是也会设计到跨进程的事务一致性问题如何保证，以及跨网络延时等用户体验问题。</p>
<span id="more"></span>
<h3 id="微服务之间调用和异步化"><a class="header-anchor" href="#微服务之间调用和异步化">¶</a>微服务之间调用和异步化</h3>
<p>SOAP和RPC都是SOA的具体实现方式。这里要说的是由于服务的拆分，消息总线或者消息队列也是重要的一个设计环节，因为RPC 和消息队列最本质的区别，不是网络开销，不是提高并发，而是职责的反转。比如我们开发中经常遇到这样的业务流程，卡券团队对订单团队说你们下单的时候要调一下我的接口我要送卡券…,可以转变成不是我调你而是你主动来取。我只要将事件handle放进消息队列就ok啦。当然RPC好还是走消息队列好，还是要根据业务去做权衡。</p>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>devops</title>
    <url>/2016/12/04/devops/</url>
    <content><![CDATA[<p><img src="http://o8979n2hu.bkt.clouddn.com/test-pyramid.png" alt="iterm2"></p>
<blockquote class="blockquote-center">devops</blockquote>
<hr>
<blockquote>
<p>虽然不喜欢devops，但是还是要总结一下在devops中遇到一些所使用的工具。<br>
<a href="https://github.com/integrations">https://github.com/integrations</a></p>
</blockquote>
<hr>
<h3 id="git"><a class="header-anchor" href="#git">¶</a>git</h3>
<pre><code>http://blog.ffanfood.com/2016/07/09/git
</code></pre>
<h3 id="代码托管和代码审查"><a class="header-anchor" href="#代码托管和代码审查">¶</a>代码托管和代码审查</h3>
<pre><code>gitlab / github ／ Code Review
</code></pre>
<h3 id="CI-自动化构件，测试，部署"><a class="header-anchor" href="#CI-自动化构件，测试，部署">¶</a>CI 自动化构件，测试，部署</h3>
<pre><code>CircleCI ／ Travis CI
</code></pre>
<h3 id="日志聚集"><a class="header-anchor" href="#日志聚集">¶</a>日志聚集</h3>
<pre><code>Slack  https://slack.com/
</code></pre>
<h3 id="项目与事务跟踪"><a class="header-anchor" href="#项目与事务跟踪">¶</a>项目与事务跟踪</h3>
<pre><code>JIRA https://github.com/integrations/jira-software
</code></pre>
<h3 id="前端后端解藕（契约测试）"><a class="header-anchor" href="#前端后端解藕（契约测试）">¶</a>前端后端解藕（契约测试）</h3>
<span id="more"></span>
<p><a href="http://www.infoq.com/cn/articles/power-of-raml">http://www.infoq.com/cn/articles/power-of-raml</a></p>
<p>工具与安装：</p>
<pre><code>1. 需要Node环境，下载nodejs：https://nodejs.org/en/ ，选择LTS版本
2. RAML API设计器：npm install -g api-designer 网页版ide
3. 对于前端（服务调用者）：npm install -g osprey-mock-service
4. 对于后端（服务提供者）：npm install -g abao
5. ide工具: Atom https://atom.io/，然后按照扩展api-workbench，类似phpstorm
6. PostMan 需要安装cookie扩展
</code></pre>
<p>相关命令：</p>
<p>api-designer 网页版ide:</p>
<pre><code>1. 命令行输入api-designer启动，浏览器自动打开http://localhost:3000/
</code></pre>
<p>osprey-mock-service 前端：</p>
<pre><code>1. 命令行输入 osprey-mock-service --cors -f wallet-list.raml -p 6060
2. 返回：Mock service running at http://localhost:6060 成功状态
3. PostMan中输入地址调试，Header需添加Content-Type：application/x-www-form-urlencoded
4. --cors 解决js跨域问题
</code></pre>
<p>abao 后端：</p>
<pre><code>1. 命令行输入abao raml-specs/wallet-list.raml -t 15000 -f login.js --server http://www.abc.com
2. --server 就是baseUri， -t 是响应时间，
</code></pre>
<p>文档与规范：</p>
<pre><code>RAML 规范官网： raml.org
RAML 详细规范： fhttps://github.com/raml-org/raml-spec/blob/master/versions/raml-08/raml-08.md
RAML 示例：  http://static-anypoint-mulesoft-com.s3.amazonaws.com/API_examples_notebooks/raml-design3.html
API 返回值规范：	http://json-schema.org/  
</code></pre>
<p><img src="http://o8979n2hu.bkt.clouddn.com/raml.jpg" alt="rmal"></p>
<p>作用：</p>
<pre><code>1. 文档与规范 
2. 自动化测试
3. Mock服务模拟
</code></pre>
<p>工程目录参考 <a href="https://github.com/raml-apis">https://github.com/raml-apis</a></p>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>php-trait</title>
    <url>/2016/11/30/php-trait/</url>
    <content><![CDATA[<h3 id="单例模式"><a class="header-anchor" href="#单例模式">¶</a>单例模式</h3>
<p>如果class new 起来嫌麻烦，👙 或者想使用单例模式，请在你的class中  use Singleton</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="variable">$__instances__</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&#x27;Cloning &#x27;</span>.<span class="keyword">__CLASS__</span>.<span class="string">&#x27; is not allowed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$class</span> = get_called_class();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="built_in">static</span>::<span class="variable">$__instances__</span>[<span class="variable">$class</span>])) &#123;</span><br><span class="line">            <span class="built_in">static</span>::<span class="variable">$__instances__</span>[<span class="variable">$class</span>] = <span class="keyword">new</span> <span class="built_in">static</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static</span>::<span class="variable">$__instances__</span>[<span class="variable">$class</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">resetInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$class</span> = get_called_class();</span><br><span class="line">        <span class="keyword">unset</span>(<span class="built_in">static</span>::<span class="variable">$__instances__</span>[<span class="variable">$class</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">extends</span> \<span class="title">AbstractOrder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">use</span> <span class="title">Singleton</span></span><br><span class="line"></span><br><span class="line">	<span class="title">public</span> <span class="title">function</span> <span class="title">getOrderInfo</span>()&#123;</span><br><span class="line">		//<span class="title">todo</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">Order</span>::<span class="title">getInstance</span>()-&gt;<span class="title">getOrderInfo</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="laravel-多太关联结合trait"><a class="header-anchor" href="#laravel-多太关联结合trait">¶</a>laravel 多太关联结合trait</h3>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>trait</tag>
      </tags>
  </entry>
  <entry>
    <title>非常coll的框架 vue-js</title>
    <url>/2016/11/22/vue-js/</url>
    <content><![CDATA[<h3 id="数据双向绑定"><a class="header-anchor" href="#数据双向绑定">¶</a>数据双向绑定</h3>
<p>v-model 使用于 <code>input</code> ,<code>textarea</code> 将属性和我们的 <code>data</code>对象中的属性绑定在一起</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue-js<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;&#123; $data | json &#125;&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">message</span>:<span class="string">&#x27;hello world !!&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="v-show-和-v-if"><a class="header-anchor" href="#v-show-和-v-if">¶</a>v-show 和 v-if</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Vue-js&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">#main&#123;border: 1px;width:800px;margin:100px auto;&#125;</span></span><br><span class="line">        .name&#123;width:<span class="number">600</span>px;height: <span class="number">40</span>px&#125;</span><br><span class="line">        .passwd&#123;width:<span class="number">600</span>px;height: <span class="number">50</span>px&#125;</span><br><span class="line">        .name label&#123;display:inline-block;width: <span class="number">60</span>px&#125;</span><br><span class="line">        .passwd label&#123;display:inline-block;width: <span class="number">60</span>px&#125;</span><br><span class="line">        .<span class="built_in">error</span>&#123;color:red&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!--v-show 和 v-<span class="keyword">if</span> 的使用--&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;main&quot;</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">            &lt;form action=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">name</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">label</span>&gt;用户名:&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">name</span>=&quot;&quot; <span class="title">value</span>=&quot;&quot; <span class="title">v</span>-<span class="title">model</span>=&quot;<span class="title">username</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">error</span>&quot; <span class="title">v</span>-<span class="title">show</span>=&quot;!<span class="title">username</span>&quot;&gt;请输入用户名&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">passwd</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">label</span>&gt;密码:&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">name</span>=&quot;&quot; <span class="title">value</span>=&quot;&quot; <span class="title">v</span>-<span class="title">model</span>=&quot;<span class="title">password</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">error</span>&quot; <span class="title">v</span>-<span class="title">show</span>=&quot;!<span class="title">password</span>&quot;&gt;请输入密码&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">v</span>-<span class="title">show</span>=&quot;<span class="title">username</span> &amp;&amp; <span class="title">password</span>&quot;&gt;登录&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">type</span>=&quot;<span class="title">text</span>/<span class="title">javascript</span>&quot; <span class="title">src</span>=&quot;./<span class="title">node_modules</span>/<span class="title">vue</span>/<span class="title">dist</span>/<span class="title">vue</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">new</span> <span class="title">Vue</span>(</span>&#123;</span><br><span class="line">        el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            username : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            password : <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 开发大杂烩</title>
    <url>/2016/11/21/mac/</url>
    <content><![CDATA[<p><img src="http://o8979n2hu.bkt.clouddn.com/iterm-theme.png" alt="iterm2"></p>
<h1>👀 mac终端常用配置</h1>
<h3 id="安装oh-my-zsh"><a class="header-anchor" href="#安装oh-my-zsh">¶</a>安装oh my zsh</h3>
<p>首先安装 <code>iterm2</code>  <a href="http://www.iterm2.com">http://www.iterm2.com</a></p>
<p>然后进入 <a href="http://ohmyz.sh">http://ohmyz.sh</a> 根据以下文档安装 <code>zshrc</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> git:<span class="comment">//github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span></span><br><span class="line"></span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>配置</p>
<p><code>zsh</code> 的配置主要集中在用户当前目录的<code>.zshrc</code>里，用 <code>vim</code> 或你喜欢的其他编辑器打开<code>.zshrc</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> cls=<span class="string">&#x27;clear&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -l&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -a&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> vi=<span class="string">&#x27;vim&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> javac=<span class="string">&quot;javac -J-Dfile.encoding=utf8&quot;</span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">&quot;grep --color=auto&quot;</span></span><br><span class="line"><span class="built_in">alias</span> -s html=mate   <span class="comment"># 在命令行直接输入后缀为 html 的文件名，会在 TextMate 中打开</span></span><br><span class="line"><span class="built_in">alias</span> -s rb=mate     <span class="comment"># 在命令行直接输入 ruby 文件，会在 TextMate 中打开</span></span><br><span class="line"><span class="built_in">alias</span> -s py=vi       <span class="comment"># 在命令行直接输入 python 文件，会用 vim 中打开，以下类似</span></span><br><span class="line"><span class="built_in">alias</span> -s js=vi</span><br><span class="line"><span class="built_in">alias</span> -s c=vi</span><br><span class="line"><span class="built_in">alias</span> -s java=vi</span><br><span class="line"><span class="built_in">alias</span> -s txt=vi</span><br><span class="line"><span class="built_in">alias</span> -s gz=<span class="string">&#x27;tar -xzvf&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> -s tgz=<span class="string">&#x27;tar -xzvf&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> -s zip=<span class="string">&#x27;unzip&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> -s bz2=<span class="string">&#x27;tar -xjvf&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>安装完成，终端输入<code>zsh</code>进入 zsh</p>
<h3 id="安装-zsh-autosuggestions"><a class="header-anchor" href="#安装-zsh-autosuggestions">¶</a>安装 <code>zsh-autosuggestions</code></h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> git:<span class="comment">//github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions</span></span><br></pre></td></tr></table></figure>
<p>在 <code>.zshrc</code> 添加：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br></pre></td></tr></table></figure>
<p>最后 <code>source ~/.zshrc</code></p>
<p>更多 <code>oh my zsh</code> 配置参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/19556676">https://zhuanlan.zhihu.com/p/19556676</a></p>
<h3 id="iterm2-的配置"><a class="header-anchor" href="#iterm2-的配置">¶</a>iterm2 的配置</h3>
<p>zsh的主题 ： sudo vi ~/.zshrc  下的 ZSH_THEME=“cloud”</p>
<p>iterm2的主题：</p>
<p><a href="https://github.com/mbadolato/iTerm2-Color-Schemes">https://github.com/mbadolato/iTerm2-Color-Schemes</a></p>
<p><a href="https://draculatheme.com">https://draculatheme.com</a>  , Dracula.itermcolors (非常不错哦)</p>
<p>步骤：clone 选好的配色，command + , 呼出配置项 新建 profiles ,选择 <code>Colors</code> 选项导入配色文件,导入成功后，还要在 iTerm2 - Preferences - Profiles - Colors 里面右下方的 Color Presets 里面有没有刚刚导入的主题如图。</p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/iterm2.png" alt="iterm2-theme"></p>
<p>然后 command + o 可以选择配色实用了</p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/iterm-mac.png" alt="iterm2-theme"></p>
<p>经常使用的快捷键</p>
<p>command + o 选择主题配色</p>
<p>command ＋ 左右箭头 来回切换</p>
<p>command + enter  切换全屏</p>
<p>command + ;  查看历史命令</p>
<p>command + shift + h  查看剪贴板历史</p>
<p>ctrl + u  清除当前行(废除当前命令)</p>
<p>ctrl + r  搜索命令历史</p>
<p>ctrl + d 删除当前光标的字符</p>
<p>ctrl + h  删除光标之前的字符</p>
<p>ctrl + w  删除光标之前的单词</p>
<p>ctrl + k  删除到文本末尾</p>
<p>ctrl + t 交换光标处文本</p>
<p>command + r 清屏1</p>
<p>ctrl + l  清屏2</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel-设计模式</title>
    <url>/2016/11/18/laravel-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="http://o8979n2hu.bkt.clouddn.com/wcg.jpg" alt="设计场景"></p>
<h3 id="容器注入"><a class="header-anchor" href="#容器注入">¶</a>容器注入</h3>
<p>关键词： <code>依赖倒置</code>,<code>依赖注入</code></p>
<p>相当于Yii中的DI容器，使用目的，由于在我们平时写代码过程中使用new这个关键字被视为一种不好的习惯，所以laravel中提供了两种类型（多种方法）来帮我们自动实例化类。</p>
<p>第一种方式：PHP 反射机制</p>
<p>laravel 会在实例化一个类触发了构造方法的时候检查构造方法所需要的依赖，并且自动实例化。不是全局的，根据业务场景去设计。</p>
<p>第二种方式：全局的 App:bind() 和 serviceProvider 方法 如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">App::bind(<span class="string">&#x27;foo&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Foo();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app()-&gt;make(<span class="string">&#x27;foo&#x27;</span>)-&gt;method();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>laravel中是用serviceProvider中的register方法 来帮顶我们需要的依赖单元 如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="string">&#x27;file&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Files;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>而所有的 serviceProvider 都会中laravel 的app.config 下配置，这样就可以通过多种方式来直接使用这个类类(php  artisan make:privace 注册的服务)。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//app() 此方法在入口文件 index.php 中</span></span><br><span class="line"></span><br><span class="line">app()-&gt;make(<span class="string">&#x27;file&#x27;</span>)-&gt;method();</span><br><span class="line"></span><br><span class="line">app()[<span class="string">&#x27;file&#x27;</span>]-&gt;method();</span><br><span class="line"></span><br><span class="line">app(<span class="string">&#x27;file&#x27;</span>)-&gt;method();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过门面方式访问</span></span><br><span class="line"></span><br><span class="line">file::method();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用 <code>serviceProvider</code>的好处，如果这个类依赖过多的依赖单元可以种register的时候一次处理好，不用业务层每次重新构造。</p>
<h3 id="门面-Facade"><a class="header-anchor" href="#门面-Facade">¶</a>门面 Facade</h3>
<p>laravel 中提供了一个facade服务层来共应用成可以使用静态方法一样访问类中的成员方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 这个方法并不是laravel中 facade 中的，演示而已，new static()通常会替换成子类中构造注入或者方法注入的一个依赖，所以</span></span><br><span class="line"><span class="comment">     * 这里有个问题一直是个疑惑，new static() ，在这里会注入依赖显然不合理，不知道，jwt第三方是怎么做的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">$method</span> = <span class="string">&#x27;dep&#x27;</span>.ucfirst(<span class="variable">$method</span>);</span><br><span class="line">    <span class="keyword">if</span> (method_exists(<span class="keyword">new</span> <span class="built_in">static</span>(), <span class="variable">$method</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array([<span class="keyword">new</span> <span class="built_in">static</span>(), <span class="variable">$method</span>], <span class="variable">$args</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">BadMethodCallException</span>(<span class="string">&quot;Method [<span class="subst">$method</span>] does not exist.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>red-packet</title>
    <url>/2016/11/16/red-packet/</url>
    <content><![CDATA[<p><img src="http://cdn.nicexiangcun.com/%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85.JPG" alt="红包设计场景"></p>
<p>cmd的一个使用技巧</p>
<p>sudo !! , root的身份执行上次命令</p>
]]></content>
  </entry>
  <entry>
    <title>phpstorm vagrant xdebug</title>
    <url>/2016/11/13/xdebug/</url>
    <content><![CDATA[<h1>phpstorm 结合homestead 配置xdebug 👠</h1>
<h3 id="编辑php配置文件"><a class="header-anchor" href="#编辑php配置文件">¶</a>编辑php配置文件</h3>
<p><code>homestead ssh</code></p>
<p><code>sudo vi /etc/php/7.0/fpm/conf.d/20-xdebug.ini</code></p>
<p>添加 ：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">zend_extension=/usr/lib/php/<span class="number">20151012</span>/xdebug.so</span><br><span class="line">xdebug.remote_enable = <span class="number">1</span></span><br><span class="line">xdebug.remote_connect_back = <span class="number">1</span></span><br><span class="line">xdebug.remote_port = <span class="number">9000</span></span><br><span class="line">xdebug.scream=<span class="number">0</span></span><br><span class="line">xdebug.cli_color=<span class="number">1</span></span><br><span class="line">xdebug.show_local_vars=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>重启fpm</p>
<p><code>sudo service php7.0-fpm restart</code></p>
<span id="more"></span>
<h3 id="下载chrom-xdebug-help-扩展"><a class="header-anchor" href="#下载chrom-xdebug-help-扩展">¶</a>下载chrom  xdebug-help  扩展</h3>
<p><a href="https://chrome.google.com/webstore/detail/eadndfjplgieldjbigjakmdgkmoaaaoc">https://chrome.google.com/webstore/detail/eadndfjplgieldjbigjakmdgkmoaaaoc</a></p>
<p>配置xdebug-help：</p>
<p>IDE key  ： phpstorm</p>
<h3 id="phpstorm-配置"><a class="header-anchor" href="#phpstorm-配置">¶</a>phpstorm 配置</h3>
<p>呼出配置项，搜索php，选择一个版本。</p>
<p>配置<code>ssh</code>链接vagrant ,如果使用私钥链接位置在 <code>.homestead\.vagrant\machines\default\virtualbox</code></p>
<p>如果有问题可以查看 <code>phpinfo xdebug</code>是否安装成功</p>
<h3 id="调试"><a class="header-anchor" href="#调试">¶</a>调试</h3>
<p>打开 <code>phpstorm xdebug</code> 监听。</p>
<p>打开 <code>xdebug-helper</code> 扩展。</p>
<p>输入<code>app.dev</code>，phpstorm会弹出对话框，选择“Accept”。</p>
<p>然后选择 <code>Preferences —&gt; Languages &amp; Frameworks — &gt; PHP —&gt; Servers</code></p>
<p>这时我们需要修改项目外层路径对应的映射关系，否则就只能对index.php进行debug，而其他文件的断点将不会起作用</p>
<p>监听多个域名，要做server 下配置，并且初次访问，必须访问index.php</p>
]]></content>
      <categories>
        <category>bug</category>
      </categories>
      <tags>
        <tag>xdebug</tag>
      </tags>
  </entry>
  <entry>
    <title>php7</title>
    <url>/2016/11/07/php7/</url>
    <content><![CDATA[<h3 id="php7"><a class="header-anchor" href="#php7">¶</a>php7</h3>
<p>排序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$games</span> = [<span class="string">&#x27;Mass Effect&#x27;</span>,<span class="string">&#x27;Super&#x27;</span>,<span class="string">&#x27;Zelda&#x27;</span>,<span class="string">&#x27;Fallout&#x27;</span>,<span class="string">&#x27;Metal Grear&#x27;</span>];</span><br><span class="line"></span><br><span class="line">usort(<span class="variable">$games</span>,<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>))</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//return $a &lt;=&gt; $b; // if a&lt;b return -1 , a=b return 0 ,a&gt;b return 1</span></span><br><span class="line">	  <span class="keyword">return</span> <span class="variable">$b</span> &lt;=&gt; <span class="comment">#a; </span></span><br><span class="line">	<span class="comment">//return $a - $b ;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$games</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//$games 适合于对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>三元声明更简单</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$name</span> = <span class="string">&#x27;lhw&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span> ?? <span class="string">&quot;cxx&quot;</span>;  <span class="comment">//等价于 empty($name) ? $name : &#x27;cxx&#x27; </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] ?? <span class="string">&#x27;cxx&#x27;</span>; <span class="comment">//等于 isset($_GET[&#x27;name&#x27;]) ? $_GET[&#x27;name&#x27;] : &#x27;cxx&#x27;;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>返回类型声明</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SomeInterface</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>) : <span class="title">User</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> <span class="keyword">implements</span> <span class="title">SomeInterface</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>) : <span class="title">User</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> User;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> SomeClass)-&gt;getUser</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"><span class="variable">$id</span></span>) : <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (userDoesNotExists(<span class="variable">$id</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> User::find(<span class="variable">$id</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(getUser());</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>psr4 加载规范</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//touch composer.json</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;autoload&quot;</span> :&#123;</span><br><span class="line">		<span class="string">&quot;psr-4&quot;</span>:&#123;</span><br><span class="line">			<span class="string">&quot;App\\&quot;</span>:<span class="string">&quot;./&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后 composer install</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//去创建几个 class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Person.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Animal.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如何来使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//touch index.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Person</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Animal</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同空间下，整合如下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\&#123;</span><br><span class="line">	<span class="title">Person</span>,</span><br><span class="line">	<span class="title">Animal</span>,</span><br><span class="line">	<span class="title">Foo</span>\<span class="title">Bar</span>\<span class="title">Baz</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>匿名类的用法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$message</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TerminalLogger</span> <span class="keyword">implements</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$message</span></span>)</span>&#123;</span><br><span class="line">		var_dump(<span class="variable">$message</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">protected</span> <span class="variable">$logger</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setLogger</span>(<span class="params">Logger <span class="variable">$logger</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">$this</span>-&gt;logger = <span class="variable">$logger</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">$this</span>-&gt;logger-&gt;log(<span class="string">&#x27;Doing things.&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$app</span> = <span class="keyword">new</span> Application();</span><br><span class="line"></span><br><span class="line"><span class="variable">$app</span>-&gt;setLogger(<span class="keyword">new</span> TerminalLogger);</span><br><span class="line"></span><br><span class="line"><span class="variable">$app</span>-&gt;action();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用匿名类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$message</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">protected</span> <span class="variable">$logger</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setLogger</span>(<span class="params">Logger <span class="variable">$logger</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">$this</span>-&gt;logger = <span class="variable">$logger</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">$this</span>-&gt;logger-&gt;log(<span class="string">&#x27;Doing things.&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$app</span> = <span class="keyword">new</span> Application();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用匿名类在 业务逻辑层 依赖注入一个具体</span></span><br><span class="line"><span class="variable">$app</span>-&gt;setLogger(<span class="keyword">new</span> <span class="class"><span class="keyword">class</span> <span class="keyword">implements</span> <span class="title">Logger</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$message</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">		var_dump(<span class="variable">$message</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$app</span>-&gt;action();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>laravel 中的例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookTransformer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">transform</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$transformer</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$item</span> = <span class="keyword">new</span> Item(<span class="keyword">new</span> BookTransformer);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用匿名类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$transformer</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$item</span> = <span class="keyword">new</span> Item(<span class="keyword">new</span> <span class="class"><span class="keyword">class</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">transform</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> [] ;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php7</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 14 PHP 5.6 升级到PHP 7.0</title>
    <url>/2016/10/24/up-php7/</url>
    <content><![CDATA[<h3 id="Ubuntu-14-PHP-5-6-升级到PHP-7-0"><a class="header-anchor" href="#Ubuntu-14-PHP-5-6-升级到PHP-7-0">¶</a>Ubuntu 14 PHP 5.6 升级到PHP 7.0</h3>
<p>备份之前的配置，备份之前的配置，备份之前的配置 ！！！</p>
<p>适用于Ubuntu 14 版本的VPS，Ubuntu 16 版本貌似直接就包含了php7.0</p>
<p>1.先解决有可能存在的语言问题</p>
<p>执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install -y language-pack-en-base</span><br></pre></td></tr></table></figure>
<p>然后命令行配置：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">locale-gen en_US.UTF-<span class="number">8</span></span><br><span class="line">export LANG=en_US.UTF-<span class="number">8</span></span><br><span class="line">export LC_ALL=en_US.UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>2.删除原来的php5.6</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge php5-fpm &amp;&amp; apt-get --purge autoremove</span><br></pre></td></tr></table></figure>
<p>3.添加php7.0的仓库</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:ondrej/php</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>4.安装php7.0</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install php7.<span class="number">0</span></span><br><span class="line">sudo apt-get install php7.<span class="number">0</span>-mysql</span><br><span class="line">sudo apt-get install php7.<span class="number">0</span>-fpm</span><br><span class="line"></span><br><span class="line">sudo apt-get install php7.<span class="number">0</span>-curl php7.<span class="number">0</span>-xml php7.<span class="number">0</span>-mcrypt php7.<span class="number">0</span>-json php7.<span class="number">0</span>-gd php7.<span class="number">0</span>-mbstring</span><br></pre></td></tr></table></figure>
<p>上面可以一步一步来安装，如果出现依赖冲突的情况，请一个一个安装。</p>
<p>5.配置新的php.ini</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/php/<span class="number">7.0</span>/fpm/php.ini</span><br><span class="line"><span class="comment">#将cgi.fix_pathinfo=1这一行去掉注释，将1改为0。</span></span><br></pre></td></tr></table></figure>
<p>6.配置php-fpm</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/php/<span class="number">7.0</span>/fpm/pool.d/www.conf</span><br><span class="line"><span class="comment">#  配置这个 listen = /var/run/php7.0-fpm.sock</span></span><br></pre></td></tr></table></figure>
<p>7.nginx 配置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-enabled/<span class="keyword">default</span></span><br></pre></td></tr></table></figure>
<p>配置相对应的路径和 location,(以laravel项目为例)：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">listen <span class="number">80</span> default_server;</span><br><span class="line">listen [::]:<span class="number">80</span> default_server ipv6only=on;</span><br><span class="line"></span><br><span class="line">root your_website_root;</span><br><span class="line">index index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make site accessible from http://localhost/</span></span><br><span class="line">server_name your_domain;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">	<span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">	<span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">	try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">	<span class="comment"># Uncomment to enable naxsi on this location</span></span><br><span class="line">	<span class="comment"># include /etc/nginx/naxsi.rules</span></span><br><span class="line">&#125;</span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">	try_files <span class="variable">$uri</span> /index.php =<span class="number">404</span>;</span><br><span class="line">	fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">	fastcgi_pass unix:/<span class="keyword">var</span>/run/php7.<span class="number">0</span>-fpm.sock;</span><br><span class="line">	fastcgi_index index.php;</span><br><span class="line">	fastcgi_param SCRIPT_FILENAME <span class="variable">$document</span>_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">	<span class="keyword">include</span> fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意这里的 fastcgi_pass unix:/var/run/php7.0-fpm.sock; 要和第6步的 php-fpm 配置：/var/run/php7.0-fpm.sock; 一致。</p>
<p>如果使用 https 的话，推荐：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ssl on;</span><br><span class="line">ssl_certificate /etc/nginx/ssl/ssl.crt;</span><br><span class="line">ssl_certificate_key /etc/nginx/ssl/ssl.key;</span><br><span class="line"></span><br><span class="line">ssl_protocols TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+<span class="number">3</span>DES:RSA+<span class="number">3</span>DES:!MD5;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br></pre></td></tr></table></figure>
<p>开启 gzip 可参考，配置文件位于 nginx.conf：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_disable <span class="string">&quot;msie6&quot;</span>;</span><br><span class="line"></span><br><span class="line">gzip_vary on;</span><br><span class="line">gzip_proxied any;</span><br><span class="line">gzip_comp_level <span class="number">5</span>;</span><br><span class="line">gzip_min_length <span class="number">256</span>;</span><br><span class="line">gzip_buffers <span class="number">16</span> <span class="number">8</span>k;</span><br><span class="line">gzip_http_version <span class="number">1.1</span>;</span><br><span class="line">gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php7</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云站点部署</title>
    <url>/2016/10/13/laravel-webhook/</url>
    <content><![CDATA[<h1>以 Ubuntu 14.04 为例</h1>
<h3 id="通过下面的命令来删除Apache"><a class="header-anchor" href="#通过下面的命令来删除Apache">¶</a>通过下面的命令来删除Apache</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service apache2 stop</span><br><span class="line">update-rc.d -f apache2 remove</span><br><span class="line">sudo apt-get remove apache2</span><br></pre></td></tr></table></figure>
<p>删除完之后，更新一下包列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<h3 id="安装Nginx"><a class="header-anchor" href="#安装Nginx">¶</a>安装Nginx</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意nginx安装需要第三方库的依赖，通常有 pcre库（支持rewrite模块）zlib库（支持gzip模块）和openssl库（支持ssl模块） </span></span><br><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>
<p>安装完Nginx，执行｀sudo service nginx start｀再在浏览器地址栏输入你的公网IP，你就可以看的welcome to Nginx的界面了</p>
<h3 id="安装PHP"><a class="header-anchor" href="#安装PHP">¶</a>安装PHP</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo apt-get install php5-fpm php5-cli php5-mcrypt</span><br></pre></td></tr></table></figure>
<p>只有通过php5-fpm，PHP在Nginx下才能正常运行，遂，安装之。</p>
<p>至于php5-mcrypt，有些PHP框架会依赖于这个，比如Laravel就是，所以也把它装上了。</p>
<h3 id="配置php"><a class="header-anchor" href="#配置php">¶</a>配置php</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/php5/fpm/php.ini</span><br></pre></td></tr></table></figure>
<p>打开PHP配置文件，找到cgi.fix_pathinfo选项，去掉它前面的注释分号;，然后将它的值设置为0,如下 <code>cgi.fix_pathinfo=0</code></p>
<p>启用php5-mcrypt: <code>sudo php5enmod mcrypt</code></p>
<p>重启php5-fpm: <code>sudo service php5-fpm restart</code></p>
<span id="more"></span>
<h3 id="在搭建完LEMP环境之后，首先要明确两个重要目录"><a class="header-anchor" href="#在搭建完LEMP环境之后，首先要明确两个重要目录">¶</a>在搭建完LEMP环境之后，首先要明确两个重要目录</h3>
<p>Nginx的默认root文件夹 <code>/usr/share/nginx/html</code></p>
<p>Nginx的服务器配置文件所在目录 <code>/etc/nginx/sites-available/</code></p>
<h3 id="部署Laravel"><a class="header-anchor" href="#部署Laravel">¶</a>部署Laravel</h3>
<p>创建网站的根目录</p>
<p><code>sudo mkdir -p /var/www</code></p>
<p>配置nginx服务器</p>
<p><code>sudo vim /etc/nginx/sites-available/default</code></p>
<p>打开nginx的配置文件之后，找到server这一块，大概是长这个样子的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server ipv6only=on;</span><br><span class="line"></span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line"></span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中root，index ，server_name和location这几行需要稍微修改一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    listen [::]:80 default_server ipv6only=on;</span><br><span class="line"></span><br><span class="line">    root /var/www/laravel/public;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    server_name server_domain_or_IP;      <span class="comment"># 将server_domain_or_IP修改为你的公网IP</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">            try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后我们还需要配置一下Nginx，让其执行PHP文件。同样是在这个文件里，在location下方添加下面的配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    listen [::]:80 default_server ipv6only=on;</span><br><span class="line"></span><br><span class="line">    root /var/www/laravel/public;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    server_name server_domain_or_IP;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> /index.php =404;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">        fastcgi_pass unix:/var/run/php5-fpm.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完之后重启Nginx，使上面的配置项生效。</p>
<p><code>sudo service nginx restart</code></p>
<h3 id="创建Laravel项目"><a class="header-anchor" href="#创建Laravel项目">¶</a>创建Laravel项目</h3>
<p>第一种方式：</p>
<p>直接通过composer来安装,安装composer</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">curl -sS https://getcomposer.org/installer | php</span><br></pre></td></tr></table></figure>
<p>如果 curl 有关于ssl错误可以尝试一下方式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">wget https:<span class="comment">//getcomposer.org/installer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line"></span><br><span class="line">php installer;</span><br></pre></td></tr></table></figure>
<p>composer全局使用：</p>
<p><code>sudo mv composer.phar /usr/local/bin/composer</code></p>
<p>或者</p>
<p><code>sudo mv composer.phar /usr/bin/composer</code></p>
<p>然后在/var/www目录下直接执行</p>
<p><code>sudo composer create-project laravel/laravel laravel</code></p>
<p>第二种方式：</p>
<p>使用Git和Coding平台</p>
<p>安装git</p>
<p><code>sudo apt-get install git</code></p>
<p>安装完成就可以使用git了，然后在Coding上创建一个私有项目laravel，里面包含所有该Laravel项目所需代码。</p>
<p>一旦本地代码都推送到Coding，然后在/var/www目录下直接使用</p>
<p><code>git clone your-project-git-link</code></p>
<p>your-project-git-link替换为你Coding上的laravel项目地址</p>
<p>注意：</p>
<p>不管哪种方式安装的代码，/var/www/都是属于root用户的，而访问网站的用户则需要正确的权限和访问限制，我们可以通过下面的命令来实现。</p>
<p><code>sudo chown -R :www-data /var/www/laravel</code></p>
<p>根据Laravel的官方文档，/var/www/laravel/storage目录需要给网站的用户写权限</p>
<p><code>sudo chmod -R 775 /var/www/laravel/storage</code></p>
<p>同时还要执行以下操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan cache:clear  <span class="comment">//在bootstrap/cache 生成 services.php 文件</span></span><br><span class="line"></span><br><span class="line">php artisan key:generate <span class="comment">//将生成的key复制到config/app.php替换82行的APP_KEY键值。</span></span><br></pre></td></tr></table></figure>
<h3 id="ssh-登录服务器"><a class="header-anchor" href="#ssh-登录服务器">¶</a>ssh 登录服务器</h3>
<p><code>ssh-keygen -t rsa</code> 本地生成秘钥对</p>
<p>接下来需要将本地的 id_rsa.pub 拷贝服务器上。</p>
<p>ssh登录服务器创建 .ssh 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">sudo mkdir .ssh</span><br></pre></td></tr></table></figure>
<p>切回到本地 .ssh 目录</p>
<p><code>scp id_rsa.pub root@123.98.35.77:~/.ssh/id_rsa.pub</code></p>
<p>输入服务器密码拷贝</p>
<p>拷贝成功回到服务器</p>
<p><code>cat id_rsa.pub &gt;&gt; authorized_keys</code></p>
<p>最后删掉 id_rsa.pub ,退出服务器，重新登录，就不用输入密码了。</p>
<h3 id="利用webhook-实现PHP-自动部署-git-代码"><a class="header-anchor" href="#利用webhook-实现PHP-自动部署-git-代码">¶</a>利用webhook 实现PHP 自动部署 git 代码</h3>
<p>首先推荐两篇文章</p>
<p><a href="http://m.aoh.cc/149.html">http://m.aoh.cc/149.html</a></p>
<p><a href="http://overtrue.me/articles/2015/01/how-to-deploy-project-with-git-hook.html">http://overtrue.me/articles/2015/01/how-to-deploy-project-with-git-hook.html</a></p>
<p>登录服务器部署用户公钥</p>
<p><code>ssh-keygen -t rsa -C &quot;bjletaoba@sina.com&quot;</code></p>
<p>将用户公钥部署到codding 的用户设置中</p>
<p>创建目录</p>
<p><code>sudo mkdir /var/www/.ssh</code></p>
<p>修改所属主 (针对 nginx 的)</p>
<p><code>sudo chown -R www-data:www-data /var/www/.ssh/</code></p>
<p>部署项目公钥 (针对 nginx,注意 id_rsa 的权限必须不能上777 或者 755 ，可以上700)</p>
<p><code>sudo -Hu www-data ssh-keygen -t rsa </code>//注意所在的当前目录必须在 www下</p>
<p>部署到 codding 的项目中</p>
<p><code>sudo cat /var/www/.ssh/id_rsa.pub</code></p>
<p>准备部署代码和注册路由</p>
<p>路由要注册到 middleware 外面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::group([<span class="string">&#x27;middleware&#x27;</span>=&gt;[<span class="string">&#x27;web&#x27;</span>]],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Route::any(<span class="string">&#x27;/deploy&#x27;</span>,<span class="string">&#x27;DeployController@deploy&#x27;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deploy</span>(<span class="params">Request <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$token</span>    = <span class="string">&#x27;ffanfood&#x27;</span>;</span><br><span class="line">    <span class="variable">$target</span>   = <span class="string">&#x27;/var/www/ffanfood/aliyun&#x27;</span>; <span class="comment">// 生产环境web目录</span></span><br><span class="line">    <span class="variable">$wwwUser</span>  = <span class="string">&#x27;www-data&#x27;</span>;</span><br><span class="line">    <span class="variable">$wwwGroup</span> = <span class="string">&#x27;www-data&#x27;</span>;</span><br><span class="line">    <span class="variable">$json</span> = json_decode(file_get_contents(<span class="string">&#x27;php://input&#x27;</span>),<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$json</span>[<span class="string">&#x27;token&#x27;</span>]) || <span class="variable">$json</span>[<span class="string">&#x27;token&#x27;</span>] !== <span class="variable">$token</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;error_request&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    file_put_contents(<span class="string">&#x27;deploy.log&#x27;</span>,var_export(<span class="variable">$json</span>,<span class="literal">true</span>),FILE_APPEND);</span><br><span class="line">     <span class="variable">$cmds</span> = <span class="keyword">array</span>(</span><br><span class="line">         <span class="string">&quot;cd <span class="subst">$target</span> &amp;&amp; git pull&quot;</span>,</span><br><span class="line">         <span class="string">&quot;chown -R <span class="subst">&#123;$wwwUser&#125;</span>:<span class="subst">&#123;$wwwGroup&#125;</span> <span class="subst">$target</span>/&quot;</span>,</span><br><span class="line">     );</span><br><span class="line">     <span class="keyword">foreach</span> (<span class="variable">$cmds</span> <span class="keyword">as</span> <span class="variable">$cmd</span>) &#123;</span><br><span class="line">         shell_exec(<span class="variable">$cmd</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码可以使用 php-shell-wrapper 这个 包</p>
<p><code>https://github.com/adambrett/php-shell-wrapper</code></p>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 执行cd 命令</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> $paht</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">cdInfo</span>(<span class="params"><span class="variable">$paht</span></span>)</span>&#123;</span><br><span class="line">      <span class="variable">$command</span> = <span class="keyword">new</span> Command(<span class="string">&#x27;cd&#x27;</span>);</span><br><span class="line">      <span class="variable">$command</span>-&gt;addParam(<span class="keyword">new</span> Param(<span class="variable">$paht</span>));</span><br><span class="line">      <span class="keyword">$this</span>-&gt;shell-&gt;run(<span class="variable">$command</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>修改git配置和保存git用户名密码 (会在 ／var/www 下生成git 配置文件)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -Hu www git config --global credential.helper store <span class="comment"># 永久保存</span></span><br><span class="line">sudo -Hu www-data git config --global user.name lhw</span><br><span class="line">sudo -Hu www-data git config --global user.email bjletaoba@sina.com</span><br></pre></td></tr></table></figure>
<p>初始化 (注意要用ssh 的链接 这样就不用输入密码)</p>
<p><code>sudo -Hu www-data git clone git@git.coding.net:goodawei/aliyun_laravel_5_2.git  --depth=1</code></p>
]]></content>
      <categories>
        <category>webserver</category>
      </categories>
      <tags>
        <tag>webhook</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2016/07/09/git/</url>
    <content><![CDATA[<h1>git 的配置项  <code>git config</code> 以下的三个级别</h1>
<h3 id="global"><a class="header-anchor" href="#global">¶</a>global</h3>
<p>针对一台电脑中一个用户，配置文件通常中用户的加目录的 .gitconfig 中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git config --配置级别  选项.属性 值 如：</span><br><span class="line"></span><br><span class="line">git config --global color.ui <span class="literal">true</span>					＃配置ui颜色</span><br><span class="line">git config --global user.name lhw                   ＃指定提交的用户名</span><br><span class="line">git config --global user.email bjletaoba@sina.com   ＃指定提交的用户邮箱</span><br><span class="line">git config --global core.editor emacs  (vim)        ＃指定打开的编辑器</span><br><span class="line">git config --global merge.tool vimdiff              ＃指定比较工具</span><br><span class="line">git config --list                                   ＃查看配置项</span><br><span class="line">git <span class="built_in">help</span> config                                     ＃帮助</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="system"><a class="header-anchor" href="#system">¶</a>system</h3>
<p>针对一台电脑，配置文件通常中/etc/.gitconfig 下</p>
<h3 id="local"><a class="header-anchor" href="#local">¶</a>local</h3>
<p>针对每一个项目，配置文件通常中 每个项目的 .git/文件夹下</p>
<h1>常用查看命令</h1>
<p><code>git status</code><br>
<code>git log --oneline</code><br>
<code>git log --oneline --graph</code><br>
<code>git  show  hash值</code> 查看状态和跟踪日志和hash</p>
<h3 id="git-add-用法"><a class="header-anchor" href="#git-add-用法">¶</a><code>git add</code> 用法</h3>
<p><code>git add</code> 将文件放入缓存区，其目的是为下次的 commit 做准备，其实每次 <code>git commit</code> 提交的文件都是 缓存区的，如果在缓存区的文件<code>commit</code>之前在次修改，那么修改的部分不会<code>commit</code>到版本控制中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git add . 		<span class="comment">#添加所有文件</span></span><br><span class="line">git add *.php 	<span class="comment"># 添加PHP文件</span></span><br><span class="line">git add /dir/* 	<span class="comment">#添加目录</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1>git 使用总结</h1>
<h3 id="如何使commit尽可能的少"><a class="header-anchor" href="#如何使commit尽可能的少">¶</a>如何使<code>commit</code>尽可能的少</h3>
<p>场景：通常一个commit就代表一个版本或者一个功能的提交，所以有时候我们不希望有过多的commit，比如已经<code>commit</code>到本地的lhw.php 文件，当我再次修改它的时候，我不希望这次的<code>commit</code> 纪录进log，这时可用使用<code>amend</code>：<code>git commit --amend</code>(会在指定的编辑器中打开，关闭后自动提交),注意只限于提交到本地并未推送到远端，如果已经推送到远端暂时没用想到办法。另外<code>amend</code>只适用于修正最后一次<code>commit</code>如果选择之前的某个版本，只能<code>git reset --hard</code>回到某个历史版本后在做<code>amend</code>。</p>
<p>查看修改可用使用： <code>git show 指定hash值</code> ，而此处 <code>git commit</code> 不会产生新的log (具体想要几个<code>commit</code>还要根据具体的场景)</p>
<h3 id="追随回归到过去的某一个版本"><a class="header-anchor" href="#追随回归到过去的某一个版本">¶</a>追随回归到过去的某一个版本</h3>
<p><code>git reset --hard</code>  彻底回退到某个版本，本地的源码也会变为上一个版本的内容。</p>
<p><code>git reset --soft</code>  回滚一个commit状态。能回到add之后那里,回退的是commit的信息，不会回退代码。如果还要提交，直接commit即可</p>
<h3 id="gitignore-忽略版本控制"><a class="header-anchor" href="#gitignore-忽略版本控制">¶</a><code>gitignore</code> 忽略版本控制</h3>
<p>一个简单的例子忽略编辑器生成的 .idea文件</p>
<p><code>git rm -r  --cached .idea/</code>   ＃指目录，从缓存区中删除中添加</p>
<p>然后在 <code>gitignore</code> 配置中添加 <code>.idea</code> ,在提交。</p>
<h3 id="rebase-变基"><a class="header-anchor" href="#rebase-变基">¶</a>rebase 变基</h3>
<p>由于分支上的commit合并到master的时候会产生新的commit,而rebase可以将分支上提交整合到master上，执行步骤如下：</p>
<p><code>git checkout feacture</code> 切换到发布分支</p>
<p><code>git rebase master</code> 已master为基础</p>
<p><code>git checkout master</code> 切回主干</p>
<p><code>git merge feacture</code> 合并发布分支</p>
<h3 id="cherry-pick-挑拣commit"><a class="header-anchor" href="#cherry-pick-挑拣commit">¶</a>cherry-pick 挑拣commit</h3>
<p>场景：假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。</p>
<p>如把dev分支上的某些commit合并到release上</p>
<p><code>git checkout dev</code> 当前的开发分支上</p>
<p><code>git checkout 0628fadz</code> 从当前开发分支的0628fadz这个点开始检出代码</p>
<p><code>git branch test</code>  为检出的代码创建test分支</p>
<p><code>git checkout test</code> 切换test分支</p>
<p><code>git checkout release</code> 切换到要合到的分支上</p>
<p><code>git cherry-pick 014de66 4dd1669 b6493af 803d021</code> 将要合并的commit按先后顺序合并过来</p>
<p><code>git check-pick --abord</code> 如果遇到冲突可以取消操作并返回到预序列状态</p>
<p><code>git status</code></p>
<p><code>git check-pick --abord</code> 可以连续使用</p>
<p><code>git push -u origin test</code></p>
<p><code>git checekout release</code></p>
<p><code>git merge test</code></p>
<p><code>git pull</code></p>
<p><code>git push</code></p>
<p>具体使用参照 ： <a href="https://git-scm.com/docs/git-cherry-pick">https://git-scm.com/docs/git-cherry-pick</a></p>
<h1>分支</h1>
<p>分支的使用场景：</p>
<p>分支使用场景个人理解也就是git的开发规范，git开发规范有很多，如gitflow,感觉gitflow确实解决了许多问题，但同时又带出来了许多新的问题，如分支的最终管理最终看起来很乱。</p>
<p>简单的一套git分支规范：master(受保护的) ，dev(开发分支)，feacture(欲发布)，开发人员拉取dev分支在本地小步提交，开发完成合并到feacture，在由feacture合并到master</p>
<p>大范围的bug,可以创建一个bug分支.</p>
<p>新建分支：</p>
<p><code>git branch -b  lhwtest_1000</code></p>
<p>切换分支：</p>
<p><code>git checkout  -b lhwtest_1000</code></p>
<p>查看分支：</p>
<p><code>git branch</code></p>
<p>提交到分支：</p>
<p><code>git commit -m 'new touch file'</code></p>
<p>推送到指定 master 分支:</p>
<p><code>git push origin lhwtest_1000</code></p>
<p>切换到主干：</p>
<p><code>git checkout master</code></p>
<p>合并分支：</p>
<p><code>git merge origin lhwtest_1000</code></p>
<p>最后推送到master:</p>
<p><code>git push origin</code></p>
<p>单独revest某个文件 ：</p>
<p><code>git checkout -- /app/lhw.php </code></p>
<p>分支开发完成没有bug后删除分支：</p>
<p><code>git branch -d lhwtest_1000</code></p>
<p>注意分支开发过程中要不断的获取主干代码，保持本地与主干的代码同步, 获取最新的远端代码(否则无法推送到远端)，已保证远端代码和本地是否存在冲突</p>
<p><code>git fetch  origin</code></p>
<p><code>git pull  origin</code></p>
<p>pull 于 fetch 的区别：</p>
<p>pull = fetch + merge , git fetch 的时候会从远端拉取一个隐藏master分支,使用git branch -r 查看，这个分支会与本地分支进行diff,然后决定是否需要合并，而 git pull 则直接进行合并</p>
<p>通常都说 git fetch 更加安全，但是实际工作中都默认使用 git pull 因为我们默认就是要已远端代码为准。</p>
<h1>冲突解决</h1>
<p>冲突场景：当在分支和主干修改并提交了相同文件的相同位置，在与主干合并时<code>git</code>会提示<code>merge failed fix conficts and then commit the result</code>,此时可以通过 <code>git diff file</code>查看文件冲突信息，并且用编辑器打开文件修改冲突信息，保存退出，重新 <code>git add</code>和 <code>git commit</code></p>
<h1>git 命令别名</h1>
<p>一 git 本身的配置文件</p>
<p>添加：<code>git config --global alias.s status</code><br>
删除：<code>git config --global --unset alias.s</code></p>
<p>二 linux <code>bash shell</code> 的 <code>.bash_profile</code> 或者 <code>zsh</code>的 <code>.zshrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -al&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> subl=<span class="string">&quot;&#x27;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&#x27;&quot;</span></span><br><span class="line"><span class="built_in">alias</span> nano=<span class="string">&quot;subl&quot;</span></span><br><span class="line"><span class="built_in">alias</span> des=<span class="string">&quot;cd ~/WebServer/Documents/&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gs=<span class="string">&quot;git status&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gc=<span class="string">&quot;git commit -m &quot;</span></span><br><span class="line"><span class="built_in">alias</span> gaa=<span class="string">&quot;git add .&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gp=<span class="string">&quot;git push&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gl=<span class="string">&quot;git log --graph&quot;</span></span><br><span class="line"><span class="built_in">alias</span> he=<span class="string">&quot;cd ~/hexo/hexo/lhw-hexo/&quot;</span></span><br><span class="line"><span class="built_in">alias</span> pos=<span class="string">&quot;cd ~/hexo/hexo/lhw-hexo/source/_posts/&quot;</span></span><br><span class="line"><span class="built_in">export</span> EDITOR=<span class="string">&quot;subl&quot;</span></span><br></pre></td></tr></table></figure>
<h1>github 常用技巧</h1>
<p>快捷键 ： shift + ?</p>
<p>查看一些流行的packgecg : <a href="https://github.com/trending">https://github.com/trending</a></p>
<p>pull代码的时候，经常会和本地有合并情况，一但合并便会产生新的分支，使分支线比较凌乱，解决办法：</p>
<p>命令行：git pull --rebase</p>
<p>phpstorm  选择rebase</p>
<p>sourcetree 勾选寅生选项</p>
<h1>理解一些感念</h1>
<p>一个本地仓库可以对应多个远程仓库，clone下来的仓库默认是与远端origin建立关联的,所以push的时候是可以直接push的，<br>
使用 remote add 指向新的远程仓库。具体学习githubflow的流程，所以在push一个没用和远端建立关联的本地仓库时通常是要 push -u 指定远程仓库名称的。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>常用sql总结</title>
    <url>/2016/06/28/sql/</url>
    <content><![CDATA[<h3 id="🆔-sql查询前n天的日期-n-1"><a class="header-anchor" href="#🆔-sql查询前n天的日期-n-1">¶</a>🆔 sql查询前n天的日期 n&gt;=1</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">select UNIX_TIMESTAMP(date_sub(curdate(),interval 1 day) ) ;</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------+</span><br><span class="line">| UNIX_TIMESTAMP(date_sub(curdate(),interval 1 day) ) |</span><br><span class="line">+-----------------------------------------------------+</span><br><span class="line">|                                          1466956800 |</span><br><span class="line">-----------------------------------------------------+</span><br><span class="line"></span><br><span class="line">select date_sub(curdate(),interval 1 day) ;</span><br><span class="line"></span><br><span class="line">+------------------------------------+</span><br><span class="line">| date_sub(curdate(),interval 1 day) |</span><br><span class="line">+------------------------------------+</span><br><span class="line">| 2016-06-27                         |</span><br><span class="line">+------------------------------------+</span><br></pre></td></tr></table></figure>
<h3 id="查当天日期和时间"><a class="header-anchor" href="#查当天日期和时间">¶</a>查当天日期和时间</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select CURDATE();</span><br><span class="line"></span><br><span class="line">+------------+</span><br><span class="line">| CURDATE()  |</span><br><span class="line">+------------+</span><br><span class="line">| 2016-06-28 |</span><br><span class="line">+------------+</span><br><span class="line"></span><br><span class="line">select NOW();</span><br><span class="line"></span><br><span class="line">+---------------------+</span><br><span class="line">| NOW()               |</span><br><span class="line">+---------------------+</span><br><span class="line">| 2016-06-28 22:29:48 |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="按月或按年"><a class="header-anchor" href="#按月或按年">¶</a>按月或按年</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">select YEAR(NOW());</span><br><span class="line">+-------------+</span><br><span class="line">| YEAR(NOW()) |</span><br><span class="line">+-------------+</span><br><span class="line">|        2016 |</span><br><span class="line">+-------------+</span><br><span class="line"></span><br><span class="line">select MONTH(NOW());</span><br><span class="line"></span><br><span class="line">+--------------+</span><br><span class="line">| MONTH(NOW()) |</span><br><span class="line">+--------------+</span><br><span class="line">|            7 |</span><br><span class="line">+--------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="一种不明白的sql-insert-语句"><a class="header-anchor" href="#一种不明白的sql-insert-语句">¶</a>一种不明白的sql insert 语句</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;INSERT INTO fee&quot;</span></span><br><span class="line">   . <span class="string">&quot;(`create_time`, `create_uid`, `update_time`, `update_uid` &quot;</span></span><br><span class="line">   . <span class="string">&quot;SELECT &quot;</span></span><br><span class="line">   . <span class="string">&quot;2016-06-28&quot;</span></span><br><span class="line">   . <span class="string">&quot;,10&quot;</span></span><br><span class="line">   . <span class="string">&quot;,2016-06-28&quot;</span></span><br><span class="line">   . <span class="string">&quot;,10&quot;</span></span><br><span class="line">   . <span class="string">&quot;FROM DUAL &quot;</span></span><br><span class="line">   . <span class="string">&quot;WHERE NOT EXISTS(SELECT *  fee WHERE type=2 &quot;</span></span><br><span class="line">    . <span class="string">&quot;and  id=1 &quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="variable">$pdo</span>-&gt;query(<span class="variable">$sql</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>php相关新特性</title>
    <url>/2016/06/25/php-new-performance/</url>
    <content><![CDATA[<h1>数组相关</h1>
<h3 id="不定长参数的一种传递方式-php5-6以上"><a class="header-anchor" href="#不定长参数的一种传递方式-php5-6以上">¶</a>不定长参数的一种传递方式 php5.6以上</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...<span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	var_dump(<span class="variable">$args</span>)</span><br><span class="line">&#125;</span><br><span class="line">	 </span><br><span class="line"><span class="comment">//这里传入的参数个数是可以改变的</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">	 </span><br><span class="line"><span class="comment">//也可以传入数组，...会展开数组为多个参数</span></span><br><span class="line"><span class="variable">$args</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">add(...<span class="variable">$args</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以往实现方式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="variable">$args</span> = func_get_args();</span><br><span class="line">	<span class="variable">$nums</span> = func_num_args();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="多维数组的一种循环方式"><a class="header-anchor" href="#多维数组的一种循环方式">¶</a>多维数组的一种循环方式</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">   	[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">   	[<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="keyword">list</span>(<span class="variable">$a</span>, <span class="variable">$b</span>)) &#123;</span><br><span class="line">   	<span class="keyword">echo</span> <span class="string">&quot;A: <span class="subst">$a</span>; B: <span class="subst">$b</span>\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>trait的使用</h1>
<h3 id="trait-使用场景和目的"><a class="header-anchor" href="#trait-使用场景和目的">¶</a>trait 使用场景和目的</h3>
<p><code>trait</code> 使用目的 ：</p>
<p>一 代码重用</p>
<p>二 螺丝钉作用，像别人的代码或者已完成的代码 插入新的代码</p>
<h1><code>yield</code> 的使用</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代器，每次只返回一个元素，而不是创建个大数组一次返回</span></span><br><span class="line"><span class="comment">//例如下面的读取文件，每次只返回一行，而不是将整个文件都一次性读入内存</span></span><br><span class="line"><span class="comment">//使用迭代器可以很好的节约内存</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLines</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   	<span class="variable">$f</span> = fopen(<span class="variable">$file</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">   	<span class="keyword">try</span> &#123;</span><br><span class="line">       	<span class="keyword">while</span> (<span class="variable">$line</span> = fgets(<span class="variable">$f</span>)) &#123;</span><br><span class="line">           	<span class="keyword">yield</span> <span class="variable">$line</span>;</span><br><span class="line">       	&#125;</span><br><span class="line">   	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       	fclose(<span class="variable">$f</span>);</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (getLines(<span class="string">&quot;file.txt&quot;</span>) <span class="keyword">as</span> <span class="variable">$n</span> =&gt; <span class="variable">$line</span>) &#123;</span><br><span class="line">   	<span class="keyword">echo</span> <span class="variable">$line</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>google-故障自动发现自动恢复</title>
    <url>/2016/06/07/google-devpos/</url>
    <content><![CDATA[<p>service-level agreement 和 service-level objectives</p>
<p><a href="http://searchcio.techtarget.com/answer/Whats-the-difference-between-SLO-and-SLA">http://searchcio.techtarget.com/answer/Whats-the-difference-between-SLO-and-SLA</a></p>
<p>在保证 SLO  高可用的时候 保证系统的稳定性 和 产品交付速度。  （SRE Google运维解密）</p>
<p><a href="http://www.open-open.com/lib/view/open1479283593591.html">http://www.open-open.com/lib/view/open1479283593591.html</a></p>
<p>智能监控级别</p>
<p>告警</p>
<p>工单</p>
<p>日志</p>
<p>24 小时 技术服务 ＝》 技术服务手册</p>
]]></content>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>phpStrom</title>
    <url>/2016/06/04/phpStorm/</url>
    <content><![CDATA[<h3 id="idea"><a class="header-anchor" href="#idea">¶</a>idea</h3>
<p><a href="http://idea.lanyus.com/">http://idea.lanyus.com/</a></p>
<h3 id="phpStrom-常用快捷键："><a class="header-anchor" href="#phpStrom-常用快捷键：">¶</a>phpStrom 常用快捷键：</h3>
<p><code>mac</code>下</p>
<p>command + ，打开配置项</p>
<p>command + shift + a 列出所有通过 keymap 定义快捷键</p>
<p>command + 1 隐藏和显示左侧工具栏</p>
<p>command + e 最近打开的文件</p>
<p>command + shift + o 搜索文件其实不用总是在左侧的工具栏中找，使用快捷键效率更高</p>
<p>command + shift + F 全局搜索</p>
<p>command + 7 显示类中的方法，右键可以将显示区域，移动到 左，上 右 不同区域</p>
<p>command + l 跳转指定的行数</p>
<p>command + x 删除当前行</p>
<p>command + d 复制当前行</p>
<p>command + b 跟踪变量至声明处</p>
<p>command + option + l 格式化代码</p>
<p>command + w 关闭当前窗口</p>
<p>command + option + / 多行注释</p>
<p>command + 6   查找//@todo标签</p>
<p>常用工具条的显示和隐藏在view下编辑。 一些不常用的可以隐藏掉。</p>
<h3 id="多点编辑"><a class="header-anchor" href="#多点编辑">¶</a>多点编辑</h3>
<p>鼠标方式：按住 <code>option</code> ＋ 鼠标左键选中编辑内容</p>
<p>快捷键 ：control + g  和  command ＋ control + g</p>
<h3 id="更改keymap-重置快捷键（按快捷键搜索）"><a class="header-anchor" href="#更改keymap-重置快捷键（按快捷键搜索）">¶</a>更改keymap 重置快捷键（按快捷键搜索）</h3>
<h3 id="live-templates"><a class="header-anchor" href="#live-templates">¶</a>live templates</h3>
<h3 id="主题配置："><a class="header-anchor" href="#主题配置：">¶</a>主题配置：</h3>
<p>常规配置流程 command + ，呼出配置项 或者 <code>preferences</code> 进入 <code>font</code> 选择 <code>scheme</code>配置项 .</p>
<span id="more"></span>
<p>如果选择字体<code>primaryfont</code>，字体大小<code>size</code>或者间距<code>linespacing</code>的话，首先要<code>save as</code> 一份<code>scheme </code>.</p>
<h3 id="自定义主题："><a class="header-anchor" href="#自定义主题：">¶</a>自定义主题：</h3>
<p><code>daylerees.github.io </code>上选择一款自己喜欢的主题： 如选择 <code>Potpourri</code>，然后去<br>
<code>https://github.com/daylerees/colour-schemes/tree/master/jetbrains</code>找到对应的主题文件如图：</p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/choose_theme.png" alt=""></p>
<p>进入选择具体的URL</p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/choose_theme_url.png" alt=""></p>
<p>进入命令行</p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/choose_theme_terminal.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/daylerees/colour-schemes/master/jetbrains/potpourri.icls</span><br></pre></td></tr></table></figure>
<p>下载后重启 phpstrom</p>
<hr>
<p>或者去 <code>http://www.ideacolorthemes.org/themes/</code> 上选择喜欢的主题然后下载.</p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/choose_theme_down.png" alt=""></p>
<p>然后<code>file</code>倒入设置</p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/import.png" alt=""></p>
<hr>
<p>将主题和左侧的工具栏色调保持一致方法：<br>
<code>command +  ，</code>呼出配置项,然后搜索<code>plugins</code>,下载 <code>color Ide</code></p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/silbal_color.png" alt=""></p>
<p><img src="http://o8979n2hu.bkt.clouddn.com/coloride_install.png" alt=""></p>
<p>将主题字体和左侧的工具栏字体保持一致方法：</p>
<h2 id=""><a class="header-anchor" href="#">¶</a><img src="http://o8979n2hu.bkt.clouddn.com/font.png" alt=""></h2>
<p>下载字体（ primary font） 方法：</p>
<p>以FiraCode字体为例</p>
<p>登陆 <code>https://github.com/tonsky/FiraCode</code>  下载 然后 倒入设置</p>
<h3 id="phpstrom-极简主义配置"><a class="header-anchor" href="#phpstrom-极简主义配置">¶</a>phpstrom 极简主义配置</h3>
<p>一 隐藏各种 toolbar</p>
<p>view 去掉 toolbar ，status Bar , Navigation Bar ,Tool Buttons 勾选</p>
<p>二 隐藏 breadcrumbs</p>
<p>呼出配置项，搜索 breadcrumbs ，去掉 show breadcrumbs 勾选项</p>
<p>三 隐藏文件名，保持当前窗口直有一个文件</p>
<p>文件右键，选择 tabs placement ,选择 none</p>
<p>恢复，呼出配置项 搜索 editor tabs 重新指定 placement 属性</p>
<p>四 配置主题</p>
<p>去选主题 <a href="http://daylerees.github.io">http://daylerees.github.io</a></p>
<p>下载主题 <a href="https://github.com/daylerees/colour-schemes">https://github.com/daylerees/colour-schemes</a> 选择 jetbrains ，具体参数以上步骤。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cd ~/Library/Preferences/WebIde100/colors</span><br><span class="line"></span><br><span class="line">wget https:<span class="comment">//raw.githubusercontent.com/daylerees/colour-schemes/master/jetbrains/earthsong.icls</span></span><br></pre></td></tr></table></figure>
<p>重启 phpstrom，呼出配置项，选择主题 ，save as 为 earthsong-theme，在重新设置字体等。</p>
<p>五 统一 left bar 的颜色</p>
<p>快捷键 command + shift + A  搜索 plugins 然后选择 config plugins，或者 呼出配置项 搜索 plugins,然后选择 Browse repositores … , 搜索color ide ,安装</p>
<p>六 两个重要的快捷键重置</p>
<p>（1）搜索文件 改为 command + P</p>
<p>command + shift + A  搜索 keymap 进入设置项页面，首先将default  copy一份后在重置，点击copy ,命名 lihongwei-keymap</p>
<p>搜索 command + shift + O , 然后 remove  command + shift + O ,在 add keyboard shortcut ,输入新的快捷键，点 ok</p>
<p>(2) 列出文件中的方法原快捷键 command + F12 改为 command + W</p>
<pre><code>方法同上,注意 F12 同时要按住 Fn
</code></pre>
<p>七 快速创建文件</p>
<pre><code>command + 上箭头 产看当前文件路径，可以通过左右箭头控制要创建文件所要在的目录然后，在按 command + N 调出新建文件选项框
</code></pre>
<p>八 模版</p>
<pre><code>连续两下 shift 搜索 file template  或者 command + shift + A  搜索 file template

(1) 新建模版名为 Eloquent Model ，Extension 为 php 
</code></pre>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#parse(&quot;PHP File Header.php&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#if ($&#123;NAMESPACE&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> $&#123;<span class="title">NAMESPACE</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">#end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> $</span>&#123;NAME&#125; <span class="keyword">extends</span> Eloquent &#123;</span><br><span class="line">    <span class="keyword">protected</span> \<span class="variable">$fillable</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>然后去新建 Eloquent Model
</code></pre>
<p>九 动态模版</p>
<p>十 关于构造，set,get,doc</p>
<pre><code>创建构造方法,设置属性值 ,获取属性值 ，文档注释 command + N 选择对应的选项

给构造方法做依赖注入快捷键 option + return (回车) 然后可以指定要构造的属性 ，前提条件，鼠标要在构造方法的括号内

构造的动态模版,搜索 live template ,选择 php ,新建 _c
</code></pre>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$ARGS$</span>)</span>&#123;</span><br><span class="line">    $END$</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最后difine PHP</p>
<p>使用 直接 _c ，然后 option + return</p>
]]></content>
      <categories>
        <category>编辑器</category>
      </categories>
      <tags>
        <tag>phpstrom</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful API 设计要素</title>
    <url>/2016/06/03/RESTful-API/</url>
    <content><![CDATA[<h1>RESTful API 设计</h1>
<h3 id="协议"><a class="header-anchor" href="#协议">¶</a>协议</h3>
<p><code>API</code>与用户的通信协议，<code>HTTPS/HTTP</code>。</p>
<h3 id="域名"><a class="header-anchor" href="#域名">¶</a>域名</h3>
<p><code>https://api.domain.com</code> 专用api域名<br>
或者<br>
<code>https://domain.com/api/</code> 将api作为一个模块</p>
<h3 id="版本（Versioning）"><a class="header-anchor" href="#版本（Versioning）">¶</a>版本（Versioning）</h3>
<p><code>https://api.example.com/v1/</code> 将版本号体现在URL上</p>
<h3 id="路径"><a class="header-anchor" href="#路径">¶</a>路径</h3>
<p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的&quot;集合&quot;（collection），所以API中的名词也应该使用复数。</p>
<p><code>https://api.example.com/v1/article</code></p>
<span id="more"></span>
<h3 id="HTTP动词"><a class="header-anchor" href="#HTTP动词">¶</a>HTTP动词</h3>
<p>对于资源的具体操作类型，由HTTP动词表示。<br>
常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p>
<p><code>GET（SELECT）</code>：从服务器取出资源（一项或多项）。<br>
<code>POST（CREATE）</code>：在服务器新建一个资源。<br>
<code>PUT（UPDATE）</code>：在服务器更新资源（客户端提供改变后的完整资源）。<br>
<code>PATCH（UPDATE）</code>：在服务器更新资源（客户端提供改变的属性）。<br>
<code>DELETE（DELETE）</code>：从服务器删除资源。</p>
<p>下面是一些例子。</p>
<p><code>GET /article</code>：列出所有文章<br>
<code>POST /article</code>：新建一篇文章<br>
<code>GET /article/ID</code>：获取一篇文章<br>
<code>PUT /article/ID</code>：更新一篇文章  （提供文章的全部信息）<br>
<code>PATCH /article/ID</code>：更新一篇文章（提供文章的部分信息）<br>
<code>DELETE /article/ID</code>：删除一篇文章<br>
<code>GET /article/ID/tags</code>：列出一篇文章的所有标签<br>
<code>DELETE /article/ID/tags/ID</code>：删除一篇文章的一个标签</p>
<h3 id="过滤信息（Filtering）"><a class="header-anchor" href="#过滤信息（Filtering）">¶</a>过滤信息（Filtering）</h3>
<p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。<br>
下面是一些常见的参数。</p>
<p>?limit=10：指定返回记录的数量<br>
?offset=10：指定返回记录的开始位置。<br>
?page=2&amp;per_page=100：指定第几页，以及每页的记录数。<br>
?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。<br>
?article_type_id=1：指定筛选条件</p>
<h3 id="状态码（Status-Codes）"><a class="header-anchor" href="#状态码（Status-Codes）">¶</a>状态码（Status Codes）</h3>
<p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p>
<p>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。<br>
201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。<br>
202 Accepted - [<em>]：表示一个请求已经进入后台排队（异步任务）<br>
204 NO CONTENT - [DELETE]：用户删除数据成功。<br>
400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。<br>
401 Unauthorized - [</em>]：表示用户没有权限（令牌、用户名、密码错误）。<br>
403 Forbidden - [<em>] 表示用户得到授权（与401错误相对），但是访问是被禁止的。<br>
404 NOT FOUND - [</em>]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。<br>
406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。<br>
410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。<br>
422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。<br>
500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</p>
<h3 id="错误处理（Error-handling）"><a class="header-anchor" href="#错误处理（Error-handling）">¶</a>错误处理（Error handling）</h3>
<p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    error: <span class="string">&quot;Invalid API key&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="返回结果"><a class="header-anchor" href="#返回结果">¶</a>返回结果</h3>
<p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p>
<p><code>GET /collection：返回资源对象的列表（数组）</code><br>
<code>GET /collection/resource：返回单个资源对象</code><br>
<code>POST /collection：返回新生成的资源对象</code><br>
<code>PUT /collection/resource：返回完整的资源对象</code><br>
<code>PATCH /collection/resource：返回完整的资源对象</code><br>
<code>DELETE /collection/resource：返回一个空文档</code></p>
<h3 id="Hypermedia-API"><a class="header-anchor" href="#Hypermedia-API">¶</a>Hypermedia API</h3>
<p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。<br>
比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;link&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;rel&quot;</span>:   <span class="string">&quot;collection https://www.example.com/zoos&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;href&quot;</span>:  <span class="string">&quot;https://api.example.com/zoos&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;List of zoos&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>:  <span class="string">&quot;application/vnd.yourformat+json&quot;</span></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。<br>
<code>Hypermedia API</code>的设计被称为<code>HATEOAS</code>。Github的API就是这种设计，访问<code>api.github.com</code>会得到一个所有可用API的网址列表。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;current_user_url&quot;</span>: <span class="string">&quot;https://api.github.com/user&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;authorizations_url&quot;</span>: <span class="string">&quot;https://api.github.com/authorizations&quot;</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面可以看到，如果想获取当前用户的信息，<a href="http://xn--api-du3ey90cj37dtha474e.github.com/user%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%B1%E5%BE%97%E5%88%B0%E4%BA%86%E4%B8%8B%E9%9D%A2%E7%BB%93%E6%9E%9C%E3%80%82">应该去访问api.github.com/user，然后就得到了下面结果。</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;Requires authentication&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;documentation_url&quot;</span>: <span class="string">&quot;https://developer.github.com/v3&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p>
<h3 id="安全和其它"><a class="header-anchor" href="#安全和其它">¶</a>安全和其它</h3>
<p>（1）API的身份认证应该使用OAuth 2.0框架。<br>
（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</p>
]]></content>
      <categories>
        <category>api</category>
      </categories>
      <tags>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务领域设计范式-领域边界-领域职责</title>
    <url>/2016/06/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1-domain/</url>
    <content><![CDATA[<h3 id="design-step"><a class="header-anchor" href="#design-step">¶</a>design step</h3>
<ul>
<li>
<p>确定领域边界，领域功能（所能暴露的接口功能） ， 领域模型</p>
</li>
<li>
<p>概要设计 api</p>
</li>
<li>
<p>详细设计 API 输入 输出</p>
</li>
<li>
<p>coding 重要的业务画一画流程图</p>
</li>
</ul>
<h3 id="服务拆分"><a class="header-anchor" href="#服务拆分">¶</a>服务拆分</h3>
<p>就现在的软件工程来说，都可以通过抽象来优雅的解决问题。</p>
<p>重点：明确职责，关注点分离 。</p>
<p>不要重复早轮子，你自己造的轮子是自己一个人拍着脑袋瓜造的，结对编程或者一个屋子就一台电脑几个人轮溜写代码，有足够多的眼睛，就可以让问题浮现。</p>
<p>重要的业务场景一定要化流程图。结对编程。</p>
<p>追求单个文件代码行数，还是文件个数，取决你是否 能够快速描述一段代码的流程</p>
<p>服务拆分：代码按照业务 水平拆，结对编程 垂直拆，这里可能涉及到devpos 的反模式。</p>
<h3 id="pass-云平台-part-component"><a class="header-anchor" href="#pass-云平台-part-component">¶</a>pass 云平台 part component</h3>
<h3 id="Apigetway"><a class="header-anchor" href="#Apigetway">¶</a>Apigetway</h3>
<h3 id="服务注册中心"><a class="header-anchor" href="#服务注册中心">¶</a>服务注册中心</h3>
<p>服务注册中心是服务发现的核心。它保存了各个可用服务实例的网络地址（IP Address和Port）。服务注册中心必须要有高可用性和实时更新功能。</p>
<p>服务发现的核心是服务注册中心。服务注册中心保存了各个服务可用的实例的相关信息。服务注册中心提供了管理API和查询API。使用管理API进行服务注册、注销。系统的其他组件可以通过查询API来获得当前可用的服务实例信息。<br>
有两种主要的服务发现方式：客户端发现（client-side service discovery）和服务端发现（ server-side discovery）。在使用客户端服务发现的方式中，客户通过查询服务注册中心，选择一个可用的服务实例。在使用服务器端发现系统中，客户访问Router/load balancer，通过Router/load balancer查询服务注册中心，并将请求转发到一个可用服务实例上。<br>
服务注册和注销的方式也有两种。一种是服务自己主动的将自己注册到服务注册中心，称为self-registration。另一种是通过其他组件来处理服务的注册和注销，称为third-party registration。</p>
<p>不同语言之间可以通过各种代理实现服务注册。</p>
<h3 id="problem"><a class="header-anchor" href="#problem">¶</a>problem</h3>
<p>程序层级目录结构：尽量避免已程序层面建立目录 ， 应从业务角度组建目录结构，并且保证功能文件的高内聚低耦合 。</p>
<p>支持门面包装服务。</p>
<h3 id="Minimum-Viable-Product"><a class="header-anchor" href="#Minimum-Viable-Product">¶</a>Minimum Viable Product</h3>
<p>是一种避免开发出客户并不真正需要的产品的开发策略。该策略的基本想法是，快速地构建出符合产品预期功能的最小功能集合，这个最小集合所包含的功能足以满足产品部署的要求并能够检验有关客户与产品交互的关键假设[1]。该概念由Eric Ries在其著作《精益创业实战》中提出，用最快、最简明的方式建立一个可用的产品原型，这个原型要表达出你产品最终想要的效果，然后通过迭代来完善细节。</p>
<p><a href="http://www.jianshu.com/p/2e1ca1c22b65">http://www.jianshu.com/p/2e1ca1c22b65</a></p>
<p><a href="http://www.woshipm.com/pd/237443.html">http://www.woshipm.com/pd/237443.html</a></p>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>用异或运算实现一种加密解密方法</title>
    <url>/2016/05/29/php-sign/</url>
    <content><![CDATA[<h1>先来介绍PHP几个函数</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ctype_alpha    <span class="comment">//检查字符串是否全是字母</span></span><br><span class="line">ctype_lower    <span class="comment">//检查字符串是否小写</span></span><br><span class="line">ctype_upper    <span class="comment">//检查字符串是否大写</span></span><br><span class="line">ctype_digit    <span class="comment">//检查字符串是否全是数字</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">StrCode</span>(<span class="params"><span class="variable">$string</span>, <span class="variable">$action</span> =<span class="string">&#x27;ENCODE&#x27;</span></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$action</span>!= <span class="string">&#x27;ENCODE&#x27;</span> &amp;&amp; <span class="variable">$string</span> = base64_decode(<span class="variable">$string</span>);</span><br><span class="line">    <span class="variable">$code</span>= <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="variable">$key</span>= <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>;</span><br><span class="line">	<span class="variable">$keyLen</span>= strlen(<span class="variable">$key</span>);</span><br><span class="line">	<span class="variable">$strLen</span>= strlen(<span class="variable">$string</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$strLen</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">		<span class="variable">$k</span>= <span class="variable">$i</span> % <span class="variable">$keyLen</span>;</span><br><span class="line">		<span class="comment">/*  1 ^ 1 (加密因子密钥) 0  ^ 1 = 1</span></span><br><span class="line"><span class="comment">		*  0 ^ 1 (加密因子密钥)  1  ^ 1 = 0 </span></span><br><span class="line"><span class="comment">		*  1 ^ 0 (加密因子密钥)  1  ^ 0 = 1</span></span><br><span class="line"><span class="comment">		*  0 ^ 0 (加密因子密钥)  0  ^ 0 = 0</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="variable">$code</span>.= <span class="variable">$string</span>[<span class="variable">$i</span>] ^ <span class="variable">$key</span>[<span class="variable">$k</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>(<span class="variable">$action</span> != <span class="string">&#x27;DECODE&#x27;</span> ? base64_encode(<span class="variable">$code</span>) : <span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>sign</tag>
      </tags>
  </entry>
  <entry>
    <title>memcache</title>
    <url>/2016/05/29/memcache/</url>
    <content><![CDATA[<hr>
<h1>memcache 一致性hash</h1>
<hr>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// memcache一致性hash实现,为了解决多台memcache服务器setcache的时候增加或删除节点导致,缓存瞬间命不中问题 通话hash算法将节点映射到一个圆环上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义循环链表 长度 为2的32 次方</span></span><br><span class="line"><span class="variable">$circle</span> = <span class="keyword">array</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将3台memcache 服务器节点映射的圆环上</span></span><br><span class="line"><span class="variable">$circle</span>[<span class="string">&#x27;3&#x27;</span>] = <span class="string">&#x27;192.168.10.1&#x27;</span>;</span><br><span class="line"><span class="variable">$circle</span>[<span class="string">&#x27;6&#x27;</span>] = <span class="string">&#x27;192.168.10.2&#x27;</span>;</span><br><span class="line"><span class="variable">$circle</span>[<span class="string">&#x27;9&#x27;</span>] = <span class="string">&#x27;192.168.10.3&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立cache请求</span></span><br><span class="line"><span class="variable">$key</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$circle</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(strlen(<span class="variable">$circle</span>[<span class="variable">$key</span>])!=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="variable">$cache</span>-&gt;connect(<span class="variable">$circle</span>[<span class="variable">$key</span>],<span class="string">&#x27;11211&#x27;</span>);</span><br><span class="line">		<span class="variable">$cache</span>-&gt;set(<span class="variable">$key</span>,<span class="string">&#x27;val&#x27;</span>);<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>1、一致性hash算法只是帮我们减少cache集群中的机器数量增减的时候，cache的数据能进行最少重建。只要cache集群的server数量有变化，必然产生数据命中的问题<br>
2、对于数据的分布均衡问题，通过虚拟节点的思想来达到均衡分配。当然，我们cache server节点越少就越需要虚拟节点这个方式来均衡负载。<br>
3、我们的cache客户端根本不会维护一个map来记录每个key存储在哪里，都是通过key的hash和cacheserver（也许ip可以作为参数）的hash计算当前的key应该存储在哪个节点上。<br>
4、当我们的cache节点崩溃了。我们必定丢失部分cache数据，并且要根据活着的cache server和key进行新的一致性匹配计算。有可能对部分没有丢失的数据也要做重建…<br>
5、至于正常到达数据存储节点，如何找到key对应的数据，那就是cache server本身的内部算法实现了，此处不做描述。<br>
这里只是针对数据的存储方式以及提取方式进行了流程展示。</p>
]]></content>
      <categories>
        <category>memcache</category>
      </categories>
      <tags>
        <tag>memcache</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础数据类型</title>
    <url>/2016/05/29/python-base/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/python</span></span><br><span class="line"><span class="comment">#ecoding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#倒入所需要的模块</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">＃打印语句</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;你好!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#变量的申明，前面不用加修饰类型</span></span><br><span class="line"><span class="comment">#--int类型</span></span><br><span class="line">intA = <span class="number">1</span>;</span><br><span class="line">intB = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#int类型和String 不能直接用+号，需要转成String再拼接。</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;values:&quot;</span> + <span class="built_in">str</span>(intA + intB);</span><br><span class="line"></span><br><span class="line"><span class="comment">#boolean 类型 要注意里面的大小写 True和False</span></span><br><span class="line">name = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#if语句，需要一起和for注意的是后面加冒号（:）</span></span><br><span class="line"><span class="keyword">if</span> name== <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#for</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法（也在函数的叫法）的申明。同样不要忘记了冒号，因为Python不像其他语言那样还要括号，是按严格的格式来区分的所以个人也比较喜欢在方法后面加个结束注释。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printName</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span> name</span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">len</span>(name)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#end fun printName</span></span><br><span class="line"></span><br><span class="line">printName(<span class="string">&quot;my name is xxx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#容器,习惯Java的朋友肯定也会像我一样想到数组（String[]）、集合（List、Map）Python也同样有类似的类型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#列表List，类型Java中的集合List    </span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;array&quot;</span>]</span><br><span class="line">a.append(<span class="string">&quot;insert values&quot;</span>)</span><br><span class="line">a.insert(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span> v</span><br><span class="line">    </span><br><span class="line"><span class="comment">#元组 trupe，和Java中的数组类似  </span></span><br><span class="line">array = (<span class="string">&quot;array1&quot;</span>,<span class="string">&quot;array2&quot;</span>,<span class="string">&quot;array3&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> arr <span class="keyword">in</span> array:</span><br><span class="line">    <span class="built_in">print</span> arr</span><br><span class="line"></span><br><span class="line"><span class="comment">#Dict 和Java中的map类似</span></span><br><span class="line">mapValues = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;text123&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span> mapValues.get(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> mapValues[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#time函数，需要在头部添加 import time</span></span><br><span class="line">time.sleep(<span class="number">1.5</span>) <span class="comment">#这里的单位是秒，和Java毫秒不一样。当然可以传入小数</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;print content&quot;</span></span><br><span class="line"><span class="built_in">print</span> time.time() </span><br><span class="line"><span class="built_in">print</span> time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%d&#x27;</span>) <span class="comment"># Java 中SimpleDateFormat</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#os对系统一些操作</span></span><br><span class="line"><span class="built_in">print</span> os.name <span class="comment">#使用的平台</span></span><br><span class="line"><span class="built_in">print</span> os.getcwd() <span class="comment">#当前工作目录</span></span><br><span class="line">files = os.listdir(<span class="string">&#x27;E:\software&#x27;</span>)</span><br><span class="line"><span class="comment">#for f in files:</span></span><br><span class="line"><span class="comment">#print f</span></span><br><span class="line"><span class="comment">#os.remove(&#x27;D://Test.java&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#MD5</span></span><br><span class="line">m = md5.new(<span class="string">&quot;test123&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> m.digest()        <span class="comment">#16位</span></span><br><span class="line"><span class="built_in">print</span> m.hexdigest()     <span class="comment">#32位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#random</span></span><br><span class="line"><span class="built_in">print</span> random.random()</span><br><span class="line"></span><br><span class="line"><span class="comment">#file </span></span><br><span class="line">textFile = <span class="built_in">open</span>(<span class="string">&quot;D:\\test.txt&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> textFile.readlines():</span><br><span class="line">    <span class="built_in">print</span> line</span><br><span class="line">file.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Yii匿名函数</title>
    <url>/2016/05/28/Yiidaytoday/</url>
    <content><![CDATA[<hr>
<h1>Yii2匿名函数小应用</h1>
<hr>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">console</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">console</span>\<span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$enableCsrfValidation</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在循环中使用闭包时,要注意如果一个变量在闭包中改变了值,到下一次循环时,不会被释放</span></span><br><span class="line">        <span class="variable">$type</span> = [];</span><br><span class="line">        <span class="variable">$flg</span>  = <span class="number">0</span>; <span class="comment">//要改变的变量 或者对象</span></span><br><span class="line">        <span class="variable">$data</span> = [</span><br><span class="line">            [<span class="string">&#x27;type&#x27;</span>=&gt;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;one_level&#x27;</span>=&gt;<span class="number">100</span>,<span class="string">&#x27;two_lever&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;phone&#x27;</span>=&gt;<span class="string">&#x27;15510337665&#x27;</span> ],</span><br><span class="line">            [<span class="string">&#x27;type&#x27;</span>=&gt;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;one_level&#x27;</span>=&gt;<span class="number">100</span>,<span class="string">&#x27;two_lever&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;phone&#x27;</span>=&gt;<span class="string">&#x27;15510337665&#x27;</span> ],</span><br><span class="line">            [<span class="string">&#x27;type&#x27;</span>=&gt;<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;one_level&#x27;</span>=&gt;<span class="number">100</span>,<span class="string">&#x27;two_lever&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;phone&#x27;</span>=&gt;<span class="string">&#x27;15510337665&#x27;</span> ],</span><br><span class="line">            [<span class="string">&#x27;type&#x27;</span>=&gt;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;one_level&#x27;</span>=&gt;<span class="number">100</span>,<span class="string">&#x27;two_lever&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;phone&#x27;</span>=&gt;<span class="string">&#x27;15510337665&#x27;</span> ],</span><br><span class="line">            [<span class="string">&#x27;type&#x27;</span>=&gt;<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;one_level&#x27;</span>=&gt;<span class="number">100</span>,<span class="string">&#x27;two_lever&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;phone&#x27;</span>=&gt;<span class="string">&#x27;15510337665&#x27;</span> ],</span><br><span class="line">            [<span class="string">&#x27;type&#x27;</span>=&gt;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;one_level&#x27;</span>=&gt;<span class="number">100</span>,<span class="string">&#x27;two_lever&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;phone&#x27;</span>=&gt;<span class="string">&#x27;15510337665&#x27;</span> ],</span><br><span class="line">            [<span class="string">&#x27;type&#x27;</span>=&gt;<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;one_level&#x27;</span>=&gt;<span class="number">100</span>,<span class="string">&#x27;two_lever&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;phone&#x27;</span>=&gt;<span class="string">&#x27;15510337665&#x27;</span> ],</span><br><span class="line">        ] ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;filter(<span class="variable">$val</span> , <span class="variable">$flg</span> ,<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$ret</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$type</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">                file_put_contents(<span class="string">&#x27;lhw.log&#x27;</span>,var_export(<span class="variable">$ret</span>,<span class="literal">true</span>).PHP_EOL,FILE_APPEND);</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span>,<span class="variable">$flg</span>,<span class="variable">$fun</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$flg</span> = <span class="number">500</span>; <span class="comment">//下次循环500不会从内存中释放</span></span><br><span class="line">            <span class="variable">$arr</span>[<span class="string">&#x27;one_level&#x27;</span>] = <span class="variable">$arr</span>[<span class="string">&#x27;one_level&#x27;</span>] + <span class="number">1000</span>;</span><br><span class="line">            <span class="variable">$arr</span>[<span class="string">&#x27;flg&#x27;</span>] = <span class="variable">$flg</span> + <span class="variable">$arr</span>[<span class="string">&#x27;one_level&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$fun</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用过滤</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionFilter</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//习惯使用list 指定获取索引数组值</span></span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$value</span>, <span class="variable">$property</span>, <span class="variable">$cType</span>) = [<span class="string">&#x27;dd&#x27;</span>,<span class="string">&#x27;33&#x27;</span>,<span class="string">&#x27;32&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用匿名函数过滤元素</span></span><br><span class="line">        <span class="variable">$filterItem</span>[<span class="string">&#x27;andor&#x27;</span>] = <span class="string">&#x27;or&#x27;</span>;<span class="comment">//过滤元素</span></span><br><span class="line">        <span class="variable">$andor</span> = call_user_func(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$default</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$filterItem</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ((array_key_exists(<span class="string">&#x27;andor&#x27;</span>, <span class="variable">$filterItem</span>)) &amp;&amp; (strtolower(<span class="variable">$filterItem</span>[<span class="string">&#x27;andor&#x27;</span>]) == <span class="string">&#x27;or&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;OR&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$default</span>;</span><br><span class="line">        &#125;, <span class="string">&quot;AND&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结合使用</span></span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$val</span>) = [call_user_func(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$default</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$filterItem</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ((array_key_exists(<span class="string">&#x27;andor&#x27;</span>, <span class="variable">$filterItem</span>)) &amp;&amp; (strtolower(<span class="variable">$filterItem</span>[<span class="string">&#x27;andor&#x27;</span>]) == <span class="string">&#x27;or&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;OR&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$default</span>;</span><br><span class="line">        &#125;,<span class="string">&#x27;default&#x27;</span>)];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$val</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果整个action 都要求返回json 可以在进action 之前 判断转换如：</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeAction</span>(<span class="params"><span class="variable">$action</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Yii::<span class="variable">$app</span>-&gt;request-&gt;isAjax) &#123;</span><br><span class="line"></span><br><span class="line">            Yii::<span class="variable">$app</span>-&gt;response-&gt;format = Response::FORMAT_JSON;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>   <span class="built_in">parent</span>::beforeAction(<span class="variable">$action</span>);<span class="comment">//必须return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionApi</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;lwh&#x27;</span>] ;<span class="comment">//自动转换成json</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用模型对象添加数据的一种方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionAdd</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        SmsMessage::initSms(</span><br><span class="line">            <span class="variable">$user</span>,</span><br><span class="line">            [<span class="variable">$user</span>-&gt;real_name,  date(<span class="string">&#x27;Y-m-d H:i&#x27;</span>, <span class="variable">$draw</span>-&gt;created_at), <span class="variable">$draw</span>-&gt;money, <span class="string">&#x27;T+1&#x27;</span>, Yii::<span class="variable">$app</span>-&gt;params[<span class="string">&#x27;contact_tel&#x27;</span>]],</span><br><span class="line">            Yii::<span class="variable">$app</span>-&gt;params[<span class="string">&#x27;sms&#x27;</span>][<span class="string">&#x27;tixian_apply&#x27;</span>]</span><br><span class="line">        )-&gt;save(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数据模型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">initSms</span>(<span class="params">User <span class="variable">$user</span>, <span class="keyword">array</span> <span class="variable">$message</span>, <span class="variable">$template_id</span>, <span class="variable">$level</span> = <span class="built_in">self</span>::LEVEL_MIDDLE</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$smsmsg</span> = <span class="keyword">new</span> <span class="built_in">self</span>([</span><br><span class="line">            <span class="string">&#x27;uid&#x27;</span> =&gt; <span class="variable">$user</span>-&gt;id,</span><br><span class="line">            <span class="string">&#x27;template_id&#x27;</span> =&gt; <span class="variable">$template_id</span>,</span><br><span class="line">            <span class="string">&#x27;mobile&#x27;</span> =&gt; <span class="variable">$user</span>-&gt;mobile,</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span> =&gt; <span class="variable">$level</span>,</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span> =&gt; json_encode(<span class="variable">$message</span>),</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$smsmsg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Yii</category>
      </categories>
      <tags>
        <tag>Yii</tag>
      </tags>
  </entry>
  <entry>
    <title>designpatterns</title>
    <url>/2016/05/22/designpatterns/</url>
    <content><![CDATA[<h1>组合模式</h1>
<p>组合模式相关概念：依赖注入、控制反转</p>
<h3 id="依赖注入概念："><a class="header-anchor" href="#依赖注入概念：">¶</a>依赖注入概念：</h3>
<p>一个类如果想使用另一类中的某些方法或者属性，除了继承外，也可以使用组合，组合的含义是将继承或者在构造触发new的过程，提到类的外面去做，采用依赖注入的方式传递对象。（消除了依赖）降低代码耦合程度，提高项目的可维护性。</p>
<span id="more"></span>
<p>这种注入的缺陷在于：我们的业务层对依赖单元的实例化代码是一个重复、繁琐的过程。</p>
<h3 id="控制反转概念："><a class="header-anchor" href="#控制反转概念：">¶</a>控制反转概念：</h3>
<p>将类（上层）,所依赖的单元（下层）的实例化过程交由第三方来实现。一个简单的特征，就是类中不对所依赖的单元有诸如 $component = new yii\component\SomeClass（） 的实例化语句。</p>
<p>Yii中为什么要使用DI，像上面所所说的，一个类如果想使用另一类中的某些方法或者属性，除了继承外，也可以使用组合，也就是DI模式，其本质现象就是，我访问我所依赖的单元对象中成员方法或者属性时就像访问本类一样。因为我已经通过DI将本类所依赖的单元注入到了本类中。</p>
<h3 id="什么时候是有继承，什么时候使用接口"><a class="header-anchor" href="#什么时候是有继承，什么时候使用接口">¶</a>什么时候是有继承，什么时候使用接口</h3>
<p>继承意味着公用，公用的含义：</p>
<p>一 公用的功能、逻辑，意味着具体的，可封装的</p>
<p>二 公用的特性，但是表现不一样，意味着抽象，抽象类</p>
<p>基于以上可以使用继承。</p>
<p>接口，当某些实例拥有一部分区别于其他同类实例的特性，那么这些特性是不适合被这些类继承过来的，那么这些特性可以使用接口，只有适用这些特性的类来实现这个接口。</p>
<h3 id="策略-和-多态"><a class="header-anchor" href="#策略-和-多态">¶</a>策略 和 多态</h3>
<h3 id="工厂-和-抽象工厂"><a class="header-anchor" href="#工厂-和-抽象工厂">¶</a>工厂 和 抽象工厂</h3>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Yii_install</title>
    <url>/2016/05/17/Yii-install/</url>
    <content><![CDATA[<h1>用composer 安装Yii2</h1>
<p>安装依赖包方式，获取定义的依赖到你的本地项目，只需要调用 composer.phar 运行 install 命令如。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php composer.phar install</span><br></pre></td></tr></table></figure>
<p>安装时需要<code>githug</code>账号，下载时需要token,可以通过 <code>git  ssh-keygen</code> 生成 token秘钥</p>
<p>一 先下载 advanced 模板  <a href="https://github.com/yiisoft/yii2-app-advanced">https://github.com/yiisoft/yii2-app-advanced</a><br>
二 dos cd 到 advanced 模板下 ：执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php -r <span class="string">&quot;readfile(&#x27;https://getcomposer.org/installer&#x27;);&quot;</span> | php   </span><br><span class="line"><span class="comment">//下载 composer.phar </span></span><br></pre></td></tr></table></figure>
<p>三 准备插件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php composer.phar <span class="keyword">global</span> <span class="keyword">require</span> <span class="string">&quot;fxp/composer-asset-plugin:1.0.0&quot;</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php composer.phar <span class="keyword">global</span> <span class="keyword">require</span> <span class="string">&quot;fxp/composer-asset-plugin:~1.1.1&quot;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>要保证 composer 版本一致 升级 1.1.1 更新命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">composer <span class="built_in">self</span>-update</span><br><span class="line">composer update</span><br></pre></td></tr></table></figure>
<p>四  安装</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php composer.phar create-project --prefer-dist --stability=dev yiisoft/yii2-app-advanced  ../yii2test</span><br></pre></td></tr></table></figure>
<p>五 最后一步：初始化我们的应用,初始化是在你创建的yii2test目录下 执行 init命令 选0 按y</p>
<p>最后Yii2 添加新应用需要注意的地方 以新加wap 站为例</p>
<p>一  将 frontend 前台复制一份 改名wap(注意把里面所有文件的命名空间改为 wap的)<br>
二  将common/config bootstrap 新加一份 wap 的别名<br>
三  将common/config main.php  新加路由修改配置（不使用默认路由规则）<br>
将改过来的wap 下的config 的main.php 中的 <code>id</code> 和<code>controllerNamespace</code> 等改正确</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;urlManager&#x27;</span> =&gt; [</span><br><span class="line">    <span class="string">&#x27;enablePrettyUrl&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;showScriptName&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>四：修改apache 路由规则 隐藏点 index.php<br>
RewriteEngine on<br>
RewriteCond %{REQUEST_FILENAME} !-d<br>
RewriteCond %{REQUEST_FILENAME} !-f<br>
RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]</p>
]]></content>
      <categories>
        <category>Yii</category>
      </categories>
      <tags>
        <tag>Yii</tag>
      </tags>
  </entry>
  <entry>
    <title>svn 搭建</title>
    <url>/2016/05/17/svn/</url>
    <content><![CDATA[<h1>ubuntu svn 搭建步骤：</h1>
<h4 id="🐷-安装"><a class="header-anchor" href="#🐷-安装">¶</a>🐷 安装</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install subversion</span><br></pre></td></tr></table></figure>
<h4 id="建立版本库"><a class="header-anchor" href="#建立版本库">¶</a>建立版本库</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /data/repos</span><br><span class="line">sudo svnadmin create /data/repos/client</span><br><span class="line">sudo svnadmin create /data/repos/server</span><br><span class="line">sudo svnadmin create /data/repos/api</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="配置文件"><a class="header-anchor" href="#配置文件">¶</a>配置文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi authz</span><br><span class="line">[/]</span><br><span class="line">lhw=rw</span><br><span class="line">zhang=rw</span><br><span class="line"></span><br><span class="line">sudo vi passwd</span><br><span class="line">[users]</span><br><span class="line">zhang=123456</span><br><span class="line">lhw=123456</span><br><span class="line"></span><br><span class="line">sudo vi svnserve.conf</span><br><span class="line">anon-access = none </span><br><span class="line">auth-access = write</span><br><span class="line">password-db = passwd</span><br><span class="line">realm = /data/repos </span><br></pre></td></tr></table></figure>
<h4 id="启动svn-注意目录为版本仓库的上一级目录"><a class="header-anchor" href="#启动svn-注意目录为版本仓库的上一级目录">¶</a>启动svn (注意目录为版本仓库的上一级目录)</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo svnserve -d -r /data/repos/</span><br></pre></td></tr></table></figure>
<h4 id="杀掉svn"><a class="header-anchor" href="#杀掉svn">¶</a>杀掉svn</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">killall svnserve</span><br></pre></td></tr></table></figure>
<p>如果出现：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">svn: warning: cannot set LC_CTYPE locale</span><br><span class="line">svn: warning: environment variable LC_CTYPE is UTF-<span class="number">8</span></span><br><span class="line">svn: warning: please check that your locale name is correct</span><br></pre></td></tr></table></figure>
<p>解决： 参考 <a href="http://stackoverflow.com/questions/11300633/svn-cannot-set-lc-ctype-locale">http://stackoverflow.com/questions/11300633/svn-cannot-set-lc-ctype-locale</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sudo apt-get install language-pack-en-base</span><br><span class="line"></span><br><span class="line">sudo locale-gen UTF-<span class="number">8</span></span><br><span class="line">sudo locale-gen en_GB.UTF-<span class="number">8</span></span><br><span class="line">sudo locale-gen en_US.UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>svn</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2016/05/15/nginx/</url>
    <content><![CDATA[<h1>nginx 信号控制</h1>
<hr>
<h3 id="查看服务端口列表项"><a class="header-anchor" href="#查看服务端口列表项">¶</a>查看服务端口列表项</h3>
<p><code>netstat -antp</code> (p是显示那个进程 和进程号)</p>
<h3 id="查看进程"><a class="header-anchor" href="#查看进程">¶</a>查看进程</h3>
<p><code>ps -aux | grep 80 </code> （httpd）</p>
<h3 id="信号控制"><a class="header-anchor" href="#信号控制">¶</a>信号控制</h3>
<p>使用参数<code>INT</code>是紧急杀掉进程非常暴力（特殊场景不推荐），<code>QUIT</code> 优雅的杀掉进程，等待<code>work</code>主进程接收处理所有请求后在杀掉。<code>HUP</code>平滑的读取配置文件，不用重启nginx就能使配置文件生效（很重要），<code>USR1</code> 告诉nginx 写入log 往新建的文件中写（在备份log日志时必须要用，因为<code>linux</code>中的文件存放地址是通过<code>innode</code>号存储的，当mv 备份文件的时候只是变化名字而已，而<code>innode</code>号依然不变，所有nginx依然往原始的<code>innode</code>号文件写入日志，此时需要用信号量<code>USR1</code>）。</p>
<span id="more"></span>
<p><code>kill -INT 进程号</code>  杀掉nginx进程，<code>ps -aux | greap nginx</code>查看进程号</p>
<p>小技巧：有时候经常需要查看 nginx 主进程号， 可以查看pid的存放文件，这样用的时候直接如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -INT  <span class="string">&#x27;cat  /usr/local/var/niginx/log/nginx.pid&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="nginx第二种启动方法"><a class="header-anchor" href="#nginx第二种启动方法">¶</a>nginx第二种启动方法</h3>
<p>nginx  -s reload 重启<br>
nginx -s stop 停止<br>
nginx -s reopen 重新读取配置文件<br>
nginx -t  查看配置文件配置是否正确</p>
<h3 id="虚拟主机配置"><a class="header-anchor" href="#虚拟主机配置">¶</a>虚拟主机配置</h3>
<p>Nginx 的虚拟主机就是配置 http 中的 server 块。<br>
可以基于 域名、端口、和ip 主要 三项：<br>
<code>listen、server_name、location&#123; root:&#125;</code></p>
<p>Location 定位配置块 三种:</p>
<ol>
<li>精准匹配（精准匹配最好不要匹配跟目录，会默认追加索引文件可能导致多重定位，如循环重定向死循环等）</li>
<li>正则匹配</li>
<li>普通匹配：普通匹配优先级最高，言外之意是正则会覆盖普通匹配的结果 ，普通匹配如果命中多个则最长的匹配结果先记下来，然后走正则匹配如果正则没有匹配到这返回这个最长的匹配结果，静态文件的动静分离 可以用 location 将静态文件 放到 应用以外的目录 然后用 loaction 正则定位。<br>
备注：当发现 404 时 要记住看下log 日志 是去哪个目录没找到 非常有用 。</li>
</ol>
<h3 id="日志管理："><a class="header-anchor" href="#日志管理：">¶</a>日志管理：</h3>
<p>首先日志可以辅助排错，<code>nginx</code>可以针对不同的<code>server</code>配置不同的<code>log</code>位置和<code>log</code>日志格式 ：默认是main 格式，大概是 来访者ip ，访问方式 ……</p>
<p>一个日志的切割管理bash:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">logpath = /usr/<span class="built_in">local</span>/nginx/<span class="built_in">log</span>/access.log</span><br><span class="line">topath  = /data/<span class="built_in">log</span>/$(date -d yesterday + <span class="string">&quot;%Y%m&quot;</span>)</span><br><span class="line">mkdir -p <span class="variable">$topath</span></span><br><span class="line">bathpath = <span class="variable">$topaht</span>/$(date -d yesterday + <span class="string">&quot;%Y%m%d&quot;</span>).<span class="built_in">log</span></span><br><span class="line">mv <span class="variable">$logpath</span> <span class="variable">$bathpaht</span></span><br><span class="line">touch <span class="variable">$logpath</span></span><br><span class="line"><span class="built_in">kill</span> USR1 /usr/run/nginx.pid</span><br><span class="line"></span><br><span class="line">sh ./run.sh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webserver</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Yii2</title>
    <url>/2016/05/13/Yii2/</url>
    <content><![CDATA[<h1>Yii2 登录机制和验证码的使用</h1>
<hr>
<h3 id="🐿️-Yii2登录"><a class="header-anchor" href="#🐿️-Yii2登录">¶</a>🐿️ Yii2登录</h3>
<p>如果要通过gii自定义生产user模型的话(不适用默认的user)，要在当前应用的config/main 下配置user组件路径如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;user&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;identityClass&#x27;</span> =&gt; <span class="string">&#x27;common\models\user\Diyouuser&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;enableAutoLogin&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure>
<pre><code>接下来在`loginForm` 模型下 `use common\models\user\Diyouuser;` 使用该模型

验证规则写在 loginForm 下 如：
</code></pre>
<span id="more"></span>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [[<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>], <span class="string">&#x27;required&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;validatePassword&#x27;</span>],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validatePassword</span>(<span class="params"><span class="variable">$attribute</span>, <span class="variable">$params</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;hasErrors()) &#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">$this</span>-&gt;getUser();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$user</span> || <span class="variable">$user</span>-&gt;password != md5(<span class="keyword">$this</span>-&gt;password)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;addError(<span class="variable">$attribute</span>, <span class="string">&#x27;用户名或者密码错误&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在触发登录前要先验证<code>validatePassword</code>的话 必须触发 <code>Yii</code>的</p>
<pre><code>$model-&gt;validate()
</code></pre>
<p>如果要添加自定义<code>validate</code>的话，也必须在触发login前调用自定义的<code>mycustvalidate</code>，<br>
<code>validate</code> 都验证通过后 在触发 Yii 的 login :</p>
<pre><code> Yii::$app-&gt;user-&gt;login($user);
</code></pre>
<p><code>$user</code> 是  <code>common\models\user\Diyouuser;</code>组件的一个组件而且必须实现 IdentityInterface 这个接口</p>
<h3 id="Yii2-验证码相关"><a class="header-anchor" href="#Yii2-验证码相关">¶</a>Yii2 验证码相关</h3>
<p>使用验证码步骤:</p>
<ol>
<li>在使用的相关类中重写 Controller中的actions方法主要是自定义配置。</li>
<li>要做Model的验证规则中指定使用的路径位置如 :<br>
<code>['verify', 'captcha','captchaAction'=&gt;'login/captcha']</code></li>
<li>在视图中使用widget 部件 如：</li>
</ol>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span> <span class="variable">$form</span>-&gt;field(<span class="variable">$model</span>, <span class="string">&#x27;verify&#x27;</span>, [</span><br><span class="line">    ])-&gt;widget(yii\captcha\Captcha::className(), [</span><br><span class="line">        <span class="string">&#x27;template&#x27;</span> =&gt; <span class="string">&#x27;&lt;div class=&quot;input-group&quot;&gt;</span></span><br><span class="line"><span class="string">                            &lt;span class=&quot;input-group-addon&quot;&gt;</span></span><br><span class="line"><span class="string">                                &lt;span class=&quot;glyphicon glyphicon-picture&quot;&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                            &lt;/span&gt;&#123;input&#125;</span></span><br><span class="line"><span class="string">                            &lt;span class=&quot;input-group-addon&quot;style=&quot;margin:0;padding:0&quot;&gt;</span></span><br><span class="line"><span class="string">                                    &#123;image&#125;</span></span><br><span class="line"><span class="string">                                    &lt;/span&gt;</span></span><br><span class="line"><span class="string">                                &lt;/div&gt;&#x27;</span>,</span><br><span class="line">                            <span class="string">&#x27;imageOptions&#x27;</span> =&gt; [</span><br><span class="line">                                <span class="string">&#x27;alt&#x27;</span> =&gt; <span class="string">&#x27;点击换图&#x27;</span>,</span><br><span class="line">                                <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;点击换图&#x27;</span>,</span><br><span class="line">                                <span class="string">&#x27;style&#x27;</span> =&gt; <span class="string">&#x27;cursor:pointer&#x27;</span></span><br><span class="line">                            ],</span><br><span class="line">                            <span class="string">&#x27;captchaAction&#x27;</span> =&gt; <span class="string">&#x27;login/captcha&#x27;</span>,</span><br><span class="line">     ])-&gt;label(<span class="literal">false</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Yii2-中的分页"><a class="header-anchor" href="#Yii2-中的分页">¶</a>Yii2 中的分页</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;nav&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;widget(<span class="string">&#x27;CLinkPager&#x27;</span>,<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;header&#x27;</span>=&gt;<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;firstPageLabel&#x27;</span> =&gt; <span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lastPageLabel&#x27;</span> =&gt; <span class="string">&#x27;末页&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;prevPageLabel&#x27;</span> =&gt; <span class="string">&#x27;上一页&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;nextPageLabel&#x27;</span> =&gt; <span class="string">&#x27;下一页&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pages&#x27;</span> =&gt; <span class="variable">$pager</span>,</span><br><span class="line">    <span class="string">&#x27;maxButtonCount&#x27;</span>=&gt;<span class="number">8</span>,</span><br><span class="line">    <span class="string">&#x27;cssFile&#x27;</span>=&gt;<span class="literal">false</span>,</span><br><span class="line">    <span class="string">&#x27;htmlOptions&#x27;</span> =&gt;<span class="keyword">array</span>(<span class="string">&quot;class&quot;</span>=&gt;<span class="string">&quot;pagination&quot;</span>),</span><br><span class="line">    <span class="string">&#x27;selectedPageCssClass&#x27;</span>=&gt;<span class="string">&quot;active&quot;</span></span><br><span class="line"> )</span><br><span class="line"> );</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/nav&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li>分页必须在<code>&lt;nav&gt;</code>里</li>
<li><code>htmlOptions</code>选项是必须的，他指定了yii生成的分页<code>div</code>的<code>class</code>名称，在这里我们使用bootstrap的class名</li>
<li>selectedPageCssClass选项指定了当前选中页的样多，在这里我们使用bootstrap的active</li>
<li>另外还需要把cssFile设为false，不加载分页css样式文件</li>
</ol>
<hr>
<h1>Yii2事件</h1>
<hr>
<h3 id="Yii2中的事件原理"><a class="header-anchor" href="#Yii2中的事件原理">¶</a>Yii2中的事件原理</h3>
<p><code>Yii2</code>中的事件<code>handle</code>,就是一段回调处理程序，说白了<code>handle</code>就是回调函数的应用，php中回调的应用几种方式：</p>
<p>一. 一个全局的函数 如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">call_usr_func(<span class="string">&#x27;funcname&#x27;</span>,<span class="string">&#x27;args&#x27;</span>)</span><br><span class="line"><span class="variable">$person</span> = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="comment">// 使用PHP全局函数作为handler来进行绑定</span></span><br><span class="line"><span class="variable">$person</span>-&gt;on(Person::EVENT_GREET, <span class="string">&#x27;person_say_hello&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>二. 对象中的成员方法如果:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用对象$obj的成员函数say_hello来进行绑定</span></span><br><span class="line"><span class="variable">$person</span>-&gt;on(Person::EVENT_GREET, [<span class="variable">$obj</span>, <span class="string">&#x27;say_hello&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>三.类中的静态方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用类Greet的静态成员函数say_hello进行绑定</span></span><br><span class="line"><span class="variable">$person</span>-&gt;on(Person::EVENT_GREET, [<span class="string">&#x27;app\helper\Greet&#x27;</span>, <span class="string">&#x27;say_hello&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>四. 匿名函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用匿名函数</span></span><br><span class="line"><span class="variable">$person</span>-&gt;on(Person::EVENT_GREET, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$event</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>Yii</code> 在绑定事件的时候 其实就是 维护一个 <code>_event</code> 事件数组，通过<code>on</code> 方法 按照规则 将<code> handle</code>和<code>args</code>插入到事件数组里，当调用<code>trigger</code>时候，其实就是循环 <code>_enevt</code> 然后 通过 <code>call_user_func_array()</code>触发 回调，回调的逻辑要在 ，定义好的 以上四种 中<code>handdle</code> 中实现。</p>
<hr>
<h1>Yii2 Layout</h1>
<hr>
<h3 id="Layout布局"><a class="header-anchor" href="#Layout布局">¶</a>Layout布局</h3>
<p>在<code>controall</code> 中使用布局文件方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">Parent</span>:: init();</span><br><span class="line">	<span class="comment">//在当前controll 指定布局文件</span></span><br><span class="line">	<span class="keyword">$this</span>-&gt;layout = <span class="string">&#x27;custmain&#x27;</span>；</span><br><span class="line">	<span class="comment">//在当前controll不使用布局文件</span></span><br><span class="line">	<span class="keyword">$this</span>-&gt;layout = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在<code>controll </code>渲染视图前 在指定要重新定义的<code>layout</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionTest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">$this</span>-&gt;layout = <span class="string">&#x27;main&#x27;</span>；</span><br><span class="line">	<span class="keyword">$this</span>-&gt;render();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>布局文件可以嵌套使用：原理是从内往外逐层传递<code>$content</code> 变量<br>
例如：<br>
Testlayout 中指定</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;beginContent(<span class="string">&#x27;@/app/view/layout/main&#x27;</span>)  <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">		Cust content</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$content</span>  <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;endcontent <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>最终将<code>testlayout</code>文件作为一个<code>content</code>变量传递到<code>main</code>中的<code>content</code></p>
<p><code>View</code> 中可以指定多个 <code>block</code> 块 默认是一个 <code>content</code>,每个<code>block</code>款 要在<code>layout</code>布局文件中 用变量一一对应 如:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//View 中指定两个 block</span></span><br><span class="line"><span class="meta">&lt;?php</span>  <span class="keyword">$this</span>-&gt;beginBlock(<span class="string">&#x27;content&#x27;</span>);<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">	&lt;div&gt;test&lt;/div&gt;</span><br><span class="line">	</span><br><span class="line"><span class="meta">&lt;?php</span>  <span class="keyword">$this</span>-&gt;endBlock ();<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  <span class="keyword">$this</span>-&gt;beginBlock(<span class="string">&#x27;contenttwo&#x27;</span>);<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">	&lt;div&gt;test&lt;/div&gt;</span><br><span class="line">	</span><br><span class="line"><span class="meta">&lt;?php</span>  <span class="keyword">$this</span>-&gt;endBlock ();<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//那么在 laoyout 中main  文件中 要有两个变量 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  <span class="keyword">echo</span> <span class="variable">$content</span> ;<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  <span class="keyword">echo</span> <span class="variable">$contenttwo</span> ;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h1>Yii2中 widget 和 assets 的使用：</h1>
<h3 id="assets-的使用"><a class="header-anchor" href="#assets-的使用">¶</a>assets 的使用</h3>
<p>使用 <code>assets</code> 资源控制器，可以达到按需加载<code>css</code>、<code>js</code>样式的目的，通常会将一个站点的公共部分提取出来，制作<code>layout</code>布局并且制作公共 <code>assets</code>，在<code>layout</code>的布局中将<code> assets</code>注册进来。<br>
例如：<br>
先定义一个 <code>MainAsset</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainAsset</span> <span class="keyword">extends</span> <span class="title">AssetBundle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$basePath</span> = <span class="string">&#x27;@webroot&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$baseUrl</span> = <span class="string">&#x27;@web&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$css</span> = [</span><br><span class="line">        <span class="string">&#x27;css/base.css&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$js</span> = [</span><br><span class="line"></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$depends</span> = [</span><br><span class="line">        <span class="string">&#x27;yii\web\YiiAsset&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;yii\web\JqueryAsset&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;backend\assets\FontAwesomeAsset&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;yii\bootstrap\BootstrapAsset&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>然后在<code>layout</code>中这样使用 ：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">MainAsset::register(<span class="keyword">$this</span>); <span class="comment">//默认会将css添加到header中将js添加到页尾</span></span><br></pre></td></tr></table></figure>
<p>当有个别页面需要加载不同静态文件时，有两种引用方式：<br>
一：在视图中通过<code>$this-&gt;registerJsFile()</code>引入可以指定依赖关系和加载顺序例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;registerJsFile(<span class="string">&#x27;/js/editormd.js&#x27;</span>,[<span class="string">&#x27;depends&#x27;</span>=&gt;[<span class="string">&#x27;yii\web\JqueryAsset&#x27;</span>]]);</span><br><span class="line"><span class="keyword">$this</span>-&gt;registerCssFile(<span class="string">&#x27;/js/editormd.css&#x27;</span>,[<span class="string">&#x27;depends&#x27;</span>=&gt;[<span class="string">&#x27;yii\web\JqueryAsset&#x27;</span>]]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果在控制器中可以使用当前的视图对象如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$view</span> = <span class="keyword">$this</span>-&gt;getView();</span><br><span class="line">  <span class="variable">$view</span>-&gt;registerJsFile(<span class="string">&#x27;/js/editormd.js&#x27;</span>,[<span class="string">&#x27;depends&#x27;</span>=&gt;[<span class="string">&#x27;yii\web\JqueryAsset&#x27;</span>]]);</span><br><span class="line">  <span class="variable">$view</span>-&gt;registerCssFile(<span class="variable">$cssfile</span>, [AppAsset::className(), <span class="string">&#x27;depends&#x27;</span> =&gt; <span class="string">&#x27;frontend\assets\AppAsset&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>二：在单独制作出一个<code>authorassets</code>类<br>
在页面中通过 <code>authorassets ::register($this);</code>注册进来</p>
<p>在控制器中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$view</span> = <span class="keyword">$this</span>-&gt;getView();</span><br><span class="line">authorassets::register(<span class="variable">$view</span>);</span><br></pre></td></tr></table></figure>
<p>在控制器中执行一段js代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$view</span>-&gt;registerJs(<span class="string">&#x27;var &#x27;</span>.<span class="variable">$handle</span>.<span class="string">&#x27; = editormd(&#x27;</span>.<span class="variable">$options</span>.<span class="string">&#x27;);&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="widget的使用"><a class="header-anchor" href="#widget的使用">¶</a>widget的使用</h3>
<p><code>widget</code>大部分都是在<code>view</code>中使用 分为两种情况：<br>
一：通过数据模型的<code>ActiveField</code>调用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="variable">$form</span>-&gt;field(<span class="variable">$model</span>,<span class="string">&#x27;markdown&#x27;</span>)-&gt;widget(<span class="string">&#x27;common\widgets\EditorMD&#x27;</span>,[</span><br><span class="line">    <span class="string">&#x27;editorConfigs&#x27;</span>=&gt;[</span><br><span class="line">    <span class="string">&#x27;height&#x27;</span>=&gt;<span class="number">500</span>,</span><br><span class="line">    <span class="string">&#x27;markTextarea&#x27;</span>=&gt;<span class="string">&#x27;Article[markdown]&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;htmlTextarea&#x27;</span>=&gt;<span class="string">&#x27;Article[content]&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;saveHTMLToTextarea&#x27;</span>=&gt;<span class="literal">true</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;editorOptions&#x27;</span>=&gt;[</span><br><span class="line">    <span class="string">&#x27;style&#x27;</span>=&gt;<span class="string">&#x27;z-index:1000;&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">])<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>ActiveField</code>中会自动触发我们自定义的<code>widget</code>如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">widget</span>(<span class="params"><span class="variable">$class</span>, <span class="variable">$config</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* <span class="doctag">@var</span> $class \yii\base\Widget */</span></span><br><span class="line">    <span class="variable">$config</span>[<span class="string">&#x27;model&#x27;</span>] = <span class="keyword">$this</span>-&gt;model;</span><br><span class="line">    <span class="variable">$config</span>[<span class="string">&#x27;attribute&#x27;</span>] = <span class="keyword">$this</span>-&gt;attribute;</span><br><span class="line">    <span class="variable">$config</span>[<span class="string">&#x27;view&#x27;</span>] = <span class="keyword">$this</span>-&gt;form-&gt;getView();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;parts[<span class="string">&#x27;&#123;input&#125;&#x27;</span>] = <span class="variable">$class</span>::widget(<span class="variable">$config</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二：直接使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span> \backend\widgets\UploadWidget::widget([<span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;icon_5&#x27;</span>, <span class="string">&#x27;upload_success&#x27;</span> =&gt; <span class="string">&#x27;upload_success&#x27;</span>]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>设计<code>widget</code>的步骤：</p>
<p>定义属性：调用<code>widget</code>的时候传的属性值要在<code>widget</code>中先定义</p>
<p><code>widget</code>调用初始化时<code>init()</code>的逻辑</p>
<p>最后<code>run()</code>进行输出。</p>
]]></content>
      <categories>
        <category>Yii</category>
      </categories>
      <tags>
        <tag>Yii</tag>
      </tags>
  </entry>
</search>
